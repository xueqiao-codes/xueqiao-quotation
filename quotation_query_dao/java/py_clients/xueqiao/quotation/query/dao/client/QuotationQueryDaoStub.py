#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import socket
from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TCompactProtocol
from thrift.transport.TTransport import TTransportException
from comm.ttypes import *
from xueqiao.quotation.ttypes import *
from xueqiao.quotation.query.dao.ttypes import *
from xueqiao.quotation.query.dao import QuotationQueryDao

PYTHON_SUPPORT_DIR='/usr/local/soldier/route_agent'
if not (PYTHON_SUPPORT_DIR in sys.path):
  sys.path.append(PYTHON_SUPPORT_DIR)
from route_finder_python import *

class QuotationQueryDaoStub:
  def __init__(self):
    self.__peerAddr = None

  def setPeerAddr(self, peerAddr):
    self.__peerAddr = peerAddr

  def __getServiceAddr(self, methodName='', routeKey=0):
    if self.__peerAddr != None and self.__peerAddr !='':
      return self.__peerAddr
    return route_finder.GetRouteIp(QuotationQueryDao.QuotationQueryDao_SERVICE_KEY, methodName, routeKey)

  def getTicks(self, routeKey, timeout, option,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getTicks', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationQueryDao.QuotationQueryDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationQueryDao.Client(protocol)
    try:
      transport.open()
      result = client.getTicks(platformArgs,option,)
      route_finder.UpdateCallInfo(QuotationQueryDao.QuotationQueryDao_SERVICE_KEY, 'getTicks', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationQueryDao.QuotationQueryDao_SERVICE_KEY, 'getTicks', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getKLineMinutes(self, routeKey, timeout, option,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getKLineMinutes', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationQueryDao.QuotationQueryDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationQueryDao.Client(protocol)
    try:
      transport.open()
      result = client.getKLineMinutes(platformArgs,option,)
      route_finder.UpdateCallInfo(QuotationQueryDao.QuotationQueryDao_SERVICE_KEY, 'getKLineMinutes', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationQueryDao.QuotationQueryDao_SERVICE_KEY, 'getKLineMinutes', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

