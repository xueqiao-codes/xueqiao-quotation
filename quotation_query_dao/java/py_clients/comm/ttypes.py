#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ErrorInfo(TException):
  """
  Attributes:
   - errorCode
   - errorMsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'errorCode', None, None, ), # 1
    (2, TType.STRING, 'errorMsg', None, None, ), # 2
  )

  def __init__(self, errorCode=None, errorMsg=None,):
    self.errorCode = errorCode
    self.errorMsg = errorMsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.errorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errorMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ErrorInfo')
    if self.errorCode is not None:
      oprot.writeFieldBegin('errorCode', TType.I32, 1)
      oprot.writeI32(self.errorCode)
      oprot.writeFieldEnd()
    if self.errorMsg is not None:
      oprot.writeFieldBegin('errorMsg', TType.STRING, 2)
      oprot.writeString(self.errorMsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.errorCode is None:
      raise TProtocol.TProtocolException(message='Required field errorCode is unset!')
    if self.errorMsg is None:
      raise TProtocol.TProtocolException(message='Required field errorMsg is unset!')
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlatformArgs:
  """
  平台级参数，方便以后进行治理和差错

  Attributes:
   - sourceDesc
   - sourceIpV4
   - remoteAddress
   - remotePort
   - xForwardAddress
   - sourceIp
   - timeoutMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sourceDesc', None, None, ), # 1
    (2, TType.I32, 'sourceIpV4', None, None, ), # 2
    (3, TType.STRING, 'remoteAddress', None, None, ), # 3
    (4, TType.I32, 'remotePort', None, None, ), # 4
    (5, TType.STRING, 'xForwardAddress', None, None, ), # 5
    (6, TType.STRING, 'sourceIp', None, None, ), # 6
    (7, TType.I32, 'timeoutMs', None, None, ), # 7
  )

  def __init__(self, sourceDesc=None, sourceIpV4=None, remoteAddress=None, remotePort=None, xForwardAddress=None, sourceIp=None, timeoutMs=None,):
    self.sourceDesc = sourceDesc
    self.sourceIpV4 = sourceIpV4
    self.remoteAddress = remoteAddress
    self.remotePort = remotePort
    self.xForwardAddress = xForwardAddress
    self.sourceIp = sourceIp
    self.timeoutMs = timeoutMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sourceDesc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sourceIpV4 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.remoteAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.remotePort = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.xForwardAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.sourceIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.timeoutMs = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlatformArgs')
    if self.sourceDesc is not None:
      oprot.writeFieldBegin('sourceDesc', TType.STRING, 1)
      oprot.writeString(self.sourceDesc)
      oprot.writeFieldEnd()
    if self.sourceIpV4 is not None:
      oprot.writeFieldBegin('sourceIpV4', TType.I32, 2)
      oprot.writeI32(self.sourceIpV4)
      oprot.writeFieldEnd()
    if self.remoteAddress is not None:
      oprot.writeFieldBegin('remoteAddress', TType.STRING, 3)
      oprot.writeString(self.remoteAddress)
      oprot.writeFieldEnd()
    if self.remotePort is not None:
      oprot.writeFieldBegin('remotePort', TType.I32, 4)
      oprot.writeI32(self.remotePort)
      oprot.writeFieldEnd()
    if self.xForwardAddress is not None:
      oprot.writeFieldBegin('xForwardAddress', TType.STRING, 5)
      oprot.writeString(self.xForwardAddress)
      oprot.writeFieldEnd()
    if self.sourceIp is not None:
      oprot.writeFieldBegin('sourceIp', TType.STRING, 6)
      oprot.writeString(self.sourceIp)
      oprot.writeFieldEnd()
    if self.timeoutMs is not None:
      oprot.writeFieldBegin('timeoutMs', TType.I32, 7)
      oprot.writeI32(self.timeoutMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
