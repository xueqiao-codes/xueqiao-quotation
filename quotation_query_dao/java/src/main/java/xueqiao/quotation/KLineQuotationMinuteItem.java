/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.quotation;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class KLineQuotationMinuteItem implements org.apache.thrift.TBase<KLineQuotationMinuteItem, KLineQuotationMinuteItem._Fields>, java.io.Serializable, Cloneable, Comparable<KLineQuotationMinuteItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KLineQuotationMinuteItem");

  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONTRACT_SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("contractSymbol", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField K_MINUTE_START_TIMESTAMP_S_FIELD_DESC = new org.apache.thrift.protocol.TField("kMinuteStartTimestampS", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField K_MINUTE_PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("kMinutePeriod", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("detail", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new KLineQuotationMinuteItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new KLineQuotationMinuteItemTupleSchemeFactory());
  }

  public String platform; // optional
  public String contractSymbol; // optional
  public long kMinuteStartTimestampS; // optional
  public short kMinutePeriod; // optional
  public KLineQuotationDetail detail; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLATFORM((short)1, "platform"),
    CONTRACT_SYMBOL((short)2, "contractSymbol"),
    K_MINUTE_START_TIMESTAMP_S((short)3, "kMinuteStartTimestampS"),
    K_MINUTE_PERIOD((short)4, "kMinutePeriod"),
    DETAIL((short)5, "detail");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLATFORM
          return PLATFORM;
        case 2: // CONTRACT_SYMBOL
          return CONTRACT_SYMBOL;
        case 3: // K_MINUTE_START_TIMESTAMP_S
          return K_MINUTE_START_TIMESTAMP_S;
        case 4: // K_MINUTE_PERIOD
          return K_MINUTE_PERIOD;
        case 5: // DETAIL
          return DETAIL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __KMINUTESTARTTIMESTAMPS_ISSET_ID = 0;
  private static final int __KMINUTEPERIOD_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PLATFORM,_Fields.CONTRACT_SYMBOL,_Fields.K_MINUTE_START_TIMESTAMP_S,_Fields.K_MINUTE_PERIOD,_Fields.DETAIL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("contractSymbol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.K_MINUTE_START_TIMESTAMP_S, new org.apache.thrift.meta_data.FieldMetaData("kMinuteStartTimestampS", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.K_MINUTE_PERIOD, new org.apache.thrift.meta_data.FieldMetaData("kMinutePeriod", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DETAIL, new org.apache.thrift.meta_data.FieldMetaData("detail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KLineQuotationDetail.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KLineQuotationMinuteItem.class, metaDataMap);
  }

  public KLineQuotationMinuteItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KLineQuotationMinuteItem(KLineQuotationMinuteItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPlatform()) {
      this.platform = other.platform;
    }
    if (other.isSetContractSymbol()) {
      this.contractSymbol = other.contractSymbol;
    }
    this.kMinuteStartTimestampS = other.kMinuteStartTimestampS;
    this.kMinutePeriod = other.kMinutePeriod;
    if (other.isSetDetail()) {
      this.detail = new KLineQuotationDetail(other.detail);
    }
  }

  public KLineQuotationMinuteItem deepCopy() {
    return new KLineQuotationMinuteItem(this);
  }

  @Override
  public void clear() {
    this.platform = null;
    this.contractSymbol = null;
    setKMinuteStartTimestampSIsSet(false);
    this.kMinuteStartTimestampS = 0;
    setKMinutePeriodIsSet(false);
    this.kMinutePeriod = 0;
    this.detail = null;
  }

  public String getPlatform() {
    return this.platform;
  }

  public KLineQuotationMinuteItem setPlatform(String platform) {
    this.platform = platform;
    return this;
  }

  public void unsetPlatform() {
    this.platform = null;
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return this.platform != null;
  }

  public void setPlatformIsSet(boolean value) {
    if (!value) {
      this.platform = null;
    }
  }

  public String getContractSymbol() {
    return this.contractSymbol;
  }

  public KLineQuotationMinuteItem setContractSymbol(String contractSymbol) {
    this.contractSymbol = contractSymbol;
    return this;
  }

  public void unsetContractSymbol() {
    this.contractSymbol = null;
  }

  /** Returns true if field contractSymbol is set (has been assigned a value) and false otherwise */
  public boolean isSetContractSymbol() {
    return this.contractSymbol != null;
  }

  public void setContractSymbolIsSet(boolean value) {
    if (!value) {
      this.contractSymbol = null;
    }
  }

  public long getKMinuteStartTimestampS() {
    return this.kMinuteStartTimestampS;
  }

  public KLineQuotationMinuteItem setKMinuteStartTimestampS(long kMinuteStartTimestampS) {
    this.kMinuteStartTimestampS = kMinuteStartTimestampS;
    setKMinuteStartTimestampSIsSet(true);
    return this;
  }

  public void unsetKMinuteStartTimestampS() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KMINUTESTARTTIMESTAMPS_ISSET_ID);
  }

  /** Returns true if field kMinuteStartTimestampS is set (has been assigned a value) and false otherwise */
  public boolean isSetKMinuteStartTimestampS() {
    return EncodingUtils.testBit(__isset_bitfield, __KMINUTESTARTTIMESTAMPS_ISSET_ID);
  }

  public void setKMinuteStartTimestampSIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KMINUTESTARTTIMESTAMPS_ISSET_ID, value);
  }

  public short getKMinutePeriod() {
    return this.kMinutePeriod;
  }

  public KLineQuotationMinuteItem setKMinutePeriod(short kMinutePeriod) {
    this.kMinutePeriod = kMinutePeriod;
    setKMinutePeriodIsSet(true);
    return this;
  }

  public void unsetKMinutePeriod() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KMINUTEPERIOD_ISSET_ID);
  }

  /** Returns true if field kMinutePeriod is set (has been assigned a value) and false otherwise */
  public boolean isSetKMinutePeriod() {
    return EncodingUtils.testBit(__isset_bitfield, __KMINUTEPERIOD_ISSET_ID);
  }

  public void setKMinutePeriodIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KMINUTEPERIOD_ISSET_ID, value);
  }

  public KLineQuotationDetail getDetail() {
    return this.detail;
  }

  public KLineQuotationMinuteItem setDetail(KLineQuotationDetail detail) {
    this.detail = detail;
    return this;
  }

  public void unsetDetail() {
    this.detail = null;
  }

  /** Returns true if field detail is set (has been assigned a value) and false otherwise */
  public boolean isSetDetail() {
    return this.detail != null;
  }

  public void setDetailIsSet(boolean value) {
    if (!value) {
      this.detail = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((String)value);
      }
      break;

    case CONTRACT_SYMBOL:
      if (value == null) {
        unsetContractSymbol();
      } else {
        setContractSymbol((String)value);
      }
      break;

    case K_MINUTE_START_TIMESTAMP_S:
      if (value == null) {
        unsetKMinuteStartTimestampS();
      } else {
        setKMinuteStartTimestampS((Long)value);
      }
      break;

    case K_MINUTE_PERIOD:
      if (value == null) {
        unsetKMinutePeriod();
      } else {
        setKMinutePeriod((Short)value);
      }
      break;

    case DETAIL:
      if (value == null) {
        unsetDetail();
      } else {
        setDetail((KLineQuotationDetail)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLATFORM:
      return getPlatform();

    case CONTRACT_SYMBOL:
      return getContractSymbol();

    case K_MINUTE_START_TIMESTAMP_S:
      return Long.valueOf(getKMinuteStartTimestampS());

    case K_MINUTE_PERIOD:
      return Short.valueOf(getKMinutePeriod());

    case DETAIL:
      return getDetail();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLATFORM:
      return isSetPlatform();
    case CONTRACT_SYMBOL:
      return isSetContractSymbol();
    case K_MINUTE_START_TIMESTAMP_S:
      return isSetKMinuteStartTimestampS();
    case K_MINUTE_PERIOD:
      return isSetKMinutePeriod();
    case DETAIL:
      return isSetDetail();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KLineQuotationMinuteItem)
      return this.equals((KLineQuotationMinuteItem)that);
    return false;
  }

  public boolean equals(KLineQuotationMinuteItem that) {
    if (that == null)
      return false;

    boolean this_present_platform = true && this.isSetPlatform();
    boolean that_present_platform = true && that.isSetPlatform();
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (!this.platform.equals(that.platform))
        return false;
    }

    boolean this_present_contractSymbol = true && this.isSetContractSymbol();
    boolean that_present_contractSymbol = true && that.isSetContractSymbol();
    if (this_present_contractSymbol || that_present_contractSymbol) {
      if (!(this_present_contractSymbol && that_present_contractSymbol))
        return false;
      if (!this.contractSymbol.equals(that.contractSymbol))
        return false;
    }

    boolean this_present_kMinuteStartTimestampS = true && this.isSetKMinuteStartTimestampS();
    boolean that_present_kMinuteStartTimestampS = true && that.isSetKMinuteStartTimestampS();
    if (this_present_kMinuteStartTimestampS || that_present_kMinuteStartTimestampS) {
      if (!(this_present_kMinuteStartTimestampS && that_present_kMinuteStartTimestampS))
        return false;
      if (this.kMinuteStartTimestampS != that.kMinuteStartTimestampS)
        return false;
    }

    boolean this_present_kMinutePeriod = true && this.isSetKMinutePeriod();
    boolean that_present_kMinutePeriod = true && that.isSetKMinutePeriod();
    if (this_present_kMinutePeriod || that_present_kMinutePeriod) {
      if (!(this_present_kMinutePeriod && that_present_kMinutePeriod))
        return false;
      if (this.kMinutePeriod != that.kMinutePeriod)
        return false;
    }

    boolean this_present_detail = true && this.isSetDetail();
    boolean that_present_detail = true && that.isSetDetail();
    if (this_present_detail || that_present_detail) {
      if (!(this_present_detail && that_present_detail))
        return false;
      if (!this.detail.equals(that.detail))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(KLineQuotationMinuteItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractSymbol()).compareTo(other.isSetContractSymbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractSymbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractSymbol, other.contractSymbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKMinuteStartTimestampS()).compareTo(other.isSetKMinuteStartTimestampS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKMinuteStartTimestampS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kMinuteStartTimestampS, other.kMinuteStartTimestampS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKMinutePeriod()).compareTo(other.isSetKMinutePeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKMinutePeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kMinutePeriod, other.kMinutePeriod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetail()).compareTo(other.isSetDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detail, other.detail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KLineQuotationMinuteItem(");
    boolean first = true;

    if (isSetPlatform()) {
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
    }
    if (isSetContractSymbol()) {
      if (!first) sb.append(", ");
      sb.append("contractSymbol:");
      if (this.contractSymbol == null) {
        sb.append("null");
      } else {
        sb.append(this.contractSymbol);
      }
      first = false;
    }
    if (isSetKMinuteStartTimestampS()) {
      if (!first) sb.append(", ");
      sb.append("kMinuteStartTimestampS:");
      sb.append(this.kMinuteStartTimestampS);
      first = false;
    }
    if (isSetKMinutePeriod()) {
      if (!first) sb.append(", ");
      sb.append("kMinutePeriod:");
      sb.append(this.kMinutePeriod);
      first = false;
    }
    if (isSetDetail()) {
      if (!first) sb.append(", ");
      sb.append("detail:");
      if (this.detail == null) {
        sb.append("null");
      } else {
        sb.append(this.detail);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (detail != null) {
      detail.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KLineQuotationMinuteItemStandardSchemeFactory implements SchemeFactory {
    public KLineQuotationMinuteItemStandardScheme getScheme() {
      return new KLineQuotationMinuteItemStandardScheme();
    }
  }

  private static class KLineQuotationMinuteItemStandardScheme extends StandardScheme<KLineQuotationMinuteItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KLineQuotationMinuteItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.platform = iprot.readString();
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTRACT_SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractSymbol = iprot.readString();
              struct.setContractSymbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // K_MINUTE_START_TIMESTAMP_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.kMinuteStartTimestampS = iprot.readI64();
              struct.setKMinuteStartTimestampSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // K_MINUTE_PERIOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.kMinutePeriod = iprot.readI16();
              struct.setKMinutePeriodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.detail = new KLineQuotationDetail();
              struct.detail.read(iprot);
              struct.setDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KLineQuotationMinuteItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.platform != null) {
        if (struct.isSetPlatform()) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractSymbol != null) {
        if (struct.isSetContractSymbol()) {
          oprot.writeFieldBegin(CONTRACT_SYMBOL_FIELD_DESC);
          oprot.writeString(struct.contractSymbol);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetKMinuteStartTimestampS()) {
        oprot.writeFieldBegin(K_MINUTE_START_TIMESTAMP_S_FIELD_DESC);
        oprot.writeI64(struct.kMinuteStartTimestampS);
        oprot.writeFieldEnd();
      }
      if (struct.isSetKMinutePeriod()) {
        oprot.writeFieldBegin(K_MINUTE_PERIOD_FIELD_DESC);
        oprot.writeI16(struct.kMinutePeriod);
        oprot.writeFieldEnd();
      }
      if (struct.detail != null) {
        if (struct.isSetDetail()) {
          oprot.writeFieldBegin(DETAIL_FIELD_DESC);
          struct.detail.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KLineQuotationMinuteItemTupleSchemeFactory implements SchemeFactory {
    public KLineQuotationMinuteItemTupleScheme getScheme() {
      return new KLineQuotationMinuteItemTupleScheme();
    }
  }

  private static class KLineQuotationMinuteItemTupleScheme extends TupleScheme<KLineQuotationMinuteItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KLineQuotationMinuteItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlatform()) {
        optionals.set(0);
      }
      if (struct.isSetContractSymbol()) {
        optionals.set(1);
      }
      if (struct.isSetKMinuteStartTimestampS()) {
        optionals.set(2);
      }
      if (struct.isSetKMinutePeriod()) {
        optionals.set(3);
      }
      if (struct.isSetDetail()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPlatform()) {
        oprot.writeString(struct.platform);
      }
      if (struct.isSetContractSymbol()) {
        oprot.writeString(struct.contractSymbol);
      }
      if (struct.isSetKMinuteStartTimestampS()) {
        oprot.writeI64(struct.kMinuteStartTimestampS);
      }
      if (struct.isSetKMinutePeriod()) {
        oprot.writeI16(struct.kMinutePeriod);
      }
      if (struct.isSetDetail()) {
        struct.detail.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KLineQuotationMinuteItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.platform = iprot.readString();
        struct.setPlatformIsSet(true);
      }
      if (incoming.get(1)) {
        struct.contractSymbol = iprot.readString();
        struct.setContractSymbolIsSet(true);
      }
      if (incoming.get(2)) {
        struct.kMinuteStartTimestampS = iprot.readI64();
        struct.setKMinuteStartTimestampSIsSet(true);
      }
      if (incoming.get(3)) {
        struct.kMinutePeriod = iprot.readI16();
        struct.setKMinutePeriodIsSet(true);
      }
      if (incoming.get(4)) {
        struct.detail = new KLineQuotationDetail();
        struct.detail.read(iprot);
        struct.setDetailIsSet(true);
      }
    }
  }

}

