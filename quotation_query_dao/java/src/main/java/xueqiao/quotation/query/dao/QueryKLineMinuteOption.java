/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.quotation.query.dao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryKLineMinuteOption implements org.apache.thrift.TBase<QueryKLineMinuteOption, QueryKLineMinuteOption._Fields>, java.io.Serializable, Cloneable, Comparable<QueryKLineMinuteOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryKLineMinuteOption");

  private static final org.apache.thrift.protocol.TField CONTRACT_BASIC_FIELD_DESC = new org.apache.thrift.protocol.TField("contractBasic", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField START_MINUTE_TIMESTAMP_S_FIELD_DESC = new org.apache.thrift.protocol.TField("startMinuteTimestampS", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField END_MINUTE_TIMESTAMP_S_FIELD_DESC = new org.apache.thrift.protocol.TField("endMinuteTimestampS", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryKLineMinuteOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryKLineMinuteOptionTupleSchemeFactory());
  }

  public ContractBasicInfo contractBasic; // required
  public long startMinuteTimestampS; // optional
  public long endMinuteTimestampS; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTRACT_BASIC((short)1, "contractBasic"),
    START_MINUTE_TIMESTAMP_S((short)2, "startMinuteTimestampS"),
    END_MINUTE_TIMESTAMP_S((short)3, "endMinuteTimestampS");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTRACT_BASIC
          return CONTRACT_BASIC;
        case 2: // START_MINUTE_TIMESTAMP_S
          return START_MINUTE_TIMESTAMP_S;
        case 3: // END_MINUTE_TIMESTAMP_S
          return END_MINUTE_TIMESTAMP_S;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTMINUTETIMESTAMPS_ISSET_ID = 0;
  private static final int __ENDMINUTETIMESTAMPS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.START_MINUTE_TIMESTAMP_S,_Fields.END_MINUTE_TIMESTAMP_S};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTRACT_BASIC, new org.apache.thrift.meta_data.FieldMetaData("contractBasic", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContractBasicInfo.class)));
    tmpMap.put(_Fields.START_MINUTE_TIMESTAMP_S, new org.apache.thrift.meta_data.FieldMetaData("startMinuteTimestampS", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_MINUTE_TIMESTAMP_S, new org.apache.thrift.meta_data.FieldMetaData("endMinuteTimestampS", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryKLineMinuteOption.class, metaDataMap);
  }

  public QueryKLineMinuteOption() {
  }

  public QueryKLineMinuteOption(
    ContractBasicInfo contractBasic)
  {
    this();
    this.contractBasic = contractBasic;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryKLineMinuteOption(QueryKLineMinuteOption other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetContractBasic()) {
      this.contractBasic = new ContractBasicInfo(other.contractBasic);
    }
    this.startMinuteTimestampS = other.startMinuteTimestampS;
    this.endMinuteTimestampS = other.endMinuteTimestampS;
  }

  public QueryKLineMinuteOption deepCopy() {
    return new QueryKLineMinuteOption(this);
  }

  @Override
  public void clear() {
    this.contractBasic = null;
    setStartMinuteTimestampSIsSet(false);
    this.startMinuteTimestampS = 0;
    setEndMinuteTimestampSIsSet(false);
    this.endMinuteTimestampS = 0;
  }

  public ContractBasicInfo getContractBasic() {
    return this.contractBasic;
  }

  public QueryKLineMinuteOption setContractBasic(ContractBasicInfo contractBasic) {
    this.contractBasic = contractBasic;
    return this;
  }

  public void unsetContractBasic() {
    this.contractBasic = null;
  }

  /** Returns true if field contractBasic is set (has been assigned a value) and false otherwise */
  public boolean isSetContractBasic() {
    return this.contractBasic != null;
  }

  public void setContractBasicIsSet(boolean value) {
    if (!value) {
      this.contractBasic = null;
    }
  }

  public long getStartMinuteTimestampS() {
    return this.startMinuteTimestampS;
  }

  public QueryKLineMinuteOption setStartMinuteTimestampS(long startMinuteTimestampS) {
    this.startMinuteTimestampS = startMinuteTimestampS;
    setStartMinuteTimestampSIsSet(true);
    return this;
  }

  public void unsetStartMinuteTimestampS() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTMINUTETIMESTAMPS_ISSET_ID);
  }

  /** Returns true if field startMinuteTimestampS is set (has been assigned a value) and false otherwise */
  public boolean isSetStartMinuteTimestampS() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTMINUTETIMESTAMPS_ISSET_ID);
  }

  public void setStartMinuteTimestampSIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTMINUTETIMESTAMPS_ISSET_ID, value);
  }

  public long getEndMinuteTimestampS() {
    return this.endMinuteTimestampS;
  }

  public QueryKLineMinuteOption setEndMinuteTimestampS(long endMinuteTimestampS) {
    this.endMinuteTimestampS = endMinuteTimestampS;
    setEndMinuteTimestampSIsSet(true);
    return this;
  }

  public void unsetEndMinuteTimestampS() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDMINUTETIMESTAMPS_ISSET_ID);
  }

  /** Returns true if field endMinuteTimestampS is set (has been assigned a value) and false otherwise */
  public boolean isSetEndMinuteTimestampS() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDMINUTETIMESTAMPS_ISSET_ID);
  }

  public void setEndMinuteTimestampSIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDMINUTETIMESTAMPS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTRACT_BASIC:
      if (value == null) {
        unsetContractBasic();
      } else {
        setContractBasic((ContractBasicInfo)value);
      }
      break;

    case START_MINUTE_TIMESTAMP_S:
      if (value == null) {
        unsetStartMinuteTimestampS();
      } else {
        setStartMinuteTimestampS((Long)value);
      }
      break;

    case END_MINUTE_TIMESTAMP_S:
      if (value == null) {
        unsetEndMinuteTimestampS();
      } else {
        setEndMinuteTimestampS((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTRACT_BASIC:
      return getContractBasic();

    case START_MINUTE_TIMESTAMP_S:
      return Long.valueOf(getStartMinuteTimestampS());

    case END_MINUTE_TIMESTAMP_S:
      return Long.valueOf(getEndMinuteTimestampS());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTRACT_BASIC:
      return isSetContractBasic();
    case START_MINUTE_TIMESTAMP_S:
      return isSetStartMinuteTimestampS();
    case END_MINUTE_TIMESTAMP_S:
      return isSetEndMinuteTimestampS();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryKLineMinuteOption)
      return this.equals((QueryKLineMinuteOption)that);
    return false;
  }

  public boolean equals(QueryKLineMinuteOption that) {
    if (that == null)
      return false;

    boolean this_present_contractBasic = true && this.isSetContractBasic();
    boolean that_present_contractBasic = true && that.isSetContractBasic();
    if (this_present_contractBasic || that_present_contractBasic) {
      if (!(this_present_contractBasic && that_present_contractBasic))
        return false;
      if (!this.contractBasic.equals(that.contractBasic))
        return false;
    }

    boolean this_present_startMinuteTimestampS = true && this.isSetStartMinuteTimestampS();
    boolean that_present_startMinuteTimestampS = true && that.isSetStartMinuteTimestampS();
    if (this_present_startMinuteTimestampS || that_present_startMinuteTimestampS) {
      if (!(this_present_startMinuteTimestampS && that_present_startMinuteTimestampS))
        return false;
      if (this.startMinuteTimestampS != that.startMinuteTimestampS)
        return false;
    }

    boolean this_present_endMinuteTimestampS = true && this.isSetEndMinuteTimestampS();
    boolean that_present_endMinuteTimestampS = true && that.isSetEndMinuteTimestampS();
    if (this_present_endMinuteTimestampS || that_present_endMinuteTimestampS) {
      if (!(this_present_endMinuteTimestampS && that_present_endMinuteTimestampS))
        return false;
      if (this.endMinuteTimestampS != that.endMinuteTimestampS)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QueryKLineMinuteOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContractBasic()).compareTo(other.isSetContractBasic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractBasic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractBasic, other.contractBasic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartMinuteTimestampS()).compareTo(other.isSetStartMinuteTimestampS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartMinuteTimestampS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startMinuteTimestampS, other.startMinuteTimestampS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndMinuteTimestampS()).compareTo(other.isSetEndMinuteTimestampS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndMinuteTimestampS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endMinuteTimestampS, other.endMinuteTimestampS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryKLineMinuteOption(");
    boolean first = true;

    sb.append("contractBasic:");
    if (this.contractBasic == null) {
      sb.append("null");
    } else {
      sb.append(this.contractBasic);
    }
    first = false;
    if (isSetStartMinuteTimestampS()) {
      if (!first) sb.append(", ");
      sb.append("startMinuteTimestampS:");
      sb.append(this.startMinuteTimestampS);
      first = false;
    }
    if (isSetEndMinuteTimestampS()) {
      if (!first) sb.append(", ");
      sb.append("endMinuteTimestampS:");
      sb.append(this.endMinuteTimestampS);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (contractBasic == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contractBasic' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (contractBasic != null) {
      contractBasic.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryKLineMinuteOptionStandardSchemeFactory implements SchemeFactory {
    public QueryKLineMinuteOptionStandardScheme getScheme() {
      return new QueryKLineMinuteOptionStandardScheme();
    }
  }

  private static class QueryKLineMinuteOptionStandardScheme extends StandardScheme<QueryKLineMinuteOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryKLineMinuteOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTRACT_BASIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contractBasic = new ContractBasicInfo();
              struct.contractBasic.read(iprot);
              struct.setContractBasicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_MINUTE_TIMESTAMP_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startMinuteTimestampS = iprot.readI64();
              struct.setStartMinuteTimestampSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_MINUTE_TIMESTAMP_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endMinuteTimestampS = iprot.readI64();
              struct.setEndMinuteTimestampSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryKLineMinuteOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.contractBasic != null) {
        oprot.writeFieldBegin(CONTRACT_BASIC_FIELD_DESC);
        struct.contractBasic.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStartMinuteTimestampS()) {
        oprot.writeFieldBegin(START_MINUTE_TIMESTAMP_S_FIELD_DESC);
        oprot.writeI64(struct.startMinuteTimestampS);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndMinuteTimestampS()) {
        oprot.writeFieldBegin(END_MINUTE_TIMESTAMP_S_FIELD_DESC);
        oprot.writeI64(struct.endMinuteTimestampS);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryKLineMinuteOptionTupleSchemeFactory implements SchemeFactory {
    public QueryKLineMinuteOptionTupleScheme getScheme() {
      return new QueryKLineMinuteOptionTupleScheme();
    }
  }

  private static class QueryKLineMinuteOptionTupleScheme extends TupleScheme<QueryKLineMinuteOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryKLineMinuteOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.contractBasic.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetStartMinuteTimestampS()) {
        optionals.set(0);
      }
      if (struct.isSetEndMinuteTimestampS()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetStartMinuteTimestampS()) {
        oprot.writeI64(struct.startMinuteTimestampS);
      }
      if (struct.isSetEndMinuteTimestampS()) {
        oprot.writeI64(struct.endMinuteTimestampS);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryKLineMinuteOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.contractBasic = new ContractBasicInfo();
      struct.contractBasic.read(iprot);
      struct.setContractBasicIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.startMinuteTimestampS = iprot.readI64();
        struct.setStartMinuteTimestampSIsSet(true);
      }
      if (incoming.get(1)) {
        struct.endMinuteTimestampS = iprot.readI64();
        struct.setEndMinuteTimestampSIsSet(true);
      }
    }
  }

}

