/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "../../../buildgen/quotation_common/thrift/quotation_item_types.h"

#include <algorithm>

namespace xueqiao { namespace quotation {

const char* QuotationItem::ascii_fingerprint = "B2373482E6B2469F55C9492DB79030FB";
const uint8_t QuotationItem::binary_fingerprint[16] = {0xB2,0x37,0x34,0x82,0xE6,0xB2,0x46,0x9F,0x55,0xC9,0x49,0x2D,0xB7,0x90,0x30,0xFB};

uint32_t QuotationItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->platform);
          this->__isset.platform = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contractSymbol);
          this->__isset.contractSymbol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->openPrice);
          this->__isset.openPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->highPrice);
          this->__isset.highPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lowPrice);
          this->__isset.lowPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->preClosePrice);
          this->__isset.preClosePrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->preSettlementPrice);
          this->__isset.preSettlementPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->preOpenInterest);
          this->__isset.preOpenInterest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->openInterest);
          this->__isset.openInterest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->volumn);
          this->__isset.volumn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->turnover);
          this->__isset.turnover = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updateTimestampMs);
          this->__isset.updateTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lastPrice);
          this->__isset.lastPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastQty);
          this->__isset.lastQty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->upperLimitPrice);
          this->__isset.upperLimitPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lowerLimitPrice);
          this->__isset.lowerLimitPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->averagePrice);
          this->__isset.averagePrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->bidPrice.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->bidPrice.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readDouble(this->bidPrice[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.bidPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->bidQty.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->bidQty.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readI64(this->bidQty[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.bidQty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->askPrice.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->askPrice.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readDouble(this->askPrice[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.askPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->askQty.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->askQty.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += iprot->readI64(this->askQty[_i19]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.askQty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->receivedTimestampMs);
          this->__isset.receivedTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 101:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->receivedHostName);
          this->__isset.receivedHostName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 102:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->receivedProcessId);
          this->__isset.receivedProcessId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 120:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->raceTimestampMs);
          this->__isset.raceTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 135:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledExchangeCode);
          this->__isset.sledExchangeCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 136:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->sledCommodityType);
          this->__isset.sledCommodityType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 137:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledCommodityCode);
          this->__isset.sledCommodityCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 138:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledContractCode);
          this->__isset.sledContractCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QuotationItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("QuotationItem");

  if (this->__isset.platform) {
    xfer += oprot->writeFieldBegin("platform", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->platform);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contractSymbol) {
    xfer += oprot->writeFieldBegin("contractSymbol", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->contractSymbol);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openPrice) {
    xfer += oprot->writeFieldBegin("openPrice", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->openPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.highPrice) {
    xfer += oprot->writeFieldBegin("highPrice", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->highPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lowPrice) {
    xfer += oprot->writeFieldBegin("lowPrice", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->lowPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.preClosePrice) {
    xfer += oprot->writeFieldBegin("preClosePrice", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->preClosePrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.preSettlementPrice) {
    xfer += oprot->writeFieldBegin("preSettlementPrice", ::apache::thrift::protocol::T_DOUBLE, 7);
    xfer += oprot->writeDouble(this->preSettlementPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.preOpenInterest) {
    xfer += oprot->writeFieldBegin("preOpenInterest", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->preOpenInterest);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openInterest) {
    xfer += oprot->writeFieldBegin("openInterest", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->openInterest);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.volumn) {
    xfer += oprot->writeFieldBegin("volumn", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->volumn);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.turnover) {
    xfer += oprot->writeFieldBegin("turnover", ::apache::thrift::protocol::T_DOUBLE, 11);
    xfer += oprot->writeDouble(this->turnover);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateTimestampMs) {
    xfer += oprot->writeFieldBegin("updateTimestampMs", ::apache::thrift::protocol::T_I64, 12);
    xfer += oprot->writeI64(this->updateTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastPrice) {
    xfer += oprot->writeFieldBegin("lastPrice", ::apache::thrift::protocol::T_DOUBLE, 13);
    xfer += oprot->writeDouble(this->lastPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastQty) {
    xfer += oprot->writeFieldBegin("lastQty", ::apache::thrift::protocol::T_I64, 14);
    xfer += oprot->writeI64(this->lastQty);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upperLimitPrice) {
    xfer += oprot->writeFieldBegin("upperLimitPrice", ::apache::thrift::protocol::T_DOUBLE, 15);
    xfer += oprot->writeDouble(this->upperLimitPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lowerLimitPrice) {
    xfer += oprot->writeFieldBegin("lowerLimitPrice", ::apache::thrift::protocol::T_DOUBLE, 16);
    xfer += oprot->writeDouble(this->lowerLimitPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.averagePrice) {
    xfer += oprot->writeFieldBegin("averagePrice", ::apache::thrift::protocol::T_DOUBLE, 17);
    xfer += oprot->writeDouble(this->averagePrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bidPrice) {
    xfer += oprot->writeFieldBegin("bidPrice", ::apache::thrift::protocol::T_LIST, 21);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->bidPrice.size()));
      std::vector<double> ::const_iterator _iter20;
      for (_iter20 = this->bidPrice.begin(); _iter20 != this->bidPrice.end(); ++_iter20)
      {
        xfer += oprot->writeDouble((*_iter20));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bidQty) {
    xfer += oprot->writeFieldBegin("bidQty", ::apache::thrift::protocol::T_LIST, 22);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->bidQty.size()));
      std::vector<int64_t> ::const_iterator _iter21;
      for (_iter21 = this->bidQty.begin(); _iter21 != this->bidQty.end(); ++_iter21)
      {
        xfer += oprot->writeI64((*_iter21));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.askPrice) {
    xfer += oprot->writeFieldBegin("askPrice", ::apache::thrift::protocol::T_LIST, 23);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->askPrice.size()));
      std::vector<double> ::const_iterator _iter22;
      for (_iter22 = this->askPrice.begin(); _iter22 != this->askPrice.end(); ++_iter22)
      {
        xfer += oprot->writeDouble((*_iter22));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.askQty) {
    xfer += oprot->writeFieldBegin("askQty", ::apache::thrift::protocol::T_LIST, 24);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->askQty.size()));
      std::vector<int64_t> ::const_iterator _iter23;
      for (_iter23 = this->askQty.begin(); _iter23 != this->askQty.end(); ++_iter23)
      {
        xfer += oprot->writeI64((*_iter23));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.receivedTimestampMs) {
    xfer += oprot->writeFieldBegin("receivedTimestampMs", ::apache::thrift::protocol::T_I64, 100);
    xfer += oprot->writeI64(this->receivedTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.receivedHostName) {
    xfer += oprot->writeFieldBegin("receivedHostName", ::apache::thrift::protocol::T_STRING, 101);
    xfer += oprot->writeString(this->receivedHostName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.receivedProcessId) {
    xfer += oprot->writeFieldBegin("receivedProcessId", ::apache::thrift::protocol::T_I16, 102);
    xfer += oprot->writeI16(this->receivedProcessId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.raceTimestampMs) {
    xfer += oprot->writeFieldBegin("raceTimestampMs", ::apache::thrift::protocol::T_I64, 120);
    xfer += oprot->writeI64(this->raceTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledExchangeCode) {
    xfer += oprot->writeFieldBegin("sledExchangeCode", ::apache::thrift::protocol::T_STRING, 135);
    xfer += oprot->writeString(this->sledExchangeCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityType) {
    xfer += oprot->writeFieldBegin("sledCommodityType", ::apache::thrift::protocol::T_I16, 136);
    xfer += oprot->writeI16(this->sledCommodityType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityCode) {
    xfer += oprot->writeFieldBegin("sledCommodityCode", ::apache::thrift::protocol::T_STRING, 137);
    xfer += oprot->writeString(this->sledCommodityCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledContractCode) {
    xfer += oprot->writeFieldBegin("sledContractCode", ::apache::thrift::protocol::T_STRING, 138);
    xfer += oprot->writeString(this->sledContractCode);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QuotationItem &a, QuotationItem &b) {
  using ::std::swap;
  swap(a.platform, b.platform);
  swap(a.contractSymbol, b.contractSymbol);
  swap(a.openPrice, b.openPrice);
  swap(a.highPrice, b.highPrice);
  swap(a.lowPrice, b.lowPrice);
  swap(a.preClosePrice, b.preClosePrice);
  swap(a.preSettlementPrice, b.preSettlementPrice);
  swap(a.preOpenInterest, b.preOpenInterest);
  swap(a.openInterest, b.openInterest);
  swap(a.volumn, b.volumn);
  swap(a.turnover, b.turnover);
  swap(a.updateTimestampMs, b.updateTimestampMs);
  swap(a.lastPrice, b.lastPrice);
  swap(a.lastQty, b.lastQty);
  swap(a.upperLimitPrice, b.upperLimitPrice);
  swap(a.lowerLimitPrice, b.lowerLimitPrice);
  swap(a.averagePrice, b.averagePrice);
  swap(a.bidPrice, b.bidPrice);
  swap(a.bidQty, b.bidQty);
  swap(a.askPrice, b.askPrice);
  swap(a.askQty, b.askQty);
  swap(a.receivedTimestampMs, b.receivedTimestampMs);
  swap(a.receivedHostName, b.receivedHostName);
  swap(a.receivedProcessId, b.receivedProcessId);
  swap(a.raceTimestampMs, b.raceTimestampMs);
  swap(a.sledExchangeCode, b.sledExchangeCode);
  swap(a.sledCommodityType, b.sledCommodityType);
  swap(a.sledCommodityCode, b.sledCommodityCode);
  swap(a.sledContractCode, b.sledContractCode);
  swap(a.__isset, b.__isset);
}

const char* KLineQuotationDetail::ascii_fingerprint = "0BB11F4FF86A93359E7D7EA6F02F6840";
const uint8_t KLineQuotationDetail::binary_fingerprint[16] = {0x0B,0xB1,0x1F,0x4F,0xF8,0x6A,0x93,0x35,0x9E,0x7D,0x7E,0xA6,0xF0,0x2F,0x68,0x40};

uint32_t KLineQuotationDetail::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kLineOpenPrice);
          this->__isset.kLineOpenPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kLineHighPrice);
          this->__isset.kLineHighPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kLineLowPrice);
          this->__isset.kLineLowPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kLineClosePrice);
          this->__isset.kLineClosePrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->kLineQty);
          this->__isset.kLineQty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kLineSettlementPrice);
          this->__isset.kLineSettlementPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->kLineOpenInterest);
          this->__isset.kLineOpenInterest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t KLineQuotationDetail::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("KLineQuotationDetail");

  if (this->__isset.kLineOpenPrice) {
    xfer += oprot->writeFieldBegin("kLineOpenPrice", ::apache::thrift::protocol::T_DOUBLE, 1);
    xfer += oprot->writeDouble(this->kLineOpenPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kLineHighPrice) {
    xfer += oprot->writeFieldBegin("kLineHighPrice", ::apache::thrift::protocol::T_DOUBLE, 2);
    xfer += oprot->writeDouble(this->kLineHighPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kLineLowPrice) {
    xfer += oprot->writeFieldBegin("kLineLowPrice", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->kLineLowPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kLineClosePrice) {
    xfer += oprot->writeFieldBegin("kLineClosePrice", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->kLineClosePrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kLineQty) {
    xfer += oprot->writeFieldBegin("kLineQty", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->kLineQty);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kLineSettlementPrice) {
    xfer += oprot->writeFieldBegin("kLineSettlementPrice", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->kLineSettlementPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kLineOpenInterest) {
    xfer += oprot->writeFieldBegin("kLineOpenInterest", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->kLineOpenInterest);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(KLineQuotationDetail &a, KLineQuotationDetail &b) {
  using ::std::swap;
  swap(a.kLineOpenPrice, b.kLineOpenPrice);
  swap(a.kLineHighPrice, b.kLineHighPrice);
  swap(a.kLineLowPrice, b.kLineLowPrice);
  swap(a.kLineClosePrice, b.kLineClosePrice);
  swap(a.kLineQty, b.kLineQty);
  swap(a.kLineSettlementPrice, b.kLineSettlementPrice);
  swap(a.kLineOpenInterest, b.kLineOpenInterest);
  swap(a.__isset, b.__isset);
}

const char* KLineQuotationMinuteItem::ascii_fingerprint = "944F7578ED97BB1D83F291B762346E56";
const uint8_t KLineQuotationMinuteItem::binary_fingerprint[16] = {0x94,0x4F,0x75,0x78,0xED,0x97,0xBB,0x1D,0x83,0xF2,0x91,0xB7,0x62,0x34,0x6E,0x56};

uint32_t KLineQuotationMinuteItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->platform);
          this->__isset.platform = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contractSymbol);
          this->__isset.contractSymbol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->kMinuteStartTimestampS);
          this->__isset.kMinuteStartTimestampS = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->kMinutePeriod);
          this->__isset.kMinutePeriod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->detail.read(iprot);
          this->__isset.detail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t KLineQuotationMinuteItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("KLineQuotationMinuteItem");

  if (this->__isset.platform) {
    xfer += oprot->writeFieldBegin("platform", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->platform);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contractSymbol) {
    xfer += oprot->writeFieldBegin("contractSymbol", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->contractSymbol);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kMinuteStartTimestampS) {
    xfer += oprot->writeFieldBegin("kMinuteStartTimestampS", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->kMinuteStartTimestampS);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kMinutePeriod) {
    xfer += oprot->writeFieldBegin("kMinutePeriod", ::apache::thrift::protocol::T_I16, 4);
    xfer += oprot->writeI16(this->kMinutePeriod);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.detail) {
    xfer += oprot->writeFieldBegin("detail", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->detail.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(KLineQuotationMinuteItem &a, KLineQuotationMinuteItem &b) {
  using ::std::swap;
  swap(a.platform, b.platform);
  swap(a.contractSymbol, b.contractSymbol);
  swap(a.kMinuteStartTimestampS, b.kMinuteStartTimestampS);
  swap(a.kMinutePeriod, b.kMinutePeriod);
  swap(a.detail, b.detail);
  swap(a.__isset, b.__isset);
}

}} // namespace
