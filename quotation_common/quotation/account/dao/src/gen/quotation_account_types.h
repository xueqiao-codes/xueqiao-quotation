/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef quotation_account_TYPES_H
#define quotation_account_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "comm_types.h"
#include "page_types.h"




struct QuotationTechPlatform {
  enum type {
    NONE = 0,
    CTP = 1,
    ESUNNY = 2
  };
};

extern const std::map<int, const char*> _QuotationTechPlatform_VALUES_TO_NAMES;

struct QuotationPlatformEnv {
  enum type {
    NONE = 0,
    REAL = 1,
    SIM = 2
  };
};

extern const std::map<int, const char*> _QuotationPlatformEnv_VALUES_TO_NAMES;

struct QuotationAccountState {
  enum type {
    ACCOUNT_DISABLED = 0,
    ACCOUNT_ENABLED = 1
  };
};

extern const std::map<int, const char*> _QuotationAccountState_VALUES_TO_NAMES;

struct QuotationAccountAccessState {
  enum type {
    ACCOUNT_NOT_ACCESS = 0,
    ACCOUNT_ACTIVE = 1,
    ACCOUNT_INVALID = 2
  };
};

extern const std::map<int, const char*> _QuotationAccountAccessState_VALUES_TO_NAMES;

struct SupportType {
  enum type {
    SET = 0,
    ALL = 1
  };
};

extern const std::map<int, const char*> _SupportType_VALUES_TO_NAMES;

struct QuotationAccountOrderBy {
  enum type {
    ACCOUNT_ID = 0,
    CREATE_TIMESTAMP = 1
  };
};

extern const std::map<int, const char*> _QuotationAccountOrderBy_VALUES_TO_NAMES;

typedef struct _ContractActiveRule__isset {
  _ContractActiveRule__isset() : sledCommodityId(false), activeMonthMap(false), createTimestamp(false), lastModityTimestamp(false) {}
  bool sledCommodityId;
  bool activeMonthMap;
  bool createTimestamp;
  bool lastModityTimestamp;
} _ContractActiveRule__isset;

class ContractActiveRule {
 public:

  static const char* ascii_fingerprint; // = "F9ABDD47113EC6C5C8979A836E3E653E";
  static const uint8_t binary_fingerprint[16]; // = {0xF9,0xAB,0xDD,0x47,0x11,0x3E,0xC6,0xC5,0xC8,0x97,0x9A,0x83,0x6E,0x3E,0x65,0x3E};

  ContractActiveRule() : sledCommodityId(0), createTimestamp(0), lastModityTimestamp(0) {
  }

  virtual ~ContractActiveRule() throw() {}

  int32_t sledCommodityId;
  std::map<int32_t, bool>  activeMonthMap;
  int64_t createTimestamp;
  int64_t lastModityTimestamp;

  _ContractActiveRule__isset __isset;

  void __set_sledCommodityId(const int32_t val) {
    sledCommodityId = val;
    __isset.sledCommodityId = true;
  }

  void __set_activeMonthMap(const std::map<int32_t, bool> & val) {
    activeMonthMap = val;
    __isset.activeMonthMap = true;
  }

  void __set_createTimestamp(const int64_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastModityTimestamp(const int64_t val) {
    lastModityTimestamp = val;
    __isset.lastModityTimestamp = true;
  }

  bool operator == (const ContractActiveRule & rhs) const
  {
    if (__isset.sledCommodityId != rhs.__isset.sledCommodityId)
      return false;
    else if (__isset.sledCommodityId && !(sledCommodityId == rhs.sledCommodityId))
      return false;
    if (__isset.activeMonthMap != rhs.__isset.activeMonthMap)
      return false;
    else if (__isset.activeMonthMap && !(activeMonthMap == rhs.activeMonthMap))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastModityTimestamp != rhs.__isset.lastModityTimestamp)
      return false;
    else if (__isset.lastModityTimestamp && !(lastModityTimestamp == rhs.lastModityTimestamp))
      return false;
    return true;
  }
  bool operator != (const ContractActiveRule &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractActiveRule & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ContractActiveRule &a, ContractActiveRule &b);

typedef struct _ContractRegisterRule__isset {
  _ContractRegisterRule__isset() : sledCommodityId(false), registerPriority(false), activeShowCount(false), inactiveShowCount(false), platformEnv(false), createTimestamp(false), lastModityTimestamp(false), orderIndex(false) {}
  bool sledCommodityId;
  bool registerPriority;
  bool activeShowCount;
  bool inactiveShowCount;
  bool platformEnv;
  bool createTimestamp;
  bool lastModityTimestamp;
  bool orderIndex;
} _ContractRegisterRule__isset;

class ContractRegisterRule {
 public:

  static const char* ascii_fingerprint; // = "B77C06788DC1780F1D7637240029A71D";
  static const uint8_t binary_fingerprint[16]; // = {0xB7,0x7C,0x06,0x78,0x8D,0xC1,0x78,0x0F,0x1D,0x76,0x37,0x24,0x00,0x29,0xA7,0x1D};

  ContractRegisterRule() : sledCommodityId(0), registerPriority(0), activeShowCount(0), inactiveShowCount(0), platformEnv((QuotationPlatformEnv::type)0), createTimestamp(0), lastModityTimestamp(0), orderIndex(0) {
  }

  virtual ~ContractRegisterRule() throw() {}

  int32_t sledCommodityId;
  int32_t registerPriority;
  int32_t activeShowCount;
  int32_t inactiveShowCount;
  QuotationPlatformEnv::type platformEnv;
  int64_t createTimestamp;
  int64_t lastModityTimestamp;
  int32_t orderIndex;

  _ContractRegisterRule__isset __isset;

  void __set_sledCommodityId(const int32_t val) {
    sledCommodityId = val;
    __isset.sledCommodityId = true;
  }

  void __set_registerPriority(const int32_t val) {
    registerPriority = val;
    __isset.registerPriority = true;
  }

  void __set_activeShowCount(const int32_t val) {
    activeShowCount = val;
    __isset.activeShowCount = true;
  }

  void __set_inactiveShowCount(const int32_t val) {
    inactiveShowCount = val;
    __isset.inactiveShowCount = true;
  }

  void __set_platformEnv(const QuotationPlatformEnv::type val) {
    platformEnv = val;
    __isset.platformEnv = true;
  }

  void __set_createTimestamp(const int64_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastModityTimestamp(const int64_t val) {
    lastModityTimestamp = val;
    __isset.lastModityTimestamp = true;
  }

  void __set_orderIndex(const int32_t val) {
    orderIndex = val;
    __isset.orderIndex = true;
  }

  bool operator == (const ContractRegisterRule & rhs) const
  {
    if (__isset.sledCommodityId != rhs.__isset.sledCommodityId)
      return false;
    else if (__isset.sledCommodityId && !(sledCommodityId == rhs.sledCommodityId))
      return false;
    if (__isset.registerPriority != rhs.__isset.registerPriority)
      return false;
    else if (__isset.registerPriority && !(registerPriority == rhs.registerPriority))
      return false;
    if (__isset.activeShowCount != rhs.__isset.activeShowCount)
      return false;
    else if (__isset.activeShowCount && !(activeShowCount == rhs.activeShowCount))
      return false;
    if (__isset.inactiveShowCount != rhs.__isset.inactiveShowCount)
      return false;
    else if (__isset.inactiveShowCount && !(inactiveShowCount == rhs.inactiveShowCount))
      return false;
    if (__isset.platformEnv != rhs.__isset.platformEnv)
      return false;
    else if (__isset.platformEnv && !(platformEnv == rhs.platformEnv))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastModityTimestamp != rhs.__isset.lastModityTimestamp)
      return false;
    else if (__isset.lastModityTimestamp && !(lastModityTimestamp == rhs.lastModityTimestamp))
      return false;
    if (__isset.orderIndex != rhs.__isset.orderIndex)
      return false;
    else if (__isset.orderIndex && !(orderIndex == rhs.orderIndex))
      return false;
    return true;
  }
  bool operator != (const ContractRegisterRule &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractRegisterRule & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ContractRegisterRule &a, ContractRegisterRule &b);

typedef struct _CommodityRegisterOrder__isset {
  _CommodityRegisterOrder__isset() : sledCommodityId(false), platformEnv(false), orderIndex(false) {}
  bool sledCommodityId;
  bool platformEnv;
  bool orderIndex;
} _CommodityRegisterOrder__isset;

class CommodityRegisterOrder {
 public:

  static const char* ascii_fingerprint; // = "95563430298FDCCE431FC73A024A159D";
  static const uint8_t binary_fingerprint[16]; // = {0x95,0x56,0x34,0x30,0x29,0x8F,0xDC,0xCE,0x43,0x1F,0xC7,0x3A,0x02,0x4A,0x15,0x9D};

  CommodityRegisterOrder() : sledCommodityId(0), platformEnv((QuotationPlatformEnv::type)0), orderIndex(0) {
  }

  virtual ~CommodityRegisterOrder() throw() {}

  int32_t sledCommodityId;
  QuotationPlatformEnv::type platformEnv;
  int32_t orderIndex;

  _CommodityRegisterOrder__isset __isset;

  void __set_sledCommodityId(const int32_t val) {
    sledCommodityId = val;
    __isset.sledCommodityId = true;
  }

  void __set_platformEnv(const QuotationPlatformEnv::type val) {
    platformEnv = val;
    __isset.platformEnv = true;
  }

  void __set_orderIndex(const int32_t val) {
    orderIndex = val;
    __isset.orderIndex = true;
  }

  bool operator == (const CommodityRegisterOrder & rhs) const
  {
    if (__isset.sledCommodityId != rhs.__isset.sledCommodityId)
      return false;
    else if (__isset.sledCommodityId && !(sledCommodityId == rhs.sledCommodityId))
      return false;
    if (__isset.platformEnv != rhs.__isset.platformEnv)
      return false;
    else if (__isset.platformEnv && !(platformEnv == rhs.platformEnv))
      return false;
    if (__isset.orderIndex != rhs.__isset.orderIndex)
      return false;
    else if (__isset.orderIndex && !(orderIndex == rhs.orderIndex))
      return false;
    return true;
  }
  bool operator != (const CommodityRegisterOrder &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommodityRegisterOrder & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CommodityRegisterOrder &a, CommodityRegisterOrder &b);

typedef struct _QuotationAccount__isset {
  _QuotationAccount__isset() : accountId(false), accountName(false), accountpwd(false), nickName(false), platform(false), brokerId(false), brokerAccessId(false), accountProperties(false), accountState(false), accessState(false), invalidReason(false), invalidErrorCode(false), apiRetCode(false), maxRegisterCount(false), createTimestamp(false), lastModifyTimestamp(false), platformEnv(false) {}
  bool accountId;
  bool accountName;
  bool accountpwd;
  bool nickName;
  bool platform;
  bool brokerId;
  bool brokerAccessId;
  bool accountProperties;
  bool accountState;
  bool accessState;
  bool invalidReason;
  bool invalidErrorCode;
  bool apiRetCode;
  bool maxRegisterCount;
  bool createTimestamp;
  bool lastModifyTimestamp;
  bool platformEnv;
} _QuotationAccount__isset;

class QuotationAccount {
 public:

  static const char* ascii_fingerprint; // = "4AEE290289C3B4661303609E5988FFFC";
  static const uint8_t binary_fingerprint[16]; // = {0x4A,0xEE,0x29,0x02,0x89,0xC3,0xB4,0x66,0x13,0x03,0x60,0x9E,0x59,0x88,0xFF,0xFC};

  QuotationAccount() : accountId(0), accountName(), accountpwd(), nickName(), platform((QuotationTechPlatform::type)0), brokerId(0), brokerAccessId(0), accountState((QuotationAccountState::type)0), accessState((QuotationAccountAccessState::type)0), invalidReason(), invalidErrorCode(0), apiRetCode(0), maxRegisterCount(0), createTimestamp(0), lastModifyTimestamp(0), platformEnv((QuotationPlatformEnv::type)0) {
  }

  virtual ~QuotationAccount() throw() {}

  int64_t accountId;
  std::string accountName;
  std::string accountpwd;
  std::string nickName;
  QuotationTechPlatform::type platform;
  int32_t brokerId;
  int32_t brokerAccessId;
  std::map<std::string, std::string>  accountProperties;
  QuotationAccountState::type accountState;
  QuotationAccountAccessState::type accessState;
  std::string invalidReason;
  int32_t invalidErrorCode;
  int32_t apiRetCode;
  int32_t maxRegisterCount;
  int64_t createTimestamp;
  int64_t lastModifyTimestamp;
  QuotationPlatformEnv::type platformEnv;

  _QuotationAccount__isset __isset;

  void __set_accountId(const int64_t val) {
    accountId = val;
    __isset.accountId = true;
  }

  void __set_accountName(const std::string& val) {
    accountName = val;
    __isset.accountName = true;
  }

  void __set_accountpwd(const std::string& val) {
    accountpwd = val;
    __isset.accountpwd = true;
  }

  void __set_nickName(const std::string& val) {
    nickName = val;
    __isset.nickName = true;
  }

  void __set_platform(const QuotationTechPlatform::type val) {
    platform = val;
    __isset.platform = true;
  }

  void __set_brokerId(const int32_t val) {
    brokerId = val;
    __isset.brokerId = true;
  }

  void __set_brokerAccessId(const int32_t val) {
    brokerAccessId = val;
    __isset.brokerAccessId = true;
  }

  void __set_accountProperties(const std::map<std::string, std::string> & val) {
    accountProperties = val;
    __isset.accountProperties = true;
  }

  void __set_accountState(const QuotationAccountState::type val) {
    accountState = val;
    __isset.accountState = true;
  }

  void __set_accessState(const QuotationAccountAccessState::type val) {
    accessState = val;
    __isset.accessState = true;
  }

  void __set_invalidReason(const std::string& val) {
    invalidReason = val;
    __isset.invalidReason = true;
  }

  void __set_invalidErrorCode(const int32_t val) {
    invalidErrorCode = val;
    __isset.invalidErrorCode = true;
  }

  void __set_apiRetCode(const int32_t val) {
    apiRetCode = val;
    __isset.apiRetCode = true;
  }

  void __set_maxRegisterCount(const int32_t val) {
    maxRegisterCount = val;
    __isset.maxRegisterCount = true;
  }

  void __set_createTimestamp(const int64_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastModifyTimestamp(const int64_t val) {
    lastModifyTimestamp = val;
    __isset.lastModifyTimestamp = true;
  }

  void __set_platformEnv(const QuotationPlatformEnv::type val) {
    platformEnv = val;
    __isset.platformEnv = true;
  }

  bool operator == (const QuotationAccount & rhs) const
  {
    if (__isset.accountId != rhs.__isset.accountId)
      return false;
    else if (__isset.accountId && !(accountId == rhs.accountId))
      return false;
    if (__isset.accountName != rhs.__isset.accountName)
      return false;
    else if (__isset.accountName && !(accountName == rhs.accountName))
      return false;
    if (__isset.accountpwd != rhs.__isset.accountpwd)
      return false;
    else if (__isset.accountpwd && !(accountpwd == rhs.accountpwd))
      return false;
    if (__isset.nickName != rhs.__isset.nickName)
      return false;
    else if (__isset.nickName && !(nickName == rhs.nickName))
      return false;
    if (__isset.platform != rhs.__isset.platform)
      return false;
    else if (__isset.platform && !(platform == rhs.platform))
      return false;
    if (__isset.brokerId != rhs.__isset.brokerId)
      return false;
    else if (__isset.brokerId && !(brokerId == rhs.brokerId))
      return false;
    if (__isset.brokerAccessId != rhs.__isset.brokerAccessId)
      return false;
    else if (__isset.brokerAccessId && !(brokerAccessId == rhs.brokerAccessId))
      return false;
    if (__isset.accountProperties != rhs.__isset.accountProperties)
      return false;
    else if (__isset.accountProperties && !(accountProperties == rhs.accountProperties))
      return false;
    if (__isset.accountState != rhs.__isset.accountState)
      return false;
    else if (__isset.accountState && !(accountState == rhs.accountState))
      return false;
    if (__isset.accessState != rhs.__isset.accessState)
      return false;
    else if (__isset.accessState && !(accessState == rhs.accessState))
      return false;
    if (__isset.invalidReason != rhs.__isset.invalidReason)
      return false;
    else if (__isset.invalidReason && !(invalidReason == rhs.invalidReason))
      return false;
    if (__isset.invalidErrorCode != rhs.__isset.invalidErrorCode)
      return false;
    else if (__isset.invalidErrorCode && !(invalidErrorCode == rhs.invalidErrorCode))
      return false;
    if (__isset.apiRetCode != rhs.__isset.apiRetCode)
      return false;
    else if (__isset.apiRetCode && !(apiRetCode == rhs.apiRetCode))
      return false;
    if (__isset.maxRegisterCount != rhs.__isset.maxRegisterCount)
      return false;
    else if (__isset.maxRegisterCount && !(maxRegisterCount == rhs.maxRegisterCount))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastModifyTimestamp != rhs.__isset.lastModifyTimestamp)
      return false;
    else if (__isset.lastModifyTimestamp && !(lastModifyTimestamp == rhs.lastModifyTimestamp))
      return false;
    if (__isset.platformEnv != rhs.__isset.platformEnv)
      return false;
    else if (__isset.platformEnv && !(platformEnv == rhs.platformEnv))
      return false;
    return true;
  }
  bool operator != (const QuotationAccount &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationAccount & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QuotationAccount &a, QuotationAccount &b);

typedef struct _MicSupportCommodity__isset {
  _MicSupportCommodity__isset() : supportType(false), supportCommodityIds(false) {}
  bool supportType;
  bool supportCommodityIds;
} _MicSupportCommodity__isset;

class MicSupportCommodity {
 public:

  static const char* ascii_fingerprint; // = "E185935EF111C75062AE5EC509759A8E";
  static const uint8_t binary_fingerprint[16]; // = {0xE1,0x85,0x93,0x5E,0xF1,0x11,0xC7,0x50,0x62,0xAE,0x5E,0xC5,0x09,0x75,0x9A,0x8E};

  MicSupportCommodity() : supportType((SupportType::type)0) {
  }

  virtual ~MicSupportCommodity() throw() {}

  SupportType::type supportType;
  std::set<int32_t>  supportCommodityIds;

  _MicSupportCommodity__isset __isset;

  void __set_supportType(const SupportType::type val) {
    supportType = val;
    __isset.supportType = true;
  }

  void __set_supportCommodityIds(const std::set<int32_t> & val) {
    supportCommodityIds = val;
    __isset.supportCommodityIds = true;
  }

  bool operator == (const MicSupportCommodity & rhs) const
  {
    if (__isset.supportType != rhs.__isset.supportType)
      return false;
    else if (__isset.supportType && !(supportType == rhs.supportType))
      return false;
    if (__isset.supportCommodityIds != rhs.__isset.supportCommodityIds)
      return false;
    else if (__isset.supportCommodityIds && !(supportCommodityIds == rhs.supportCommodityIds))
      return false;
    return true;
  }
  bool operator != (const MicSupportCommodity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MicSupportCommodity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MicSupportCommodity &a, MicSupportCommodity &b);

typedef struct _QuotationAccountSupport__isset {
  _QuotationAccountSupport__isset() : accountId(false), micSupport(false) {}
  bool accountId;
  bool micSupport;
} _QuotationAccountSupport__isset;

class QuotationAccountSupport {
 public:

  static const char* ascii_fingerprint; // = "2EB0F666D9064C192875B5056E5351A4";
  static const uint8_t binary_fingerprint[16]; // = {0x2E,0xB0,0xF6,0x66,0xD9,0x06,0x4C,0x19,0x28,0x75,0xB5,0x05,0x6E,0x53,0x51,0xA4};

  QuotationAccountSupport() : accountId(0) {
  }

  virtual ~QuotationAccountSupport() throw() {}

  int64_t accountId;
  std::map<std::string, MicSupportCommodity>  micSupport;

  _QuotationAccountSupport__isset __isset;

  void __set_accountId(const int64_t val) {
    accountId = val;
    __isset.accountId = true;
  }

  void __set_micSupport(const std::map<std::string, MicSupportCommodity> & val) {
    micSupport = val;
    __isset.micSupport = true;
  }

  bool operator == (const QuotationAccountSupport & rhs) const
  {
    if (__isset.accountId != rhs.__isset.accountId)
      return false;
    else if (__isset.accountId && !(accountId == rhs.accountId))
      return false;
    if (__isset.micSupport != rhs.__isset.micSupport)
      return false;
    else if (__isset.micSupport && !(micSupport == rhs.micSupport))
      return false;
    return true;
  }
  bool operator != (const QuotationAccountSupport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationAccountSupport & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QuotationAccountSupport &a, QuotationAccountSupport &b);

typedef struct _ReqQuotationAccountSupportOption__isset {
  _ReqQuotationAccountSupportOption__isset() : accountIds(false) {}
  bool accountIds;
} _ReqQuotationAccountSupportOption__isset;

class ReqQuotationAccountSupportOption {
 public:

  static const char* ascii_fingerprint; // = "FF23ED08C38253C1C2A7B9DFAE86EBD8";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0x23,0xED,0x08,0xC3,0x82,0x53,0xC1,0xC2,0xA7,0xB9,0xDF,0xAE,0x86,0xEB,0xD8};

  ReqQuotationAccountSupportOption() {
  }

  virtual ~ReqQuotationAccountSupportOption() throw() {}

  std::set<int64_t>  accountIds;

  _ReqQuotationAccountSupportOption__isset __isset;

  void __set_accountIds(const std::set<int64_t> & val) {
    accountIds = val;
    __isset.accountIds = true;
  }

  bool operator == (const ReqQuotationAccountSupportOption & rhs) const
  {
    if (__isset.accountIds != rhs.__isset.accountIds)
      return false;
    else if (__isset.accountIds && !(accountIds == rhs.accountIds))
      return false;
    return true;
  }
  bool operator != (const ReqQuotationAccountSupportOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqQuotationAccountSupportOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqQuotationAccountSupportOption &a, ReqQuotationAccountSupportOption &b);

typedef struct _QuotationAccountSupportPage__isset {
  _QuotationAccountSupportPage__isset() : total(false), page(false) {}
  bool total;
  bool page;
} _QuotationAccountSupportPage__isset;

class QuotationAccountSupportPage {
 public:

  static const char* ascii_fingerprint; // = "EEE6495FE96ECC4A976F643BCA21EFD3";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xE6,0x49,0x5F,0xE9,0x6E,0xCC,0x4A,0x97,0x6F,0x64,0x3B,0xCA,0x21,0xEF,0xD3};

  QuotationAccountSupportPage() : total(0) {
  }

  virtual ~QuotationAccountSupportPage() throw() {}

  int32_t total;
  std::vector<QuotationAccountSupport>  page;

  _QuotationAccountSupportPage__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
    __isset.total = true;
  }

  void __set_page(const std::vector<QuotationAccountSupport> & val) {
    page = val;
    __isset.page = true;
  }

  bool operator == (const QuotationAccountSupportPage & rhs) const
  {
    if (__isset.total != rhs.__isset.total)
      return false;
    else if (__isset.total && !(total == rhs.total))
      return false;
    if (__isset.page != rhs.__isset.page)
      return false;
    else if (__isset.page && !(page == rhs.page))
      return false;
    return true;
  }
  bool operator != (const QuotationAccountSupportPage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationAccountSupportPage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QuotationAccountSupportPage &a, QuotationAccountSupportPage &b);

typedef struct _AccountCommodityRegisterAbility__isset {
  _AccountCommodityRegisterAbility__isset() : registerAbilityId(false), accountId(false), sledExchangeId(false), exchangeMic(false), supportType(false), sledCommodityId(false), createTimestamp(false), lastModifyTimestamp(false) {}
  bool registerAbilityId;
  bool accountId;
  bool sledExchangeId;
  bool exchangeMic;
  bool supportType;
  bool sledCommodityId;
  bool createTimestamp;
  bool lastModifyTimestamp;
} _AccountCommodityRegisterAbility__isset;

class AccountCommodityRegisterAbility {
 public:

  static const char* ascii_fingerprint; // = "682071CAC217C3A03351891C9195CEC7";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x20,0x71,0xCA,0xC2,0x17,0xC3,0xA0,0x33,0x51,0x89,0x1C,0x91,0x95,0xCE,0xC7};

  AccountCommodityRegisterAbility() : registerAbilityId(0), accountId(0), sledExchangeId(0), exchangeMic(), supportType((SupportType::type)0), sledCommodityId(0), createTimestamp(0), lastModifyTimestamp(0) {
  }

  virtual ~AccountCommodityRegisterAbility() throw() {}

  int64_t registerAbilityId;
  int64_t accountId;
  int32_t sledExchangeId;
  std::string exchangeMic;
  SupportType::type supportType;
  int32_t sledCommodityId;
  int64_t createTimestamp;
  int64_t lastModifyTimestamp;

  _AccountCommodityRegisterAbility__isset __isset;

  void __set_registerAbilityId(const int64_t val) {
    registerAbilityId = val;
    __isset.registerAbilityId = true;
  }

  void __set_accountId(const int64_t val) {
    accountId = val;
    __isset.accountId = true;
  }

  void __set_sledExchangeId(const int32_t val) {
    sledExchangeId = val;
    __isset.sledExchangeId = true;
  }

  void __set_exchangeMic(const std::string& val) {
    exchangeMic = val;
    __isset.exchangeMic = true;
  }

  void __set_supportType(const SupportType::type val) {
    supportType = val;
    __isset.supportType = true;
  }

  void __set_sledCommodityId(const int32_t val) {
    sledCommodityId = val;
    __isset.sledCommodityId = true;
  }

  void __set_createTimestamp(const int64_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastModifyTimestamp(const int64_t val) {
    lastModifyTimestamp = val;
    __isset.lastModifyTimestamp = true;
  }

  bool operator == (const AccountCommodityRegisterAbility & rhs) const
  {
    if (__isset.registerAbilityId != rhs.__isset.registerAbilityId)
      return false;
    else if (__isset.registerAbilityId && !(registerAbilityId == rhs.registerAbilityId))
      return false;
    if (__isset.accountId != rhs.__isset.accountId)
      return false;
    else if (__isset.accountId && !(accountId == rhs.accountId))
      return false;
    if (__isset.sledExchangeId != rhs.__isset.sledExchangeId)
      return false;
    else if (__isset.sledExchangeId && !(sledExchangeId == rhs.sledExchangeId))
      return false;
    if (__isset.exchangeMic != rhs.__isset.exchangeMic)
      return false;
    else if (__isset.exchangeMic && !(exchangeMic == rhs.exchangeMic))
      return false;
    if (__isset.supportType != rhs.__isset.supportType)
      return false;
    else if (__isset.supportType && !(supportType == rhs.supportType))
      return false;
    if (__isset.sledCommodityId != rhs.__isset.sledCommodityId)
      return false;
    else if (__isset.sledCommodityId && !(sledCommodityId == rhs.sledCommodityId))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastModifyTimestamp != rhs.__isset.lastModifyTimestamp)
      return false;
    else if (__isset.lastModifyTimestamp && !(lastModifyTimestamp == rhs.lastModifyTimestamp))
      return false;
    return true;
  }
  bool operator != (const AccountCommodityRegisterAbility &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountCommodityRegisterAbility & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AccountCommodityRegisterAbility &a, AccountCommodityRegisterAbility &b);

typedef struct _AccountCommodityRegisterAbilityPage__isset {
  _AccountCommodityRegisterAbilityPage__isset() : total(false), page(false) {}
  bool total;
  bool page;
} _AccountCommodityRegisterAbilityPage__isset;

class AccountCommodityRegisterAbilityPage {
 public:

  static const char* ascii_fingerprint; // = "991FF82DB820DF5442A17666E44B129A";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x1F,0xF8,0x2D,0xB8,0x20,0xDF,0x54,0x42,0xA1,0x76,0x66,0xE4,0x4B,0x12,0x9A};

  AccountCommodityRegisterAbilityPage() : total(0) {
  }

  virtual ~AccountCommodityRegisterAbilityPage() throw() {}

  int32_t total;
  std::vector<AccountCommodityRegisterAbility>  page;

  _AccountCommodityRegisterAbilityPage__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
    __isset.total = true;
  }

  void __set_page(const std::vector<AccountCommodityRegisterAbility> & val) {
    page = val;
    __isset.page = true;
  }

  bool operator == (const AccountCommodityRegisterAbilityPage & rhs) const
  {
    if (__isset.total != rhs.__isset.total)
      return false;
    else if (__isset.total && !(total == rhs.total))
      return false;
    if (__isset.page != rhs.__isset.page)
      return false;
    else if (__isset.page && !(page == rhs.page))
      return false;
    return true;
  }
  bool operator != (const AccountCommodityRegisterAbilityPage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountCommodityRegisterAbilityPage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AccountCommodityRegisterAbilityPage &a, AccountCommodityRegisterAbilityPage &b);

typedef struct _ReqAccountCommodityRegisterAbilityOption__isset {
  _ReqAccountCommodityRegisterAbilityOption__isset() : registerAbilityId(false), accountId(false), sledCommodityIds(false), sledExchangeIds(false), supportType(false), exchangeMics(false) {}
  bool registerAbilityId;
  bool accountId;
  bool sledCommodityIds;
  bool sledExchangeIds;
  bool supportType;
  bool exchangeMics;
} _ReqAccountCommodityRegisterAbilityOption__isset;

class ReqAccountCommodityRegisterAbilityOption {
 public:

  static const char* ascii_fingerprint; // = "FAF7A330CA050ED1E40CD2DE8EB9000A";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0xF7,0xA3,0x30,0xCA,0x05,0x0E,0xD1,0xE4,0x0C,0xD2,0xDE,0x8E,0xB9,0x00,0x0A};

  ReqAccountCommodityRegisterAbilityOption() : registerAbilityId(0), accountId(0), supportType((SupportType::type)0) {
  }

  virtual ~ReqAccountCommodityRegisterAbilityOption() throw() {}

  int64_t registerAbilityId;
  int64_t accountId;
  std::set<int32_t>  sledCommodityIds;
  std::set<int32_t>  sledExchangeIds;
  SupportType::type supportType;
  std::set<std::string>  exchangeMics;

  _ReqAccountCommodityRegisterAbilityOption__isset __isset;

  void __set_registerAbilityId(const int64_t val) {
    registerAbilityId = val;
    __isset.registerAbilityId = true;
  }

  void __set_accountId(const int64_t val) {
    accountId = val;
    __isset.accountId = true;
  }

  void __set_sledCommodityIds(const std::set<int32_t> & val) {
    sledCommodityIds = val;
    __isset.sledCommodityIds = true;
  }

  void __set_sledExchangeIds(const std::set<int32_t> & val) {
    sledExchangeIds = val;
    __isset.sledExchangeIds = true;
  }

  void __set_supportType(const SupportType::type val) {
    supportType = val;
    __isset.supportType = true;
  }

  void __set_exchangeMics(const std::set<std::string> & val) {
    exchangeMics = val;
    __isset.exchangeMics = true;
  }

  bool operator == (const ReqAccountCommodityRegisterAbilityOption & rhs) const
  {
    if (__isset.registerAbilityId != rhs.__isset.registerAbilityId)
      return false;
    else if (__isset.registerAbilityId && !(registerAbilityId == rhs.registerAbilityId))
      return false;
    if (__isset.accountId != rhs.__isset.accountId)
      return false;
    else if (__isset.accountId && !(accountId == rhs.accountId))
      return false;
    if (__isset.sledCommodityIds != rhs.__isset.sledCommodityIds)
      return false;
    else if (__isset.sledCommodityIds && !(sledCommodityIds == rhs.sledCommodityIds))
      return false;
    if (__isset.sledExchangeIds != rhs.__isset.sledExchangeIds)
      return false;
    else if (__isset.sledExchangeIds && !(sledExchangeIds == rhs.sledExchangeIds))
      return false;
    if (__isset.supportType != rhs.__isset.supportType)
      return false;
    else if (__isset.supportType && !(supportType == rhs.supportType))
      return false;
    if (__isset.exchangeMics != rhs.__isset.exchangeMics)
      return false;
    else if (__isset.exchangeMics && !(exchangeMics == rhs.exchangeMics))
      return false;
    return true;
  }
  bool operator != (const ReqAccountCommodityRegisterAbilityOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqAccountCommodityRegisterAbilityOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqAccountCommodityRegisterAbilityOption &a, ReqAccountCommodityRegisterAbilityOption &b);

typedef struct _QuotationAccountPage__isset {
  _QuotationAccountPage__isset() : total(false), page(false) {}
  bool total;
  bool page;
} _QuotationAccountPage__isset;

class QuotationAccountPage {
 public:

  static const char* ascii_fingerprint; // = "2DC51204CA1796654C4FE95071925837";
  static const uint8_t binary_fingerprint[16]; // = {0x2D,0xC5,0x12,0x04,0xCA,0x17,0x96,0x65,0x4C,0x4F,0xE9,0x50,0x71,0x92,0x58,0x37};

  QuotationAccountPage() : total(0) {
  }

  virtual ~QuotationAccountPage() throw() {}

  int32_t total;
  std::vector<QuotationAccount>  page;

  _QuotationAccountPage__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
    __isset.total = true;
  }

  void __set_page(const std::vector<QuotationAccount> & val) {
    page = val;
    __isset.page = true;
  }

  bool operator == (const QuotationAccountPage & rhs) const
  {
    if (__isset.total != rhs.__isset.total)
      return false;
    else if (__isset.total && !(total == rhs.total))
      return false;
    if (__isset.page != rhs.__isset.page)
      return false;
    else if (__isset.page && !(page == rhs.page))
      return false;
    return true;
  }
  bool operator != (const QuotationAccountPage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationAccountPage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QuotationAccountPage &a, QuotationAccountPage &b);

typedef struct _ContractActiveRulePage__isset {
  _ContractActiveRulePage__isset() : total(false), page(false) {}
  bool total;
  bool page;
} _ContractActiveRulePage__isset;

class ContractActiveRulePage {
 public:

  static const char* ascii_fingerprint; // = "A99F0E6CB95B2926B796492948D7F6BF";
  static const uint8_t binary_fingerprint[16]; // = {0xA9,0x9F,0x0E,0x6C,0xB9,0x5B,0x29,0x26,0xB7,0x96,0x49,0x29,0x48,0xD7,0xF6,0xBF};

  ContractActiveRulePage() : total(0) {
  }

  virtual ~ContractActiveRulePage() throw() {}

  int32_t total;
  std::vector<ContractActiveRule>  page;

  _ContractActiveRulePage__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
    __isset.total = true;
  }

  void __set_page(const std::vector<ContractActiveRule> & val) {
    page = val;
    __isset.page = true;
  }

  bool operator == (const ContractActiveRulePage & rhs) const
  {
    if (__isset.total != rhs.__isset.total)
      return false;
    else if (__isset.total && !(total == rhs.total))
      return false;
    if (__isset.page != rhs.__isset.page)
      return false;
    else if (__isset.page && !(page == rhs.page))
      return false;
    return true;
  }
  bool operator != (const ContractActiveRulePage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractActiveRulePage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ContractActiveRulePage &a, ContractActiveRulePage &b);

typedef struct _ContractRegisterRulePage__isset {
  _ContractRegisterRulePage__isset() : total(false), page(false) {}
  bool total;
  bool page;
} _ContractRegisterRulePage__isset;

class ContractRegisterRulePage {
 public:

  static const char* ascii_fingerprint; // = "E85F686AA9398009E26A10442CC8CC79";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x5F,0x68,0x6A,0xA9,0x39,0x80,0x09,0xE2,0x6A,0x10,0x44,0x2C,0xC8,0xCC,0x79};

  ContractRegisterRulePage() : total(0) {
  }

  virtual ~ContractRegisterRulePage() throw() {}

  int32_t total;
  std::vector<ContractRegisterRule>  page;

  _ContractRegisterRulePage__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
    __isset.total = true;
  }

  void __set_page(const std::vector<ContractRegisterRule> & val) {
    page = val;
    __isset.page = true;
  }

  bool operator == (const ContractRegisterRulePage & rhs) const
  {
    if (__isset.total != rhs.__isset.total)
      return false;
    else if (__isset.total && !(total == rhs.total))
      return false;
    if (__isset.page != rhs.__isset.page)
      return false;
    else if (__isset.page && !(page == rhs.page))
      return false;
    return true;
  }
  bool operator != (const ContractRegisterRulePage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractRegisterRulePage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ContractRegisterRulePage &a, ContractRegisterRulePage &b);

typedef struct _ReqContractActiveRuleOption__isset {
  _ReqContractActiveRuleOption__isset() : commodityIds(false) {}
  bool commodityIds;
} _ReqContractActiveRuleOption__isset;

class ReqContractActiveRuleOption {
 public:

  static const char* ascii_fingerprint; // = "96F0FADC707FB83F158E6B9228D6FC5E";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0xF0,0xFA,0xDC,0x70,0x7F,0xB8,0x3F,0x15,0x8E,0x6B,0x92,0x28,0xD6,0xFC,0x5E};

  ReqContractActiveRuleOption() {
  }

  virtual ~ReqContractActiveRuleOption() throw() {}

  std::set<int32_t>  commodityIds;

  _ReqContractActiveRuleOption__isset __isset;

  void __set_commodityIds(const std::set<int32_t> & val) {
    commodityIds = val;
    __isset.commodityIds = true;
  }

  bool operator == (const ReqContractActiveRuleOption & rhs) const
  {
    if (__isset.commodityIds != rhs.__isset.commodityIds)
      return false;
    else if (__isset.commodityIds && !(commodityIds == rhs.commodityIds))
      return false;
    return true;
  }
  bool operator != (const ReqContractActiveRuleOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqContractActiveRuleOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqContractActiveRuleOption &a, ReqContractActiveRuleOption &b);

typedef struct _ReqContractRegisterRuleOption__isset {
  _ReqContractRegisterRuleOption__isset() : commodityIds(false), platformEnv(false) {}
  bool commodityIds;
  bool platformEnv;
} _ReqContractRegisterRuleOption__isset;

class ReqContractRegisterRuleOption {
 public:

  static const char* ascii_fingerprint; // = "C653CC17D12232F67733876F567ABC34";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0x53,0xCC,0x17,0xD1,0x22,0x32,0xF6,0x77,0x33,0x87,0x6F,0x56,0x7A,0xBC,0x34};

  ReqContractRegisterRuleOption() : platformEnv((QuotationPlatformEnv::type)0) {
  }

  virtual ~ReqContractRegisterRuleOption() throw() {}

  std::set<int32_t>  commodityIds;
  QuotationPlatformEnv::type platformEnv;

  _ReqContractRegisterRuleOption__isset __isset;

  void __set_commodityIds(const std::set<int32_t> & val) {
    commodityIds = val;
    __isset.commodityIds = true;
  }

  void __set_platformEnv(const QuotationPlatformEnv::type val) {
    platformEnv = val;
    __isset.platformEnv = true;
  }

  bool operator == (const ReqContractRegisterRuleOption & rhs) const
  {
    if (__isset.commodityIds != rhs.__isset.commodityIds)
      return false;
    else if (__isset.commodityIds && !(commodityIds == rhs.commodityIds))
      return false;
    if (__isset.platformEnv != rhs.__isset.platformEnv)
      return false;
    else if (__isset.platformEnv && !(platformEnv == rhs.platformEnv))
      return false;
    return true;
  }
  bool operator != (const ReqContractRegisterRuleOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqContractRegisterRuleOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqContractRegisterRuleOption &a, ReqContractRegisterRuleOption &b);

typedef struct _ReqQuotationAccountOption__isset {
  _ReqQuotationAccountOption__isset() : accountIds(false), platform(false), platformEnv(false), supportCommodityIds(false), brokerIds(false), accountNamePartical(false), nickNamePartical(false), orderBy(false) {}
  bool accountIds;
  bool platform;
  bool platformEnv;
  bool supportCommodityIds;
  bool brokerIds;
  bool accountNamePartical;
  bool nickNamePartical;
  bool orderBy;
} _ReqQuotationAccountOption__isset;

class ReqQuotationAccountOption {
 public:

  static const char* ascii_fingerprint; // = "0E522FD106CED5DB9002E8C001A1592A";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0x52,0x2F,0xD1,0x06,0xCE,0xD5,0xDB,0x90,0x02,0xE8,0xC0,0x01,0xA1,0x59,0x2A};

  ReqQuotationAccountOption() : platform((QuotationTechPlatform::type)0), platformEnv((QuotationPlatformEnv::type)0), accountNamePartical(), nickNamePartical(), orderBy((QuotationAccountOrderBy::type)0) {
  }

  virtual ~ReqQuotationAccountOption() throw() {}

  std::set<int64_t>  accountIds;
  QuotationTechPlatform::type platform;
  QuotationPlatformEnv::type platformEnv;
  std::set<int32_t>  supportCommodityIds;
  std::set<int32_t>  brokerIds;
  std::string accountNamePartical;
  std::string nickNamePartical;
  QuotationAccountOrderBy::type orderBy;

  _ReqQuotationAccountOption__isset __isset;

  void __set_accountIds(const std::set<int64_t> & val) {
    accountIds = val;
    __isset.accountIds = true;
  }

  void __set_platform(const QuotationTechPlatform::type val) {
    platform = val;
    __isset.platform = true;
  }

  void __set_platformEnv(const QuotationPlatformEnv::type val) {
    platformEnv = val;
    __isset.platformEnv = true;
  }

  void __set_supportCommodityIds(const std::set<int32_t> & val) {
    supportCommodityIds = val;
    __isset.supportCommodityIds = true;
  }

  void __set_brokerIds(const std::set<int32_t> & val) {
    brokerIds = val;
    __isset.brokerIds = true;
  }

  void __set_accountNamePartical(const std::string& val) {
    accountNamePartical = val;
    __isset.accountNamePartical = true;
  }

  void __set_nickNamePartical(const std::string& val) {
    nickNamePartical = val;
    __isset.nickNamePartical = true;
  }

  void __set_orderBy(const QuotationAccountOrderBy::type val) {
    orderBy = val;
    __isset.orderBy = true;
  }

  bool operator == (const ReqQuotationAccountOption & rhs) const
  {
    if (__isset.accountIds != rhs.__isset.accountIds)
      return false;
    else if (__isset.accountIds && !(accountIds == rhs.accountIds))
      return false;
    if (__isset.platform != rhs.__isset.platform)
      return false;
    else if (__isset.platform && !(platform == rhs.platform))
      return false;
    if (__isset.platformEnv != rhs.__isset.platformEnv)
      return false;
    else if (__isset.platformEnv && !(platformEnv == rhs.platformEnv))
      return false;
    if (__isset.supportCommodityIds != rhs.__isset.supportCommodityIds)
      return false;
    else if (__isset.supportCommodityIds && !(supportCommodityIds == rhs.supportCommodityIds))
      return false;
    if (__isset.brokerIds != rhs.__isset.brokerIds)
      return false;
    else if (__isset.brokerIds && !(brokerIds == rhs.brokerIds))
      return false;
    if (__isset.accountNamePartical != rhs.__isset.accountNamePartical)
      return false;
    else if (__isset.accountNamePartical && !(accountNamePartical == rhs.accountNamePartical))
      return false;
    if (__isset.nickNamePartical != rhs.__isset.nickNamePartical)
      return false;
    else if (__isset.nickNamePartical && !(nickNamePartical == rhs.nickNamePartical))
      return false;
    if (__isset.orderBy != rhs.__isset.orderBy)
      return false;
    else if (__isset.orderBy && !(orderBy == rhs.orderBy))
      return false;
    return true;
  }
  bool operator != (const ReqQuotationAccountOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqQuotationAccountOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqQuotationAccountOption &a, ReqQuotationAccountOption &b);



#endif
