/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef QuotationAccessService_H
#define QuotationAccessService_H

#include <thrift/TDispatchProcessor.h>
#include "quotation_access_service_types.h"

namespace xueqiao { namespace quotation { namespace access {

class QuotationAccessServiceIf {
 public:
  virtual ~QuotationAccessServiceIf() {}
  virtual int64_t getLastUpsideEffectiveTimestamp(const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void sendUpsideHeartBeat(const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void getAccessState(QuotationAccessState& _return, const  ::platform::comm::PlatformArgs& platformArgs) = 0;
};

class QuotationAccessServiceIfFactory {
 public:
  typedef QuotationAccessServiceIf Handler;

  virtual ~QuotationAccessServiceIfFactory() {}

  virtual QuotationAccessServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(QuotationAccessServiceIf* /* handler */) = 0;
};

class QuotationAccessServiceIfSingletonFactory : virtual public QuotationAccessServiceIfFactory {
 public:
  QuotationAccessServiceIfSingletonFactory(const boost::shared_ptr<QuotationAccessServiceIf>& iface) : iface_(iface) {}
  virtual ~QuotationAccessServiceIfSingletonFactory() {}

  virtual QuotationAccessServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(QuotationAccessServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<QuotationAccessServiceIf> iface_;
};

class QuotationAccessServiceNull : virtual public QuotationAccessServiceIf {
 public:
  virtual ~QuotationAccessServiceNull() {}
  int64_t getLastUpsideEffectiveTimestamp(const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    int64_t _return = 0;
    return _return;
  }
  void sendUpsideHeartBeat(const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
  void getAccessState(QuotationAccessState& /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
};

typedef struct _QuotationAccessService_getLastUpsideEffectiveTimestamp_args__isset {
  _QuotationAccessService_getLastUpsideEffectiveTimestamp_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _QuotationAccessService_getLastUpsideEffectiveTimestamp_args__isset;

class QuotationAccessService_getLastUpsideEffectiveTimestamp_args {
 public:

  QuotationAccessService_getLastUpsideEffectiveTimestamp_args() {
  }

  virtual ~QuotationAccessService_getLastUpsideEffectiveTimestamp_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _QuotationAccessService_getLastUpsideEffectiveTimestamp_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const QuotationAccessService_getLastUpsideEffectiveTimestamp_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const QuotationAccessService_getLastUpsideEffectiveTimestamp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationAccessService_getLastUpsideEffectiveTimestamp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuotationAccessService_getLastUpsideEffectiveTimestamp_pargs {
 public:


  virtual ~QuotationAccessService_getLastUpsideEffectiveTimestamp_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationAccessService_getLastUpsideEffectiveTimestamp_result__isset {
  _QuotationAccessService_getLastUpsideEffectiveTimestamp_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _QuotationAccessService_getLastUpsideEffectiveTimestamp_result__isset;

class QuotationAccessService_getLastUpsideEffectiveTimestamp_result {
 public:

  QuotationAccessService_getLastUpsideEffectiveTimestamp_result() : success(0) {
  }

  virtual ~QuotationAccessService_getLastUpsideEffectiveTimestamp_result() throw() {}

  int64_t success;
   ::platform::comm::ErrorInfo err;

  _QuotationAccessService_getLastUpsideEffectiveTimestamp_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const QuotationAccessService_getLastUpsideEffectiveTimestamp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const QuotationAccessService_getLastUpsideEffectiveTimestamp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationAccessService_getLastUpsideEffectiveTimestamp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationAccessService_getLastUpsideEffectiveTimestamp_presult__isset {
  _QuotationAccessService_getLastUpsideEffectiveTimestamp_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _QuotationAccessService_getLastUpsideEffectiveTimestamp_presult__isset;

class QuotationAccessService_getLastUpsideEffectiveTimestamp_presult {
 public:


  virtual ~QuotationAccessService_getLastUpsideEffectiveTimestamp_presult() throw() {}

  int64_t* success;
   ::platform::comm::ErrorInfo err;

  _QuotationAccessService_getLastUpsideEffectiveTimestamp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuotationAccessService_sendUpsideHeartBeat_args__isset {
  _QuotationAccessService_sendUpsideHeartBeat_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _QuotationAccessService_sendUpsideHeartBeat_args__isset;

class QuotationAccessService_sendUpsideHeartBeat_args {
 public:

  QuotationAccessService_sendUpsideHeartBeat_args() {
  }

  virtual ~QuotationAccessService_sendUpsideHeartBeat_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _QuotationAccessService_sendUpsideHeartBeat_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const QuotationAccessService_sendUpsideHeartBeat_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const QuotationAccessService_sendUpsideHeartBeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationAccessService_sendUpsideHeartBeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuotationAccessService_sendUpsideHeartBeat_pargs {
 public:


  virtual ~QuotationAccessService_sendUpsideHeartBeat_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationAccessService_sendUpsideHeartBeat_result__isset {
  _QuotationAccessService_sendUpsideHeartBeat_result__isset() : err(false) {}
  bool err;
} _QuotationAccessService_sendUpsideHeartBeat_result__isset;

class QuotationAccessService_sendUpsideHeartBeat_result {
 public:

  QuotationAccessService_sendUpsideHeartBeat_result() {
  }

  virtual ~QuotationAccessService_sendUpsideHeartBeat_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _QuotationAccessService_sendUpsideHeartBeat_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const QuotationAccessService_sendUpsideHeartBeat_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const QuotationAccessService_sendUpsideHeartBeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationAccessService_sendUpsideHeartBeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationAccessService_sendUpsideHeartBeat_presult__isset {
  _QuotationAccessService_sendUpsideHeartBeat_presult__isset() : err(false) {}
  bool err;
} _QuotationAccessService_sendUpsideHeartBeat_presult__isset;

class QuotationAccessService_sendUpsideHeartBeat_presult {
 public:


  virtual ~QuotationAccessService_sendUpsideHeartBeat_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _QuotationAccessService_sendUpsideHeartBeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuotationAccessService_getAccessState_args__isset {
  _QuotationAccessService_getAccessState_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _QuotationAccessService_getAccessState_args__isset;

class QuotationAccessService_getAccessState_args {
 public:

  QuotationAccessService_getAccessState_args() {
  }

  virtual ~QuotationAccessService_getAccessState_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _QuotationAccessService_getAccessState_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const QuotationAccessService_getAccessState_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const QuotationAccessService_getAccessState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationAccessService_getAccessState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuotationAccessService_getAccessState_pargs {
 public:


  virtual ~QuotationAccessService_getAccessState_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationAccessService_getAccessState_result__isset {
  _QuotationAccessService_getAccessState_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _QuotationAccessService_getAccessState_result__isset;

class QuotationAccessService_getAccessState_result {
 public:

  QuotationAccessService_getAccessState_result() {
  }

  virtual ~QuotationAccessService_getAccessState_result() throw() {}

  QuotationAccessState success;
   ::platform::comm::ErrorInfo err;

  _QuotationAccessService_getAccessState_result__isset __isset;

  void __set_success(const QuotationAccessState& val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const QuotationAccessService_getAccessState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const QuotationAccessService_getAccessState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationAccessService_getAccessState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationAccessService_getAccessState_presult__isset {
  _QuotationAccessService_getAccessState_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _QuotationAccessService_getAccessState_presult__isset;

class QuotationAccessService_getAccessState_presult {
 public:


  virtual ~QuotationAccessService_getAccessState_presult() throw() {}

  QuotationAccessState* success;
   ::platform::comm::ErrorInfo err;

  _QuotationAccessService_getAccessState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class QuotationAccessServiceClient : virtual public QuotationAccessServiceIf {
 public:
  QuotationAccessServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  QuotationAccessServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t getLastUpsideEffectiveTimestamp(const  ::platform::comm::PlatformArgs& platformArgs);
  void send_getLastUpsideEffectiveTimestamp(const  ::platform::comm::PlatformArgs& platformArgs);
  int64_t recv_getLastUpsideEffectiveTimestamp();
  void sendUpsideHeartBeat(const  ::platform::comm::PlatformArgs& platformArgs);
  void send_sendUpsideHeartBeat(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_sendUpsideHeartBeat();
  void getAccessState(QuotationAccessState& _return, const  ::platform::comm::PlatformArgs& platformArgs);
  void send_getAccessState(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_getAccessState(QuotationAccessState& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class QuotationAccessServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<QuotationAccessServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (QuotationAccessServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getLastUpsideEffectiveTimestamp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendUpsideHeartBeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAccessState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  QuotationAccessServiceProcessor(boost::shared_ptr<QuotationAccessServiceIf> iface) :
    iface_(iface) {
    processMap_["getLastUpsideEffectiveTimestamp"] = &QuotationAccessServiceProcessor::process_getLastUpsideEffectiveTimestamp;
    processMap_["sendUpsideHeartBeat"] = &QuotationAccessServiceProcessor::process_sendUpsideHeartBeat;
    processMap_["getAccessState"] = &QuotationAccessServiceProcessor::process_getAccessState;
  }

  virtual ~QuotationAccessServiceProcessor() {}
};

class QuotationAccessServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  QuotationAccessServiceProcessorFactory(const ::boost::shared_ptr< QuotationAccessServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< QuotationAccessServiceIfFactory > handlerFactory_;
};

class QuotationAccessServiceMultiface : virtual public QuotationAccessServiceIf {
 public:
  QuotationAccessServiceMultiface(std::vector<boost::shared_ptr<QuotationAccessServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~QuotationAccessServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<QuotationAccessServiceIf> > ifaces_;
  QuotationAccessServiceMultiface() {}
  void add(boost::shared_ptr<QuotationAccessServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t getLastUpsideEffectiveTimestamp(const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLastUpsideEffectiveTimestamp(platformArgs);
    }
    return ifaces_[i]->getLastUpsideEffectiveTimestamp(platformArgs);
  }

  void sendUpsideHeartBeat(const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendUpsideHeartBeat(platformArgs);
    }
    ifaces_[i]->sendUpsideHeartBeat(platformArgs);
  }

  void getAccessState(QuotationAccessState& _return, const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAccessState(_return, platformArgs);
    }
    ifaces_[i]->getAccessState(_return, platformArgs);
    return;
  }

};

}}} // namespace

#endif
