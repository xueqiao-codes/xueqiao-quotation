/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "quotation_access_service_types.h"

#include <algorithm>

namespace xueqiao { namespace quotation { namespace access {

const char* QuotationAccessState::ascii_fingerprint = "8F91EF8DF0BD202ABA85195A6109549D";
const uint8_t QuotationAccessState::binary_fingerprint[16] = {0x8F,0x91,0xEF,0x8D,0xF0,0xBD,0x20,0x2A,0xBA,0x85,0x19,0x5A,0x61,0x09,0x54,0x9D};

uint32_t QuotationAccessState::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->state = ( ::QuotationAccountAccessState::type)ecast0;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stateMsg);
          this->__isset.stateMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QuotationAccessState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("QuotationAccessState");

  if (this->__isset.state) {
    xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->state);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stateMsg) {
    xfer += oprot->writeFieldBegin("stateMsg", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->stateMsg);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QuotationAccessState &a, QuotationAccessState &b) {
  using ::std::swap;
  swap(a.state, b.state);
  swap(a.stateMsg, b.stateMsg);
  swap(a.__isset, b.__isset);
}

}}} // namespace
