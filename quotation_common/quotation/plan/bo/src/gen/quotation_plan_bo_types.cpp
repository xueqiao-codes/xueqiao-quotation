/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "quotation_plan_bo_types.h"

#include <algorithm>

namespace xueqiao { namespace quotation { namespace plan { namespace bo {

int _kEQuotationPlanBoErrorCodeValues[] = {
  EQuotationPlanBoErrorCode::ERROR_GENPREVIEW_ISHANDING,
  EQuotationPlanBoErrorCode::ERROR_PREVIEW_NOTEXIST
};
const char* _kEQuotationPlanBoErrorCodeNames[] = {
  "ERROR_GENPREVIEW_ISHANDING",
  "ERROR_PREVIEW_NOTEXIST"
};
const std::map<int, const char*> _EQuotationPlanBoErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kEQuotationPlanBoErrorCodeValues, _kEQuotationPlanBoErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kEGenPreviewStatusValues[] = {
  EGenPreviewStatus::PREVIEW_EMPTY,
  EGenPreviewStatus::PREVIEW_GENTASK_RUNNING,
  EGenPreviewStatus::PREVIEW_FINISHED,
  EGenPreviewStatus::PREVIEW_GENFAILED
};
const char* _kEGenPreviewStatusNames[] = {
  "PREVIEW_EMPTY",
  "PREVIEW_GENTASK_RUNNING",
  "PREVIEW_FINISHED",
  "PREVIEW_GENFAILED"
};
const std::map<int, const char*> _EGenPreviewStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kEGenPreviewStatusValues, _kEGenPreviewStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* SubscribeAccountClass::ascii_fingerprint = "3DE42C2949E8B0483B2A45A3FA3DE623";
const uint8_t SubscribeAccountClass::binary_fingerprint[16] = {0x3D,0xE4,0x2C,0x29,0x49,0xE8,0xB0,0x48,0x3B,0x2A,0x45,0xA3,0xFA,0x3D,0xE6,0x23};

uint32_t SubscribeAccountClass::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->subscribeNum);
          this->__isset.subscribeNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->quotationAccountId);
          this->__isset.quotationAccountId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SubscribeAccountClass::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SubscribeAccountClass");

  if (this->__isset.subscribeNum) {
    xfer += oprot->writeFieldBegin("subscribeNum", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->subscribeNum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.quotationAccountId) {
    xfer += oprot->writeFieldBegin("quotationAccountId", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->quotationAccountId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SubscribeAccountClass &a, SubscribeAccountClass &b) {
  using ::std::swap;
  swap(a.subscribeNum, b.subscribeNum);
  swap(a.quotationAccountId, b.quotationAccountId);
  swap(a.__isset, b.__isset);
}

const char* SubscribeCommodityClass::ascii_fingerprint = "D1C90CF7F5B0240FE1BBB9D48989103C";
const uint8_t SubscribeCommodityClass::binary_fingerprint[16] = {0xD1,0xC9,0x0C,0xF7,0xF5,0xB0,0x24,0x0F,0xE1,0xBB,0xB9,0xD4,0x89,0x89,0x10,0x3C};

uint32_t SubscribeCommodityClass::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->classId);
          this->__isset.classId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledExchangeMic);
          this->__isset.sledExchangeMic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sledCommodityId);
          this->__isset.sledCommodityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->sledCommodityType);
          this->__isset.sledCommodityType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledCommodityCode);
          this->__isset.sledCommodityCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->platformEnv = ( ::QuotationPlatformEnv::type)ecast0;
          this->__isset.platformEnv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->activeMonths.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->activeMonths.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += iprot->readI32(this->activeMonths[_i5]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.activeMonths = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->inactiveMonths.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->inactiveMonths.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += iprot->readI32(this->inactiveMonths[_i10]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.inactiveMonths = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->activeSubscribeNum);
          this->__isset.activeSubscribeNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->inActiveSubscribeNum);
          this->__isset.inActiveSubscribeNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->subscribeAccounts.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            xfer += iprot->readListBegin(_etype14, _size11);
            this->subscribeAccounts.resize(_size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              {
                this->subscribeAccounts[_i15].clear();
                uint32_t _size16;
                ::apache::thrift::protocol::TType _etype19;
                xfer += iprot->readListBegin(_etype19, _size16);
                this->subscribeAccounts[_i15].resize(_size16);
                uint32_t _i20;
                for (_i20 = 0; _i20 < _size16; ++_i20)
                {
                  xfer += this->subscribeAccounts[_i15][_i20].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.subscribeAccounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTimestampMs);
          this->__isset.createTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SubscribeCommodityClass::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SubscribeCommodityClass");

  if (this->__isset.classId) {
    xfer += oprot->writeFieldBegin("classId", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->classId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledExchangeMic) {
    xfer += oprot->writeFieldBegin("sledExchangeMic", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->sledExchangeMic);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityId) {
    xfer += oprot->writeFieldBegin("sledCommodityId", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->sledCommodityId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityType) {
    xfer += oprot->writeFieldBegin("sledCommodityType", ::apache::thrift::protocol::T_I16, 4);
    xfer += oprot->writeI16(this->sledCommodityType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityCode) {
    xfer += oprot->writeFieldBegin("sledCommodityCode", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->sledCommodityCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformEnv) {
    xfer += oprot->writeFieldBegin("platformEnv", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32((int32_t)this->platformEnv);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.activeMonths) {
    xfer += oprot->writeFieldBegin("activeMonths", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->activeMonths.size()));
      std::vector<int32_t> ::const_iterator _iter21;
      for (_iter21 = this->activeMonths.begin(); _iter21 != this->activeMonths.end(); ++_iter21)
      {
        xfer += oprot->writeI32((*_iter21));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.inactiveMonths) {
    xfer += oprot->writeFieldBegin("inactiveMonths", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->inactiveMonths.size()));
      std::vector<int32_t> ::const_iterator _iter22;
      for (_iter22 = this->inactiveMonths.begin(); _iter22 != this->inactiveMonths.end(); ++_iter22)
      {
        xfer += oprot->writeI32((*_iter22));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.activeSubscribeNum) {
    xfer += oprot->writeFieldBegin("activeSubscribeNum", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->activeSubscribeNum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.inActiveSubscribeNum) {
    xfer += oprot->writeFieldBegin("inActiveSubscribeNum", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->inActiveSubscribeNum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.subscribeAccounts) {
    xfer += oprot->writeFieldBegin("subscribeAccounts", ::apache::thrift::protocol::T_LIST, 13);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->subscribeAccounts.size()));
      std::vector<std::vector<SubscribeAccountClass> > ::const_iterator _iter23;
      for (_iter23 = this->subscribeAccounts.begin(); _iter23 != this->subscribeAccounts.end(); ++_iter23)
      {
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*_iter23).size()));
          std::vector<SubscribeAccountClass> ::const_iterator _iter24;
          for (_iter24 = (*_iter23).begin(); _iter24 != (*_iter23).end(); ++_iter24)
          {
            xfer += (*_iter24).write(oprot);
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createTimestampMs) {
    xfer += oprot->writeFieldBegin("createTimestampMs", ::apache::thrift::protocol::T_I64, 15);
    xfer += oprot->writeI64(this->createTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SubscribeCommodityClass &a, SubscribeCommodityClass &b) {
  using ::std::swap;
  swap(a.classId, b.classId);
  swap(a.sledExchangeMic, b.sledExchangeMic);
  swap(a.sledCommodityId, b.sledCommodityId);
  swap(a.sledCommodityType, b.sledCommodityType);
  swap(a.sledCommodityCode, b.sledCommodityCode);
  swap(a.platformEnv, b.platformEnv);
  swap(a.activeMonths, b.activeMonths);
  swap(a.inactiveMonths, b.inactiveMonths);
  swap(a.activeSubscribeNum, b.activeSubscribeNum);
  swap(a.inActiveSubscribeNum, b.inActiveSubscribeNum);
  swap(a.subscribeAccounts, b.subscribeAccounts);
  swap(a.createTimestampMs, b.createTimestampMs);
  swap(a.__isset, b.__isset);
}

const char* SubscribeContractItem::ascii_fingerprint = "C42C22C830D8257131D9729D38398B27";
const uint8_t SubscribeContractItem::binary_fingerprint[16] = {0xC4,0x2C,0x22,0xC8,0x30,0xD8,0x25,0x71,0x31,0xD9,0x72,0x9D,0x38,0x39,0x8B,0x27};

uint32_t SubscribeContractItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->itemId);
          this->__isset.itemId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->classId);
          this->__isset.classId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledExchangeMic);
          this->__isset.sledExchangeMic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sledCommodityId);
          this->__isset.sledCommodityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->sledCommodityType);
          this->__isset.sledCommodityType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledCommodityCode);
          this->__isset.sledCommodityCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledContractCode);
          this->__isset.sledContractCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sledContractId);
          this->__isset.sledContractId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast25;
          xfer += iprot->readI32(ecast25);
          this->platformEnv = ( ::QuotationPlatformEnv::type)ecast25;
          this->__isset.platformEnv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->quotationAccountId);
          this->__isset.quotationAccountId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isForActive);
          this->__isset.isForActive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTimestampMs);
          this->__isset.createTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SubscribeContractItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SubscribeContractItem");

  if (this->__isset.itemId) {
    xfer += oprot->writeFieldBegin("itemId", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->itemId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.classId) {
    xfer += oprot->writeFieldBegin("classId", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->classId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledExchangeMic) {
    xfer += oprot->writeFieldBegin("sledExchangeMic", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->sledExchangeMic);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityId) {
    xfer += oprot->writeFieldBegin("sledCommodityId", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->sledCommodityId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityType) {
    xfer += oprot->writeFieldBegin("sledCommodityType", ::apache::thrift::protocol::T_I16, 5);
    xfer += oprot->writeI16(this->sledCommodityType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityCode) {
    xfer += oprot->writeFieldBegin("sledCommodityCode", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->sledCommodityCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledContractCode) {
    xfer += oprot->writeFieldBegin("sledContractCode", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->sledContractCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledContractId) {
    xfer += oprot->writeFieldBegin("sledContractId", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->sledContractId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformEnv) {
    xfer += oprot->writeFieldBegin("platformEnv", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32((int32_t)this->platformEnv);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.quotationAccountId) {
    xfer += oprot->writeFieldBegin("quotationAccountId", ::apache::thrift::protocol::T_I64, 12);
    xfer += oprot->writeI64(this->quotationAccountId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isForActive) {
    xfer += oprot->writeFieldBegin("isForActive", ::apache::thrift::protocol::T_BOOL, 13);
    xfer += oprot->writeBool(this->isForActive);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createTimestampMs) {
    xfer += oprot->writeFieldBegin("createTimestampMs", ::apache::thrift::protocol::T_I64, 14);
    xfer += oprot->writeI64(this->createTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SubscribeContractItem &a, SubscribeContractItem &b) {
  using ::std::swap;
  swap(a.itemId, b.itemId);
  swap(a.classId, b.classId);
  swap(a.sledExchangeMic, b.sledExchangeMic);
  swap(a.sledCommodityId, b.sledCommodityId);
  swap(a.sledCommodityType, b.sledCommodityType);
  swap(a.sledCommodityCode, b.sledCommodityCode);
  swap(a.sledContractCode, b.sledContractCode);
  swap(a.sledContractId, b.sledContractId);
  swap(a.platformEnv, b.platformEnv);
  swap(a.quotationAccountId, b.quotationAccountId);
  swap(a.isForActive, b.isForActive);
  swap(a.createTimestampMs, b.createTimestampMs);
  swap(a.__isset, b.__isset);
}

const char* GenPreviewState::ascii_fingerprint = "AB7F6A8DAC27E2BAE524A3CBB66C8F8A";
const uint8_t GenPreviewState::binary_fingerprint[16] = {0xAB,0x7F,0x6A,0x8D,0xAC,0x27,0xE2,0xBA,0xE5,0x24,0xA3,0xCB,0xB6,0x6C,0x8F,0x8A};

uint32_t GenPreviewState::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast26;
          xfer += iprot->readI32(ecast26);
          this->status = (EGenPreviewStatus::type)ecast26;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stateMsg);
          this->__isset.stateMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastUpdateTimestampMs);
          this->__isset.lastUpdateTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GenPreviewState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GenPreviewState");

  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stateMsg) {
    xfer += oprot->writeFieldBegin("stateMsg", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->stateMsg);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastUpdateTimestampMs) {
    xfer += oprot->writeFieldBegin("lastUpdateTimestampMs", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->lastUpdateTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GenPreviewState &a, GenPreviewState &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.stateMsg, b.stateMsg);
  swap(a.lastUpdateTimestampMs, b.lastUpdateTimestampMs);
  swap(a.__isset, b.__isset);
}

const char* QuerySubscribeContractItemOption::ascii_fingerprint = "8536E51FD315FF015A827B9CFBEDAE16";
const uint8_t QuerySubscribeContractItemOption::binary_fingerprint[16] = {0x85,0x36,0xE5,0x1F,0xD3,0x15,0xFF,0x01,0x5A,0x82,0x7B,0x9C,0xFB,0xED,0xAE,0x16};

uint32_t QuerySubscribeContractItemOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->quotationAccountIds.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _etype30;
            xfer += iprot->readSetBegin(_etype30, _size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              int64_t _elem32;
              xfer += iprot->readI64(_elem32);
              this->quotationAccountIds.insert(_elem32);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.quotationAccountIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->sledCommodityIds.clear();
            uint32_t _size33;
            ::apache::thrift::protocol::TType _etype36;
            xfer += iprot->readSetBegin(_etype36, _size33);
            uint32_t _i37;
            for (_i37 = 0; _i37 < _size33; ++_i37)
            {
              int64_t _elem38;
              xfer += iprot->readI64(_elem38);
              this->sledCommodityIds.insert(_elem38);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.sledCommodityIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast39;
          xfer += iprot->readI32(ecast39);
          this->platformEnv = ( ::QuotationPlatformEnv::type)ecast39;
          this->__isset.platformEnv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QuerySubscribeContractItemOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("QuerySubscribeContractItemOption");

  if (this->__isset.quotationAccountIds) {
    xfer += oprot->writeFieldBegin("quotationAccountIds", ::apache::thrift::protocol::T_SET, 1);
    {
      xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->quotationAccountIds.size()));
      std::set<int64_t> ::const_iterator _iter40;
      for (_iter40 = this->quotationAccountIds.begin(); _iter40 != this->quotationAccountIds.end(); ++_iter40)
      {
        xfer += oprot->writeI64((*_iter40));
      }
      xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityIds) {
    xfer += oprot->writeFieldBegin("sledCommodityIds", ::apache::thrift::protocol::T_SET, 2);
    {
      xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->sledCommodityIds.size()));
      std::set<int64_t> ::const_iterator _iter41;
      for (_iter41 = this->sledCommodityIds.begin(); _iter41 != this->sledCommodityIds.end(); ++_iter41)
      {
        xfer += oprot->writeI64((*_iter41));
      }
      xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformEnv) {
    xfer += oprot->writeFieldBegin("platformEnv", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->platformEnv);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QuerySubscribeContractItemOption &a, QuerySubscribeContractItemOption &b) {
  using ::std::swap;
  swap(a.quotationAccountIds, b.quotationAccountIds);
  swap(a.sledCommodityIds, b.sledCommodityIds);
  swap(a.platformEnv, b.platformEnv);
  swap(a.__isset, b.__isset);
}

const char* SubscribeContractItemPage::ascii_fingerprint = "9C4683036F1B22F52396ECC6DACD232C";
const uint8_t SubscribeContractItemPage::binary_fingerprint[16] = {0x9C,0x46,0x83,0x03,0x6F,0x1B,0x22,0xF5,0x23,0x96,0xEC,0xC6,0xDA,0xCD,0x23,0x2C};

uint32_t SubscribeContractItemPage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalCount);
          this->__isset.totalCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resultList.clear();
            uint32_t _size42;
            ::apache::thrift::protocol::TType _etype45;
            xfer += iprot->readListBegin(_etype45, _size42);
            this->resultList.resize(_size42);
            uint32_t _i46;
            for (_i46 = 0; _i46 < _size42; ++_i46)
            {
              xfer += this->resultList[_i46].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.resultList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SubscribeContractItemPage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SubscribeContractItemPage");

  if (this->__isset.totalCount) {
    xfer += oprot->writeFieldBegin("totalCount", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->totalCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resultList) {
    xfer += oprot->writeFieldBegin("resultList", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->resultList.size()));
      std::vector<SubscribeContractItem> ::const_iterator _iter47;
      for (_iter47 = this->resultList.begin(); _iter47 != this->resultList.end(); ++_iter47)
      {
        xfer += (*_iter47).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SubscribeContractItemPage &a, SubscribeContractItemPage &b) {
  using ::std::swap;
  swap(a.totalCount, b.totalCount);
  swap(a.resultList, b.resultList);
  swap(a.__isset, b.__isset);
}

}}}} // namespace
