/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef QuotationPlanBo_H
#define QuotationPlanBo_H

#include <thrift/TDispatchProcessor.h>
#include "quotation_plan_bo_types.h"

namespace xueqiao { namespace quotation { namespace plan { namespace bo {

class QuotationPlanBoIf {
 public:
  virtual ~QuotationPlanBoIf() {}
  virtual void startGenPreviewSCClasses(GenPreviewState& _return, const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void getGenPreviewState(GenPreviewState& _return, const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void commitPreviewSCClasses(const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void querySubscribeContractItemPage(SubscribeContractItemPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const QuerySubscribeContractItemOption& queryOption, const  ::platform::page::IndexedPageOption& pageOption) = 0;
  virtual void getCurrentSCClasses(std::vector<SubscribeCommodityClass> & _return, const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void getPreviewSCClasses(std::vector<SubscribeCommodityClass> & _return, const  ::platform::comm::PlatformArgs& platformArgs) = 0;
};

class QuotationPlanBoIfFactory {
 public:
  typedef QuotationPlanBoIf Handler;

  virtual ~QuotationPlanBoIfFactory() {}

  virtual QuotationPlanBoIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(QuotationPlanBoIf* /* handler */) = 0;
};

class QuotationPlanBoIfSingletonFactory : virtual public QuotationPlanBoIfFactory {
 public:
  QuotationPlanBoIfSingletonFactory(const boost::shared_ptr<QuotationPlanBoIf>& iface) : iface_(iface) {}
  virtual ~QuotationPlanBoIfSingletonFactory() {}

  virtual QuotationPlanBoIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(QuotationPlanBoIf* /* handler */) {}

 protected:
  boost::shared_ptr<QuotationPlanBoIf> iface_;
};

class QuotationPlanBoNull : virtual public QuotationPlanBoIf {
 public:
  virtual ~QuotationPlanBoNull() {}
  void startGenPreviewSCClasses(GenPreviewState& /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
  void getGenPreviewState(GenPreviewState& /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
  void commitPreviewSCClasses(const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
  void querySubscribeContractItemPage(SubscribeContractItemPage& /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */, const QuerySubscribeContractItemOption& /* queryOption */, const  ::platform::page::IndexedPageOption& /* pageOption */) {
    return;
  }
  void getCurrentSCClasses(std::vector<SubscribeCommodityClass> & /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
  void getPreviewSCClasses(std::vector<SubscribeCommodityClass> & /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
};

typedef struct _QuotationPlanBo_startGenPreviewSCClasses_args__isset {
  _QuotationPlanBo_startGenPreviewSCClasses_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _QuotationPlanBo_startGenPreviewSCClasses_args__isset;

class QuotationPlanBo_startGenPreviewSCClasses_args {
 public:

  QuotationPlanBo_startGenPreviewSCClasses_args() {
  }

  virtual ~QuotationPlanBo_startGenPreviewSCClasses_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _QuotationPlanBo_startGenPreviewSCClasses_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const QuotationPlanBo_startGenPreviewSCClasses_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const QuotationPlanBo_startGenPreviewSCClasses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationPlanBo_startGenPreviewSCClasses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuotationPlanBo_startGenPreviewSCClasses_pargs {
 public:


  virtual ~QuotationPlanBo_startGenPreviewSCClasses_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationPlanBo_startGenPreviewSCClasses_result__isset {
  _QuotationPlanBo_startGenPreviewSCClasses_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _QuotationPlanBo_startGenPreviewSCClasses_result__isset;

class QuotationPlanBo_startGenPreviewSCClasses_result {
 public:

  QuotationPlanBo_startGenPreviewSCClasses_result() {
  }

  virtual ~QuotationPlanBo_startGenPreviewSCClasses_result() throw() {}

  GenPreviewState success;
   ::platform::comm::ErrorInfo err;

  _QuotationPlanBo_startGenPreviewSCClasses_result__isset __isset;

  void __set_success(const GenPreviewState& val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const QuotationPlanBo_startGenPreviewSCClasses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const QuotationPlanBo_startGenPreviewSCClasses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationPlanBo_startGenPreviewSCClasses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationPlanBo_startGenPreviewSCClasses_presult__isset {
  _QuotationPlanBo_startGenPreviewSCClasses_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _QuotationPlanBo_startGenPreviewSCClasses_presult__isset;

class QuotationPlanBo_startGenPreviewSCClasses_presult {
 public:


  virtual ~QuotationPlanBo_startGenPreviewSCClasses_presult() throw() {}

  GenPreviewState* success;
   ::platform::comm::ErrorInfo err;

  _QuotationPlanBo_startGenPreviewSCClasses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuotationPlanBo_getGenPreviewState_args__isset {
  _QuotationPlanBo_getGenPreviewState_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _QuotationPlanBo_getGenPreviewState_args__isset;

class QuotationPlanBo_getGenPreviewState_args {
 public:

  QuotationPlanBo_getGenPreviewState_args() {
  }

  virtual ~QuotationPlanBo_getGenPreviewState_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _QuotationPlanBo_getGenPreviewState_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const QuotationPlanBo_getGenPreviewState_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const QuotationPlanBo_getGenPreviewState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationPlanBo_getGenPreviewState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuotationPlanBo_getGenPreviewState_pargs {
 public:


  virtual ~QuotationPlanBo_getGenPreviewState_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationPlanBo_getGenPreviewState_result__isset {
  _QuotationPlanBo_getGenPreviewState_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _QuotationPlanBo_getGenPreviewState_result__isset;

class QuotationPlanBo_getGenPreviewState_result {
 public:

  QuotationPlanBo_getGenPreviewState_result() {
  }

  virtual ~QuotationPlanBo_getGenPreviewState_result() throw() {}

  GenPreviewState success;
   ::platform::comm::ErrorInfo err;

  _QuotationPlanBo_getGenPreviewState_result__isset __isset;

  void __set_success(const GenPreviewState& val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const QuotationPlanBo_getGenPreviewState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const QuotationPlanBo_getGenPreviewState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationPlanBo_getGenPreviewState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationPlanBo_getGenPreviewState_presult__isset {
  _QuotationPlanBo_getGenPreviewState_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _QuotationPlanBo_getGenPreviewState_presult__isset;

class QuotationPlanBo_getGenPreviewState_presult {
 public:


  virtual ~QuotationPlanBo_getGenPreviewState_presult() throw() {}

  GenPreviewState* success;
   ::platform::comm::ErrorInfo err;

  _QuotationPlanBo_getGenPreviewState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuotationPlanBo_commitPreviewSCClasses_args__isset {
  _QuotationPlanBo_commitPreviewSCClasses_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _QuotationPlanBo_commitPreviewSCClasses_args__isset;

class QuotationPlanBo_commitPreviewSCClasses_args {
 public:

  QuotationPlanBo_commitPreviewSCClasses_args() {
  }

  virtual ~QuotationPlanBo_commitPreviewSCClasses_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _QuotationPlanBo_commitPreviewSCClasses_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const QuotationPlanBo_commitPreviewSCClasses_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const QuotationPlanBo_commitPreviewSCClasses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationPlanBo_commitPreviewSCClasses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuotationPlanBo_commitPreviewSCClasses_pargs {
 public:


  virtual ~QuotationPlanBo_commitPreviewSCClasses_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationPlanBo_commitPreviewSCClasses_result__isset {
  _QuotationPlanBo_commitPreviewSCClasses_result__isset() : err(false) {}
  bool err;
} _QuotationPlanBo_commitPreviewSCClasses_result__isset;

class QuotationPlanBo_commitPreviewSCClasses_result {
 public:

  QuotationPlanBo_commitPreviewSCClasses_result() {
  }

  virtual ~QuotationPlanBo_commitPreviewSCClasses_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _QuotationPlanBo_commitPreviewSCClasses_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const QuotationPlanBo_commitPreviewSCClasses_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const QuotationPlanBo_commitPreviewSCClasses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationPlanBo_commitPreviewSCClasses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationPlanBo_commitPreviewSCClasses_presult__isset {
  _QuotationPlanBo_commitPreviewSCClasses_presult__isset() : err(false) {}
  bool err;
} _QuotationPlanBo_commitPreviewSCClasses_presult__isset;

class QuotationPlanBo_commitPreviewSCClasses_presult {
 public:


  virtual ~QuotationPlanBo_commitPreviewSCClasses_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _QuotationPlanBo_commitPreviewSCClasses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuotationPlanBo_querySubscribeContractItemPage_args__isset {
  _QuotationPlanBo_querySubscribeContractItemPage_args__isset() : platformArgs(false), queryOption(false), pageOption(false) {}
  bool platformArgs;
  bool queryOption;
  bool pageOption;
} _QuotationPlanBo_querySubscribeContractItemPage_args__isset;

class QuotationPlanBo_querySubscribeContractItemPage_args {
 public:

  QuotationPlanBo_querySubscribeContractItemPage_args() {
  }

  virtual ~QuotationPlanBo_querySubscribeContractItemPage_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  QuerySubscribeContractItemOption queryOption;
   ::platform::page::IndexedPageOption pageOption;

  _QuotationPlanBo_querySubscribeContractItemPage_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_queryOption(const QuerySubscribeContractItemOption& val) {
    queryOption = val;
  }

  void __set_pageOption(const  ::platform::page::IndexedPageOption& val) {
    pageOption = val;
  }

  bool operator == (const QuotationPlanBo_querySubscribeContractItemPage_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(queryOption == rhs.queryOption))
      return false;
    if (!(pageOption == rhs.pageOption))
      return false;
    return true;
  }
  bool operator != (const QuotationPlanBo_querySubscribeContractItemPage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationPlanBo_querySubscribeContractItemPage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuotationPlanBo_querySubscribeContractItemPage_pargs {
 public:


  virtual ~QuotationPlanBo_querySubscribeContractItemPage_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const QuerySubscribeContractItemOption* queryOption;
  const  ::platform::page::IndexedPageOption* pageOption;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationPlanBo_querySubscribeContractItemPage_result__isset {
  _QuotationPlanBo_querySubscribeContractItemPage_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _QuotationPlanBo_querySubscribeContractItemPage_result__isset;

class QuotationPlanBo_querySubscribeContractItemPage_result {
 public:

  QuotationPlanBo_querySubscribeContractItemPage_result() {
  }

  virtual ~QuotationPlanBo_querySubscribeContractItemPage_result() throw() {}

  SubscribeContractItemPage success;
   ::platform::comm::ErrorInfo err;

  _QuotationPlanBo_querySubscribeContractItemPage_result__isset __isset;

  void __set_success(const SubscribeContractItemPage& val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const QuotationPlanBo_querySubscribeContractItemPage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const QuotationPlanBo_querySubscribeContractItemPage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationPlanBo_querySubscribeContractItemPage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationPlanBo_querySubscribeContractItemPage_presult__isset {
  _QuotationPlanBo_querySubscribeContractItemPage_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _QuotationPlanBo_querySubscribeContractItemPage_presult__isset;

class QuotationPlanBo_querySubscribeContractItemPage_presult {
 public:


  virtual ~QuotationPlanBo_querySubscribeContractItemPage_presult() throw() {}

  SubscribeContractItemPage* success;
   ::platform::comm::ErrorInfo err;

  _QuotationPlanBo_querySubscribeContractItemPage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuotationPlanBo_getCurrentSCClasses_args__isset {
  _QuotationPlanBo_getCurrentSCClasses_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _QuotationPlanBo_getCurrentSCClasses_args__isset;

class QuotationPlanBo_getCurrentSCClasses_args {
 public:

  QuotationPlanBo_getCurrentSCClasses_args() {
  }

  virtual ~QuotationPlanBo_getCurrentSCClasses_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _QuotationPlanBo_getCurrentSCClasses_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const QuotationPlanBo_getCurrentSCClasses_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const QuotationPlanBo_getCurrentSCClasses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationPlanBo_getCurrentSCClasses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuotationPlanBo_getCurrentSCClasses_pargs {
 public:


  virtual ~QuotationPlanBo_getCurrentSCClasses_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationPlanBo_getCurrentSCClasses_result__isset {
  _QuotationPlanBo_getCurrentSCClasses_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _QuotationPlanBo_getCurrentSCClasses_result__isset;

class QuotationPlanBo_getCurrentSCClasses_result {
 public:

  QuotationPlanBo_getCurrentSCClasses_result() {
  }

  virtual ~QuotationPlanBo_getCurrentSCClasses_result() throw() {}

  std::vector<SubscribeCommodityClass>  success;
   ::platform::comm::ErrorInfo err;

  _QuotationPlanBo_getCurrentSCClasses_result__isset __isset;

  void __set_success(const std::vector<SubscribeCommodityClass> & val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const QuotationPlanBo_getCurrentSCClasses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const QuotationPlanBo_getCurrentSCClasses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationPlanBo_getCurrentSCClasses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationPlanBo_getCurrentSCClasses_presult__isset {
  _QuotationPlanBo_getCurrentSCClasses_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _QuotationPlanBo_getCurrentSCClasses_presult__isset;

class QuotationPlanBo_getCurrentSCClasses_presult {
 public:


  virtual ~QuotationPlanBo_getCurrentSCClasses_presult() throw() {}

  std::vector<SubscribeCommodityClass> * success;
   ::platform::comm::ErrorInfo err;

  _QuotationPlanBo_getCurrentSCClasses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QuotationPlanBo_getPreviewSCClasses_args__isset {
  _QuotationPlanBo_getPreviewSCClasses_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _QuotationPlanBo_getPreviewSCClasses_args__isset;

class QuotationPlanBo_getPreviewSCClasses_args {
 public:

  QuotationPlanBo_getPreviewSCClasses_args() {
  }

  virtual ~QuotationPlanBo_getPreviewSCClasses_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _QuotationPlanBo_getPreviewSCClasses_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const QuotationPlanBo_getPreviewSCClasses_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const QuotationPlanBo_getPreviewSCClasses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationPlanBo_getPreviewSCClasses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QuotationPlanBo_getPreviewSCClasses_pargs {
 public:


  virtual ~QuotationPlanBo_getPreviewSCClasses_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationPlanBo_getPreviewSCClasses_result__isset {
  _QuotationPlanBo_getPreviewSCClasses_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _QuotationPlanBo_getPreviewSCClasses_result__isset;

class QuotationPlanBo_getPreviewSCClasses_result {
 public:

  QuotationPlanBo_getPreviewSCClasses_result() {
  }

  virtual ~QuotationPlanBo_getPreviewSCClasses_result() throw() {}

  std::vector<SubscribeCommodityClass>  success;
   ::platform::comm::ErrorInfo err;

  _QuotationPlanBo_getPreviewSCClasses_result__isset __isset;

  void __set_success(const std::vector<SubscribeCommodityClass> & val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const QuotationPlanBo_getPreviewSCClasses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const QuotationPlanBo_getPreviewSCClasses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotationPlanBo_getPreviewSCClasses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QuotationPlanBo_getPreviewSCClasses_presult__isset {
  _QuotationPlanBo_getPreviewSCClasses_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _QuotationPlanBo_getPreviewSCClasses_presult__isset;

class QuotationPlanBo_getPreviewSCClasses_presult {
 public:


  virtual ~QuotationPlanBo_getPreviewSCClasses_presult() throw() {}

  std::vector<SubscribeCommodityClass> * success;
   ::platform::comm::ErrorInfo err;

  _QuotationPlanBo_getPreviewSCClasses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class QuotationPlanBoClient : virtual public QuotationPlanBoIf {
 public:
  QuotationPlanBoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  QuotationPlanBoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void startGenPreviewSCClasses(GenPreviewState& _return, const  ::platform::comm::PlatformArgs& platformArgs);
  void send_startGenPreviewSCClasses(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_startGenPreviewSCClasses(GenPreviewState& _return);
  void getGenPreviewState(GenPreviewState& _return, const  ::platform::comm::PlatformArgs& platformArgs);
  void send_getGenPreviewState(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_getGenPreviewState(GenPreviewState& _return);
  void commitPreviewSCClasses(const  ::platform::comm::PlatformArgs& platformArgs);
  void send_commitPreviewSCClasses(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_commitPreviewSCClasses();
  void querySubscribeContractItemPage(SubscribeContractItemPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const QuerySubscribeContractItemOption& queryOption, const  ::platform::page::IndexedPageOption& pageOption);
  void send_querySubscribeContractItemPage(const  ::platform::comm::PlatformArgs& platformArgs, const QuerySubscribeContractItemOption& queryOption, const  ::platform::page::IndexedPageOption& pageOption);
  void recv_querySubscribeContractItemPage(SubscribeContractItemPage& _return);
  void getCurrentSCClasses(std::vector<SubscribeCommodityClass> & _return, const  ::platform::comm::PlatformArgs& platformArgs);
  void send_getCurrentSCClasses(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_getCurrentSCClasses(std::vector<SubscribeCommodityClass> & _return);
  void getPreviewSCClasses(std::vector<SubscribeCommodityClass> & _return, const  ::platform::comm::PlatformArgs& platformArgs);
  void send_getPreviewSCClasses(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_getPreviewSCClasses(std::vector<SubscribeCommodityClass> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class QuotationPlanBoProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<QuotationPlanBoIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (QuotationPlanBoProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_startGenPreviewSCClasses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGenPreviewState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commitPreviewSCClasses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_querySubscribeContractItemPage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCurrentSCClasses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPreviewSCClasses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  QuotationPlanBoProcessor(boost::shared_ptr<QuotationPlanBoIf> iface) :
    iface_(iface) {
    processMap_["startGenPreviewSCClasses"] = &QuotationPlanBoProcessor::process_startGenPreviewSCClasses;
    processMap_["getGenPreviewState"] = &QuotationPlanBoProcessor::process_getGenPreviewState;
    processMap_["commitPreviewSCClasses"] = &QuotationPlanBoProcessor::process_commitPreviewSCClasses;
    processMap_["querySubscribeContractItemPage"] = &QuotationPlanBoProcessor::process_querySubscribeContractItemPage;
    processMap_["getCurrentSCClasses"] = &QuotationPlanBoProcessor::process_getCurrentSCClasses;
    processMap_["getPreviewSCClasses"] = &QuotationPlanBoProcessor::process_getPreviewSCClasses;
  }

  virtual ~QuotationPlanBoProcessor() {}
};

class QuotationPlanBoProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  QuotationPlanBoProcessorFactory(const ::boost::shared_ptr< QuotationPlanBoIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< QuotationPlanBoIfFactory > handlerFactory_;
};

class QuotationPlanBoMultiface : virtual public QuotationPlanBoIf {
 public:
  QuotationPlanBoMultiface(std::vector<boost::shared_ptr<QuotationPlanBoIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~QuotationPlanBoMultiface() {}
 protected:
  std::vector<boost::shared_ptr<QuotationPlanBoIf> > ifaces_;
  QuotationPlanBoMultiface() {}
  void add(boost::shared_ptr<QuotationPlanBoIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void startGenPreviewSCClasses(GenPreviewState& _return, const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startGenPreviewSCClasses(_return, platformArgs);
    }
    ifaces_[i]->startGenPreviewSCClasses(_return, platformArgs);
    return;
  }

  void getGenPreviewState(GenPreviewState& _return, const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGenPreviewState(_return, platformArgs);
    }
    ifaces_[i]->getGenPreviewState(_return, platformArgs);
    return;
  }

  void commitPreviewSCClasses(const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commitPreviewSCClasses(platformArgs);
    }
    ifaces_[i]->commitPreviewSCClasses(platformArgs);
  }

  void querySubscribeContractItemPage(SubscribeContractItemPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const QuerySubscribeContractItemOption& queryOption, const  ::platform::page::IndexedPageOption& pageOption) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->querySubscribeContractItemPage(_return, platformArgs, queryOption, pageOption);
    }
    ifaces_[i]->querySubscribeContractItemPage(_return, platformArgs, queryOption, pageOption);
    return;
  }

  void getCurrentSCClasses(std::vector<SubscribeCommodityClass> & _return, const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCurrentSCClasses(_return, platformArgs);
    }
    ifaces_[i]->getCurrentSCClasses(_return, platformArgs);
    return;
  }

  void getPreviewSCClasses(std::vector<SubscribeCommodityClass> & _return, const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPreviewSCClasses(_return, platformArgs);
    }
    ifaces_[i]->getPreviewSCClasses(_return, platformArgs);
    return;
  }

};

}}}} // namespace

#endif
