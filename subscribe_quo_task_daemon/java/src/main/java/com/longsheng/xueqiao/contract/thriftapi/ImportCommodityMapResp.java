/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ImportCommodityMapResp implements org.apache.thrift.TBase<ImportCommodityMapResp, ImportCommodityMapResp._Fields>, java.io.Serializable, Cloneable, Comparable<ImportCommodityMapResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImportCommodityMapResp");

  private static final org.apache.thrift.protocol.TField COMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("complete", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField EXIST_MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("existMapping", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField CONFLICT_MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("conflictMapping", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ADD_MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("addMapping", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ImportCommodityMapRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ImportCommodityMapRespTupleSchemeFactory());
  }

  public boolean complete; // optional
  public List<String> existMapping; // optional
  public List<String> conflictMapping; // optional
  public List<String> addMapping; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPLETE((short)1, "complete"),
    EXIST_MAPPING((short)2, "existMapping"),
    CONFLICT_MAPPING((short)3, "conflictMapping"),
    ADD_MAPPING((short)4, "addMapping");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPLETE
          return COMPLETE;
        case 2: // EXIST_MAPPING
          return EXIST_MAPPING;
        case 3: // CONFLICT_MAPPING
          return CONFLICT_MAPPING;
        case 4: // ADD_MAPPING
          return ADD_MAPPING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPLETE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.COMPLETE,_Fields.EXIST_MAPPING,_Fields.CONFLICT_MAPPING,_Fields.ADD_MAPPING};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPLETE, new org.apache.thrift.meta_data.FieldMetaData("complete", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXIST_MAPPING, new org.apache.thrift.meta_data.FieldMetaData("existMapping", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CONFLICT_MAPPING, new org.apache.thrift.meta_data.FieldMetaData("conflictMapping", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ADD_MAPPING, new org.apache.thrift.meta_data.FieldMetaData("addMapping", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImportCommodityMapResp.class, metaDataMap);
  }

  public ImportCommodityMapResp() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImportCommodityMapResp(ImportCommodityMapResp other) {
    __isset_bitfield = other.__isset_bitfield;
    this.complete = other.complete;
    if (other.isSetExistMapping()) {
      List<String> __this__existMapping = new ArrayList<String>(other.existMapping);
      this.existMapping = __this__existMapping;
    }
    if (other.isSetConflictMapping()) {
      List<String> __this__conflictMapping = new ArrayList<String>(other.conflictMapping);
      this.conflictMapping = __this__conflictMapping;
    }
    if (other.isSetAddMapping()) {
      List<String> __this__addMapping = new ArrayList<String>(other.addMapping);
      this.addMapping = __this__addMapping;
    }
  }

  public ImportCommodityMapResp deepCopy() {
    return new ImportCommodityMapResp(this);
  }

  @Override
  public void clear() {
    setCompleteIsSet(false);
    this.complete = false;
    this.existMapping = null;
    this.conflictMapping = null;
    this.addMapping = null;
  }

  public boolean isComplete() {
    return this.complete;
  }

  public ImportCommodityMapResp setComplete(boolean complete) {
    this.complete = complete;
    setCompleteIsSet(true);
    return this;
  }

  public void unsetComplete() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLETE_ISSET_ID);
  }

  /** Returns true if field complete is set (has been assigned a value) and false otherwise */
  public boolean isSetComplete() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLETE_ISSET_ID);
  }

  public void setCompleteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLETE_ISSET_ID, value);
  }

  public int getExistMappingSize() {
    return (this.existMapping == null) ? 0 : this.existMapping.size();
  }

  public java.util.Iterator<String> getExistMappingIterator() {
    return (this.existMapping == null) ? null : this.existMapping.iterator();
  }

  public void addToExistMapping(String elem) {
    if (this.existMapping == null) {
      this.existMapping = new ArrayList<String>();
    }
    this.existMapping.add(elem);
  }

  public List<String> getExistMapping() {
    return this.existMapping;
  }

  public ImportCommodityMapResp setExistMapping(List<String> existMapping) {
    this.existMapping = existMapping;
    return this;
  }

  public void unsetExistMapping() {
    this.existMapping = null;
  }

  /** Returns true if field existMapping is set (has been assigned a value) and false otherwise */
  public boolean isSetExistMapping() {
    return this.existMapping != null;
  }

  public void setExistMappingIsSet(boolean value) {
    if (!value) {
      this.existMapping = null;
    }
  }

  public int getConflictMappingSize() {
    return (this.conflictMapping == null) ? 0 : this.conflictMapping.size();
  }

  public java.util.Iterator<String> getConflictMappingIterator() {
    return (this.conflictMapping == null) ? null : this.conflictMapping.iterator();
  }

  public void addToConflictMapping(String elem) {
    if (this.conflictMapping == null) {
      this.conflictMapping = new ArrayList<String>();
    }
    this.conflictMapping.add(elem);
  }

  public List<String> getConflictMapping() {
    return this.conflictMapping;
  }

  public ImportCommodityMapResp setConflictMapping(List<String> conflictMapping) {
    this.conflictMapping = conflictMapping;
    return this;
  }

  public void unsetConflictMapping() {
    this.conflictMapping = null;
  }

  /** Returns true if field conflictMapping is set (has been assigned a value) and false otherwise */
  public boolean isSetConflictMapping() {
    return this.conflictMapping != null;
  }

  public void setConflictMappingIsSet(boolean value) {
    if (!value) {
      this.conflictMapping = null;
    }
  }

  public int getAddMappingSize() {
    return (this.addMapping == null) ? 0 : this.addMapping.size();
  }

  public java.util.Iterator<String> getAddMappingIterator() {
    return (this.addMapping == null) ? null : this.addMapping.iterator();
  }

  public void addToAddMapping(String elem) {
    if (this.addMapping == null) {
      this.addMapping = new ArrayList<String>();
    }
    this.addMapping.add(elem);
  }

  public List<String> getAddMapping() {
    return this.addMapping;
  }

  public ImportCommodityMapResp setAddMapping(List<String> addMapping) {
    this.addMapping = addMapping;
    return this;
  }

  public void unsetAddMapping() {
    this.addMapping = null;
  }

  /** Returns true if field addMapping is set (has been assigned a value) and false otherwise */
  public boolean isSetAddMapping() {
    return this.addMapping != null;
  }

  public void setAddMappingIsSet(boolean value) {
    if (!value) {
      this.addMapping = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPLETE:
      if (value == null) {
        unsetComplete();
      } else {
        setComplete((Boolean)value);
      }
      break;

    case EXIST_MAPPING:
      if (value == null) {
        unsetExistMapping();
      } else {
        setExistMapping((List<String>)value);
      }
      break;

    case CONFLICT_MAPPING:
      if (value == null) {
        unsetConflictMapping();
      } else {
        setConflictMapping((List<String>)value);
      }
      break;

    case ADD_MAPPING:
      if (value == null) {
        unsetAddMapping();
      } else {
        setAddMapping((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPLETE:
      return Boolean.valueOf(isComplete());

    case EXIST_MAPPING:
      return getExistMapping();

    case CONFLICT_MAPPING:
      return getConflictMapping();

    case ADD_MAPPING:
      return getAddMapping();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPLETE:
      return isSetComplete();
    case EXIST_MAPPING:
      return isSetExistMapping();
    case CONFLICT_MAPPING:
      return isSetConflictMapping();
    case ADD_MAPPING:
      return isSetAddMapping();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ImportCommodityMapResp)
      return this.equals((ImportCommodityMapResp)that);
    return false;
  }

  public boolean equals(ImportCommodityMapResp that) {
    if (that == null)
      return false;

    boolean this_present_complete = true && this.isSetComplete();
    boolean that_present_complete = true && that.isSetComplete();
    if (this_present_complete || that_present_complete) {
      if (!(this_present_complete && that_present_complete))
        return false;
      if (this.complete != that.complete)
        return false;
    }

    boolean this_present_existMapping = true && this.isSetExistMapping();
    boolean that_present_existMapping = true && that.isSetExistMapping();
    if (this_present_existMapping || that_present_existMapping) {
      if (!(this_present_existMapping && that_present_existMapping))
        return false;
      if (!this.existMapping.equals(that.existMapping))
        return false;
    }

    boolean this_present_conflictMapping = true && this.isSetConflictMapping();
    boolean that_present_conflictMapping = true && that.isSetConflictMapping();
    if (this_present_conflictMapping || that_present_conflictMapping) {
      if (!(this_present_conflictMapping && that_present_conflictMapping))
        return false;
      if (!this.conflictMapping.equals(that.conflictMapping))
        return false;
    }

    boolean this_present_addMapping = true && this.isSetAddMapping();
    boolean that_present_addMapping = true && that.isSetAddMapping();
    if (this_present_addMapping || that_present_addMapping) {
      if (!(this_present_addMapping && that_present_addMapping))
        return false;
      if (!this.addMapping.equals(that.addMapping))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ImportCommodityMapResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetComplete()).compareTo(other.isSetComplete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComplete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.complete, other.complete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExistMapping()).compareTo(other.isSetExistMapping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExistMapping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.existMapping, other.existMapping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConflictMapping()).compareTo(other.isSetConflictMapping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConflictMapping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conflictMapping, other.conflictMapping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddMapping()).compareTo(other.isSetAddMapping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddMapping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addMapping, other.addMapping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ImportCommodityMapResp(");
    boolean first = true;

    if (isSetComplete()) {
      sb.append("complete:");
      sb.append(this.complete);
      first = false;
    }
    if (isSetExistMapping()) {
      if (!first) sb.append(", ");
      sb.append("existMapping:");
      if (this.existMapping == null) {
        sb.append("null");
      } else {
        sb.append(this.existMapping);
      }
      first = false;
    }
    if (isSetConflictMapping()) {
      if (!first) sb.append(", ");
      sb.append("conflictMapping:");
      if (this.conflictMapping == null) {
        sb.append("null");
      } else {
        sb.append(this.conflictMapping);
      }
      first = false;
    }
    if (isSetAddMapping()) {
      if (!first) sb.append(", ");
      sb.append("addMapping:");
      if (this.addMapping == null) {
        sb.append("null");
      } else {
        sb.append(this.addMapping);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImportCommodityMapRespStandardSchemeFactory implements SchemeFactory {
    public ImportCommodityMapRespStandardScheme getScheme() {
      return new ImportCommodityMapRespStandardScheme();
    }
  }

  private static class ImportCommodityMapRespStandardScheme extends StandardScheme<ImportCommodityMapResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImportCommodityMapResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPLETE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.complete = iprot.readBool();
              struct.setCompleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXIST_MAPPING
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                struct.existMapping = new ArrayList<String>(_list104.size);
                for (int _i105 = 0; _i105 < _list104.size; ++_i105)
                {
                  String _elem106;
                  _elem106 = iprot.readString();
                  struct.existMapping.add(_elem106);
                }
                iprot.readListEnd();
              }
              struct.setExistMappingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONFLICT_MAPPING
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list107 = iprot.readListBegin();
                struct.conflictMapping = new ArrayList<String>(_list107.size);
                for (int _i108 = 0; _i108 < _list107.size; ++_i108)
                {
                  String _elem109;
                  _elem109 = iprot.readString();
                  struct.conflictMapping.add(_elem109);
                }
                iprot.readListEnd();
              }
              struct.setConflictMappingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ADD_MAPPING
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list110 = iprot.readListBegin();
                struct.addMapping = new ArrayList<String>(_list110.size);
                for (int _i111 = 0; _i111 < _list110.size; ++_i111)
                {
                  String _elem112;
                  _elem112 = iprot.readString();
                  struct.addMapping.add(_elem112);
                }
                iprot.readListEnd();
              }
              struct.setAddMappingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImportCommodityMapResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetComplete()) {
        oprot.writeFieldBegin(COMPLETE_FIELD_DESC);
        oprot.writeBool(struct.complete);
        oprot.writeFieldEnd();
      }
      if (struct.existMapping != null) {
        if (struct.isSetExistMapping()) {
          oprot.writeFieldBegin(EXIST_MAPPING_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.existMapping.size()));
            for (String _iter113 : struct.existMapping)
            {
              oprot.writeString(_iter113);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.conflictMapping != null) {
        if (struct.isSetConflictMapping()) {
          oprot.writeFieldBegin(CONFLICT_MAPPING_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.conflictMapping.size()));
            for (String _iter114 : struct.conflictMapping)
            {
              oprot.writeString(_iter114);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.addMapping != null) {
        if (struct.isSetAddMapping()) {
          oprot.writeFieldBegin(ADD_MAPPING_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.addMapping.size()));
            for (String _iter115 : struct.addMapping)
            {
              oprot.writeString(_iter115);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImportCommodityMapRespTupleSchemeFactory implements SchemeFactory {
    public ImportCommodityMapRespTupleScheme getScheme() {
      return new ImportCommodityMapRespTupleScheme();
    }
  }

  private static class ImportCommodityMapRespTupleScheme extends TupleScheme<ImportCommodityMapResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImportCommodityMapResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetComplete()) {
        optionals.set(0);
      }
      if (struct.isSetExistMapping()) {
        optionals.set(1);
      }
      if (struct.isSetConflictMapping()) {
        optionals.set(2);
      }
      if (struct.isSetAddMapping()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetComplete()) {
        oprot.writeBool(struct.complete);
      }
      if (struct.isSetExistMapping()) {
        {
          oprot.writeI32(struct.existMapping.size());
          for (String _iter116 : struct.existMapping)
          {
            oprot.writeString(_iter116);
          }
        }
      }
      if (struct.isSetConflictMapping()) {
        {
          oprot.writeI32(struct.conflictMapping.size());
          for (String _iter117 : struct.conflictMapping)
          {
            oprot.writeString(_iter117);
          }
        }
      }
      if (struct.isSetAddMapping()) {
        {
          oprot.writeI32(struct.addMapping.size());
          for (String _iter118 : struct.addMapping)
          {
            oprot.writeString(_iter118);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImportCommodityMapResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.complete = iprot.readBool();
        struct.setCompleteIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.existMapping = new ArrayList<String>(_list119.size);
          for (int _i120 = 0; _i120 < _list119.size; ++_i120)
          {
            String _elem121;
            _elem121 = iprot.readString();
            struct.existMapping.add(_elem121);
          }
        }
        struct.setExistMappingIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list122 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.conflictMapping = new ArrayList<String>(_list122.size);
          for (int _i123 = 0; _i123 < _list122.size; ++_i123)
          {
            String _elem124;
            _elem124 = iprot.readString();
            struct.conflictMapping.add(_elem124);
          }
        }
        struct.setConflictMappingIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.addMapping = new ArrayList<String>(_list125.size);
          for (int _i126 = 0; _i126 < _list125.size; ++_i126)
          {
            String _elem127;
            _elem127 = iprot.readString();
            struct.addMapping.add(_elem127);
          }
        }
        struct.setAddMappingIsSet(true);
      }
    }
  }

}

