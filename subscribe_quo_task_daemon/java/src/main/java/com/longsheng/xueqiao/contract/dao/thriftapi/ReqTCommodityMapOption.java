/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.dao.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqTCommodityMapOption implements org.apache.thrift.TBase<ReqTCommodityMapOption, ReqTCommodityMapOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqTCommodityMapOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqTCommodityMapOption");

  private static final org.apache.thrift.protocol.TField MAP_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("mapIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityIds", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField EXCHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchange", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COMMODITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityCode", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BROKER_ENTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerEntryId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField EDITSTATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("editstatus", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField WORKING_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("workingStatus", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqTCommodityMapOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqTCommodityMapOptionTupleSchemeFactory());
  }

  public List<Integer> mapIds; // optional
  public List<Integer> sledCommodityIds; // optional
  public int platform; // optional
  public String exchange; // optional
  public String commodityType; // optional
  public String commodityCode; // optional
  public int brokerEntryId; // optional
  public int editstatus; // optional
  public int workingStatus; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAP_IDS((short)1, "mapIds"),
    SLED_COMMODITY_IDS((short)2, "sledCommodityIds"),
    PLATFORM((short)4, "platform"),
    EXCHANGE((short)5, "exchange"),
    COMMODITY_TYPE((short)6, "commodityType"),
    COMMODITY_CODE((short)7, "commodityCode"),
    BROKER_ENTRY_ID((short)9, "brokerEntryId"),
    EDITSTATUS((short)14, "editstatus"),
    WORKING_STATUS((short)15, "workingStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAP_IDS
          return MAP_IDS;
        case 2: // SLED_COMMODITY_IDS
          return SLED_COMMODITY_IDS;
        case 4: // PLATFORM
          return PLATFORM;
        case 5: // EXCHANGE
          return EXCHANGE;
        case 6: // COMMODITY_TYPE
          return COMMODITY_TYPE;
        case 7: // COMMODITY_CODE
          return COMMODITY_CODE;
        case 9: // BROKER_ENTRY_ID
          return BROKER_ENTRY_ID;
        case 14: // EDITSTATUS
          return EDITSTATUS;
        case 15: // WORKING_STATUS
          return WORKING_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLATFORM_ISSET_ID = 0;
  private static final int __BROKERENTRYID_ISSET_ID = 1;
  private static final int __EDITSTATUS_ISSET_ID = 2;
  private static final int __WORKINGSTATUS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MAP_IDS,_Fields.SLED_COMMODITY_IDS,_Fields.PLATFORM,_Fields.EXCHANGE,_Fields.COMMODITY_TYPE,_Fields.COMMODITY_CODE,_Fields.BROKER_ENTRY_ID,_Fields.EDITSTATUS,_Fields.WORKING_STATUS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAP_IDS, new org.apache.thrift.meta_data.FieldMetaData("mapIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SLED_COMMODITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCHANGE, new org.apache.thrift.meta_data.FieldMetaData("exchange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("commodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("commodityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BROKER_ENTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerEntryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EDITSTATUS, new org.apache.thrift.meta_data.FieldMetaData("editstatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKING_STATUS, new org.apache.thrift.meta_data.FieldMetaData("workingStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqTCommodityMapOption.class, metaDataMap);
  }

  public ReqTCommodityMapOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqTCommodityMapOption(ReqTCommodityMapOption other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMapIds()) {
      List<Integer> __this__mapIds = new ArrayList<Integer>(other.mapIds);
      this.mapIds = __this__mapIds;
    }
    if (other.isSetSledCommodityIds()) {
      List<Integer> __this__sledCommodityIds = new ArrayList<Integer>(other.sledCommodityIds);
      this.sledCommodityIds = __this__sledCommodityIds;
    }
    this.platform = other.platform;
    if (other.isSetExchange()) {
      this.exchange = other.exchange;
    }
    if (other.isSetCommodityType()) {
      this.commodityType = other.commodityType;
    }
    if (other.isSetCommodityCode()) {
      this.commodityCode = other.commodityCode;
    }
    this.brokerEntryId = other.brokerEntryId;
    this.editstatus = other.editstatus;
    this.workingStatus = other.workingStatus;
  }

  public ReqTCommodityMapOption deepCopy() {
    return new ReqTCommodityMapOption(this);
  }

  @Override
  public void clear() {
    this.mapIds = null;
    this.sledCommodityIds = null;
    setPlatformIsSet(false);
    this.platform = 0;
    this.exchange = null;
    this.commodityType = null;
    this.commodityCode = null;
    setBrokerEntryIdIsSet(false);
    this.brokerEntryId = 0;
    setEditstatusIsSet(false);
    this.editstatus = 0;
    setWorkingStatusIsSet(false);
    this.workingStatus = 0;
  }

  public int getMapIdsSize() {
    return (this.mapIds == null) ? 0 : this.mapIds.size();
  }

  public java.util.Iterator<Integer> getMapIdsIterator() {
    return (this.mapIds == null) ? null : this.mapIds.iterator();
  }

  public void addToMapIds(int elem) {
    if (this.mapIds == null) {
      this.mapIds = new ArrayList<Integer>();
    }
    this.mapIds.add(elem);
  }

  public List<Integer> getMapIds() {
    return this.mapIds;
  }

  public ReqTCommodityMapOption setMapIds(List<Integer> mapIds) {
    this.mapIds = mapIds;
    return this;
  }

  public void unsetMapIds() {
    this.mapIds = null;
  }

  /** Returns true if field mapIds is set (has been assigned a value) and false otherwise */
  public boolean isSetMapIds() {
    return this.mapIds != null;
  }

  public void setMapIdsIsSet(boolean value) {
    if (!value) {
      this.mapIds = null;
    }
  }

  public int getSledCommodityIdsSize() {
    return (this.sledCommodityIds == null) ? 0 : this.sledCommodityIds.size();
  }

  public java.util.Iterator<Integer> getSledCommodityIdsIterator() {
    return (this.sledCommodityIds == null) ? null : this.sledCommodityIds.iterator();
  }

  public void addToSledCommodityIds(int elem) {
    if (this.sledCommodityIds == null) {
      this.sledCommodityIds = new ArrayList<Integer>();
    }
    this.sledCommodityIds.add(elem);
  }

  public List<Integer> getSledCommodityIds() {
    return this.sledCommodityIds;
  }

  public ReqTCommodityMapOption setSledCommodityIds(List<Integer> sledCommodityIds) {
    this.sledCommodityIds = sledCommodityIds;
    return this;
  }

  public void unsetSledCommodityIds() {
    this.sledCommodityIds = null;
  }

  /** Returns true if field sledCommodityIds is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityIds() {
    return this.sledCommodityIds != null;
  }

  public void setSledCommodityIdsIsSet(boolean value) {
    if (!value) {
      this.sledCommodityIds = null;
    }
  }

  public int getPlatform() {
    return this.platform;
  }

  public ReqTCommodityMapOption setPlatform(int platform) {
    this.platform = platform;
    setPlatformIsSet(true);
    return this;
  }

  public void unsetPlatform() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLATFORM_ISSET_ID);
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return EncodingUtils.testBit(__isset_bitfield, __PLATFORM_ISSET_ID);
  }

  public void setPlatformIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLATFORM_ISSET_ID, value);
  }

  public String getExchange() {
    return this.exchange;
  }

  public ReqTCommodityMapOption setExchange(String exchange) {
    this.exchange = exchange;
    return this;
  }

  public void unsetExchange() {
    this.exchange = null;
  }

  /** Returns true if field exchange is set (has been assigned a value) and false otherwise */
  public boolean isSetExchange() {
    return this.exchange != null;
  }

  public void setExchangeIsSet(boolean value) {
    if (!value) {
      this.exchange = null;
    }
  }

  public String getCommodityType() {
    return this.commodityType;
  }

  public ReqTCommodityMapOption setCommodityType(String commodityType) {
    this.commodityType = commodityType;
    return this;
  }

  public void unsetCommodityType() {
    this.commodityType = null;
  }

  /** Returns true if field commodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityType() {
    return this.commodityType != null;
  }

  public void setCommodityTypeIsSet(boolean value) {
    if (!value) {
      this.commodityType = null;
    }
  }

  public String getCommodityCode() {
    return this.commodityCode;
  }

  public ReqTCommodityMapOption setCommodityCode(String commodityCode) {
    this.commodityCode = commodityCode;
    return this;
  }

  public void unsetCommodityCode() {
    this.commodityCode = null;
  }

  /** Returns true if field commodityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityCode() {
    return this.commodityCode != null;
  }

  public void setCommodityCodeIsSet(boolean value) {
    if (!value) {
      this.commodityCode = null;
    }
  }

  public int getBrokerEntryId() {
    return this.brokerEntryId;
  }

  public ReqTCommodityMapOption setBrokerEntryId(int brokerEntryId) {
    this.brokerEntryId = brokerEntryId;
    setBrokerEntryIdIsSet(true);
    return this;
  }

  public void unsetBrokerEntryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BROKERENTRYID_ISSET_ID);
  }

  /** Returns true if field brokerEntryId is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerEntryId() {
    return EncodingUtils.testBit(__isset_bitfield, __BROKERENTRYID_ISSET_ID);
  }

  public void setBrokerEntryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BROKERENTRYID_ISSET_ID, value);
  }

  public int getEditstatus() {
    return this.editstatus;
  }

  public ReqTCommodityMapOption setEditstatus(int editstatus) {
    this.editstatus = editstatus;
    setEditstatusIsSet(true);
    return this;
  }

  public void unsetEditstatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EDITSTATUS_ISSET_ID);
  }

  /** Returns true if field editstatus is set (has been assigned a value) and false otherwise */
  public boolean isSetEditstatus() {
    return EncodingUtils.testBit(__isset_bitfield, __EDITSTATUS_ISSET_ID);
  }

  public void setEditstatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EDITSTATUS_ISSET_ID, value);
  }

  public int getWorkingStatus() {
    return this.workingStatus;
  }

  public ReqTCommodityMapOption setWorkingStatus(int workingStatus) {
    this.workingStatus = workingStatus;
    setWorkingStatusIsSet(true);
    return this;
  }

  public void unsetWorkingStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKINGSTATUS_ISSET_ID);
  }

  /** Returns true if field workingStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkingStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKINGSTATUS_ISSET_ID);
  }

  public void setWorkingStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKINGSTATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAP_IDS:
      if (value == null) {
        unsetMapIds();
      } else {
        setMapIds((List<Integer>)value);
      }
      break;

    case SLED_COMMODITY_IDS:
      if (value == null) {
        unsetSledCommodityIds();
      } else {
        setSledCommodityIds((List<Integer>)value);
      }
      break;

    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((Integer)value);
      }
      break;

    case EXCHANGE:
      if (value == null) {
        unsetExchange();
      } else {
        setExchange((String)value);
      }
      break;

    case COMMODITY_TYPE:
      if (value == null) {
        unsetCommodityType();
      } else {
        setCommodityType((String)value);
      }
      break;

    case COMMODITY_CODE:
      if (value == null) {
        unsetCommodityCode();
      } else {
        setCommodityCode((String)value);
      }
      break;

    case BROKER_ENTRY_ID:
      if (value == null) {
        unsetBrokerEntryId();
      } else {
        setBrokerEntryId((Integer)value);
      }
      break;

    case EDITSTATUS:
      if (value == null) {
        unsetEditstatus();
      } else {
        setEditstatus((Integer)value);
      }
      break;

    case WORKING_STATUS:
      if (value == null) {
        unsetWorkingStatus();
      } else {
        setWorkingStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAP_IDS:
      return getMapIds();

    case SLED_COMMODITY_IDS:
      return getSledCommodityIds();

    case PLATFORM:
      return Integer.valueOf(getPlatform());

    case EXCHANGE:
      return getExchange();

    case COMMODITY_TYPE:
      return getCommodityType();

    case COMMODITY_CODE:
      return getCommodityCode();

    case BROKER_ENTRY_ID:
      return Integer.valueOf(getBrokerEntryId());

    case EDITSTATUS:
      return Integer.valueOf(getEditstatus());

    case WORKING_STATUS:
      return Integer.valueOf(getWorkingStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAP_IDS:
      return isSetMapIds();
    case SLED_COMMODITY_IDS:
      return isSetSledCommodityIds();
    case PLATFORM:
      return isSetPlatform();
    case EXCHANGE:
      return isSetExchange();
    case COMMODITY_TYPE:
      return isSetCommodityType();
    case COMMODITY_CODE:
      return isSetCommodityCode();
    case BROKER_ENTRY_ID:
      return isSetBrokerEntryId();
    case EDITSTATUS:
      return isSetEditstatus();
    case WORKING_STATUS:
      return isSetWorkingStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqTCommodityMapOption)
      return this.equals((ReqTCommodityMapOption)that);
    return false;
  }

  public boolean equals(ReqTCommodityMapOption that) {
    if (that == null)
      return false;

    boolean this_present_mapIds = true && this.isSetMapIds();
    boolean that_present_mapIds = true && that.isSetMapIds();
    if (this_present_mapIds || that_present_mapIds) {
      if (!(this_present_mapIds && that_present_mapIds))
        return false;
      if (!this.mapIds.equals(that.mapIds))
        return false;
    }

    boolean this_present_sledCommodityIds = true && this.isSetSledCommodityIds();
    boolean that_present_sledCommodityIds = true && that.isSetSledCommodityIds();
    if (this_present_sledCommodityIds || that_present_sledCommodityIds) {
      if (!(this_present_sledCommodityIds && that_present_sledCommodityIds))
        return false;
      if (!this.sledCommodityIds.equals(that.sledCommodityIds))
        return false;
    }

    boolean this_present_platform = true && this.isSetPlatform();
    boolean that_present_platform = true && that.isSetPlatform();
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (this.platform != that.platform)
        return false;
    }

    boolean this_present_exchange = true && this.isSetExchange();
    boolean that_present_exchange = true && that.isSetExchange();
    if (this_present_exchange || that_present_exchange) {
      if (!(this_present_exchange && that_present_exchange))
        return false;
      if (!this.exchange.equals(that.exchange))
        return false;
    }

    boolean this_present_commodityType = true && this.isSetCommodityType();
    boolean that_present_commodityType = true && that.isSetCommodityType();
    if (this_present_commodityType || that_present_commodityType) {
      if (!(this_present_commodityType && that_present_commodityType))
        return false;
      if (!this.commodityType.equals(that.commodityType))
        return false;
    }

    boolean this_present_commodityCode = true && this.isSetCommodityCode();
    boolean that_present_commodityCode = true && that.isSetCommodityCode();
    if (this_present_commodityCode || that_present_commodityCode) {
      if (!(this_present_commodityCode && that_present_commodityCode))
        return false;
      if (!this.commodityCode.equals(that.commodityCode))
        return false;
    }

    boolean this_present_brokerEntryId = true && this.isSetBrokerEntryId();
    boolean that_present_brokerEntryId = true && that.isSetBrokerEntryId();
    if (this_present_brokerEntryId || that_present_brokerEntryId) {
      if (!(this_present_brokerEntryId && that_present_brokerEntryId))
        return false;
      if (this.brokerEntryId != that.brokerEntryId)
        return false;
    }

    boolean this_present_editstatus = true && this.isSetEditstatus();
    boolean that_present_editstatus = true && that.isSetEditstatus();
    if (this_present_editstatus || that_present_editstatus) {
      if (!(this_present_editstatus && that_present_editstatus))
        return false;
      if (this.editstatus != that.editstatus)
        return false;
    }

    boolean this_present_workingStatus = true && this.isSetWorkingStatus();
    boolean that_present_workingStatus = true && that.isSetWorkingStatus();
    if (this_present_workingStatus || that_present_workingStatus) {
      if (!(this_present_workingStatus && that_present_workingStatus))
        return false;
      if (this.workingStatus != that.workingStatus)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqTCommodityMapOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMapIds()).compareTo(other.isSetMapIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapIds, other.mapIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityIds()).compareTo(other.isSetSledCommodityIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityIds, other.sledCommodityIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchange()).compareTo(other.isSetExchange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchange, other.exchange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityType()).compareTo(other.isSetCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityType, other.commodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityCode()).compareTo(other.isSetCommodityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityCode, other.commodityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerEntryId()).compareTo(other.isSetBrokerEntryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerEntryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerEntryId, other.brokerEntryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEditstatus()).compareTo(other.isSetEditstatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEditstatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.editstatus, other.editstatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkingStatus()).compareTo(other.isSetWorkingStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkingStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workingStatus, other.workingStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqTCommodityMapOption(");
    boolean first = true;

    if (isSetMapIds()) {
      sb.append("mapIds:");
      if (this.mapIds == null) {
        sb.append("null");
      } else {
        sb.append(this.mapIds);
      }
      first = false;
    }
    if (isSetSledCommodityIds()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityIds:");
      if (this.sledCommodityIds == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityIds);
      }
      first = false;
    }
    if (isSetPlatform()) {
      if (!first) sb.append(", ");
      sb.append("platform:");
      sb.append(this.platform);
      first = false;
    }
    if (isSetExchange()) {
      if (!first) sb.append(", ");
      sb.append("exchange:");
      if (this.exchange == null) {
        sb.append("null");
      } else {
        sb.append(this.exchange);
      }
      first = false;
    }
    if (isSetCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("commodityType:");
      if (this.commodityType == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityType);
      }
      first = false;
    }
    if (isSetCommodityCode()) {
      if (!first) sb.append(", ");
      sb.append("commodityCode:");
      if (this.commodityCode == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityCode);
      }
      first = false;
    }
    if (isSetBrokerEntryId()) {
      if (!first) sb.append(", ");
      sb.append("brokerEntryId:");
      sb.append(this.brokerEntryId);
      first = false;
    }
    if (isSetEditstatus()) {
      if (!first) sb.append(", ");
      sb.append("editstatus:");
      sb.append(this.editstatus);
      first = false;
    }
    if (isSetWorkingStatus()) {
      if (!first) sb.append(", ");
      sb.append("workingStatus:");
      sb.append(this.workingStatus);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqTCommodityMapOptionStandardSchemeFactory implements SchemeFactory {
    public ReqTCommodityMapOptionStandardScheme getScheme() {
      return new ReqTCommodityMapOptionStandardScheme();
    }
  }

  private static class ReqTCommodityMapOptionStandardScheme extends StandardScheme<ReqTCommodityMapOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqTCommodityMapOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAP_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                struct.mapIds = new ArrayList<Integer>(_list96.size);
                for (int _i97 = 0; _i97 < _list96.size; ++_i97)
                {
                  int _elem98;
                  _elem98 = iprot.readI32();
                  struct.mapIds.add(_elem98);
                }
                iprot.readListEnd();
              }
              struct.setMapIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_COMMODITY_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list99 = iprot.readListBegin();
                struct.sledCommodityIds = new ArrayList<Integer>(_list99.size);
                for (int _i100 = 0; _i100 < _list99.size; ++_i100)
                {
                  int _elem101;
                  _elem101 = iprot.readI32();
                  struct.sledCommodityIds.add(_elem101);
                }
                iprot.readListEnd();
              }
              struct.setSledCommodityIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platform = iprot.readI32();
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXCHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchange = iprot.readString();
              struct.setExchangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityType = iprot.readString();
              struct.setCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMMODITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityCode = iprot.readString();
              struct.setCommodityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BROKER_ENTRY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brokerEntryId = iprot.readI32();
              struct.setBrokerEntryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EDITSTATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.editstatus = iprot.readI32();
              struct.setEditstatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WORKING_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.workingStatus = iprot.readI32();
              struct.setWorkingStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqTCommodityMapOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mapIds != null) {
        if (struct.isSetMapIds()) {
          oprot.writeFieldBegin(MAP_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.mapIds.size()));
            for (int _iter102 : struct.mapIds)
            {
              oprot.writeI32(_iter102);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledCommodityIds != null) {
        if (struct.isSetSledCommodityIds()) {
          oprot.writeFieldBegin(SLED_COMMODITY_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sledCommodityIds.size()));
            for (int _iter103 : struct.sledCommodityIds)
            {
              oprot.writeI32(_iter103);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPlatform()) {
        oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
        oprot.writeI32(struct.platform);
        oprot.writeFieldEnd();
      }
      if (struct.exchange != null) {
        if (struct.isSetExchange()) {
          oprot.writeFieldBegin(EXCHANGE_FIELD_DESC);
          oprot.writeString(struct.exchange);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityType != null) {
        if (struct.isSetCommodityType()) {
          oprot.writeFieldBegin(COMMODITY_TYPE_FIELD_DESC);
          oprot.writeString(struct.commodityType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityCode != null) {
        if (struct.isSetCommodityCode()) {
          oprot.writeFieldBegin(COMMODITY_CODE_FIELD_DESC);
          oprot.writeString(struct.commodityCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBrokerEntryId()) {
        oprot.writeFieldBegin(BROKER_ENTRY_ID_FIELD_DESC);
        oprot.writeI32(struct.brokerEntryId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEditstatus()) {
        oprot.writeFieldBegin(EDITSTATUS_FIELD_DESC);
        oprot.writeI32(struct.editstatus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWorkingStatus()) {
        oprot.writeFieldBegin(WORKING_STATUS_FIELD_DESC);
        oprot.writeI32(struct.workingStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqTCommodityMapOptionTupleSchemeFactory implements SchemeFactory {
    public ReqTCommodityMapOptionTupleScheme getScheme() {
      return new ReqTCommodityMapOptionTupleScheme();
    }
  }

  private static class ReqTCommodityMapOptionTupleScheme extends TupleScheme<ReqTCommodityMapOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqTCommodityMapOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMapIds()) {
        optionals.set(0);
      }
      if (struct.isSetSledCommodityIds()) {
        optionals.set(1);
      }
      if (struct.isSetPlatform()) {
        optionals.set(2);
      }
      if (struct.isSetExchange()) {
        optionals.set(3);
      }
      if (struct.isSetCommodityType()) {
        optionals.set(4);
      }
      if (struct.isSetCommodityCode()) {
        optionals.set(5);
      }
      if (struct.isSetBrokerEntryId()) {
        optionals.set(6);
      }
      if (struct.isSetEditstatus()) {
        optionals.set(7);
      }
      if (struct.isSetWorkingStatus()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetMapIds()) {
        {
          oprot.writeI32(struct.mapIds.size());
          for (int _iter104 : struct.mapIds)
          {
            oprot.writeI32(_iter104);
          }
        }
      }
      if (struct.isSetSledCommodityIds()) {
        {
          oprot.writeI32(struct.sledCommodityIds.size());
          for (int _iter105 : struct.sledCommodityIds)
          {
            oprot.writeI32(_iter105);
          }
        }
      }
      if (struct.isSetPlatform()) {
        oprot.writeI32(struct.platform);
      }
      if (struct.isSetExchange()) {
        oprot.writeString(struct.exchange);
      }
      if (struct.isSetCommodityType()) {
        oprot.writeString(struct.commodityType);
      }
      if (struct.isSetCommodityCode()) {
        oprot.writeString(struct.commodityCode);
      }
      if (struct.isSetBrokerEntryId()) {
        oprot.writeI32(struct.brokerEntryId);
      }
      if (struct.isSetEditstatus()) {
        oprot.writeI32(struct.editstatus);
      }
      if (struct.isSetWorkingStatus()) {
        oprot.writeI32(struct.workingStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqTCommodityMapOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.mapIds = new ArrayList<Integer>(_list106.size);
          for (int _i107 = 0; _i107 < _list106.size; ++_i107)
          {
            int _elem108;
            _elem108 = iprot.readI32();
            struct.mapIds.add(_elem108);
          }
        }
        struct.setMapIdsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.sledCommodityIds = new ArrayList<Integer>(_list109.size);
          for (int _i110 = 0; _i110 < _list109.size; ++_i110)
          {
            int _elem111;
            _elem111 = iprot.readI32();
            struct.sledCommodityIds.add(_elem111);
          }
        }
        struct.setSledCommodityIdsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.platform = iprot.readI32();
        struct.setPlatformIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exchange = iprot.readString();
        struct.setExchangeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.commodityType = iprot.readString();
        struct.setCommodityTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.commodityCode = iprot.readString();
        struct.setCommodityCodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.brokerEntryId = iprot.readI32();
        struct.setBrokerEntryIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.editstatus = iprot.readI32();
        struct.setEditstatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.workingStatus = iprot.readI32();
        struct.setWorkingStatusIsSet(true);
      }
    }
  }

}

