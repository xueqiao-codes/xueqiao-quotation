/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.dao.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqTSledExchangeOption implements org.apache.thrift.TBase<ReqTSledExchangeOption, ReqTSledExchangeOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqTSledExchangeOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqTSledExchangeOption");

  private static final org.apache.thrift.protocol.TField SLED_EXCHANGE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sledExchangeIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField EXCHANGE_MIC_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeMic", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXCHANGE_MIC_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeMicPartical", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField NAME_INSTITUTION_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("nameInstitutionPartical", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField ACRONYM_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("acronymPartical", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CN_ACRONYM_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("cnAcronymPartical", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField CN_NAME_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("cnNamePartical", org.apache.thrift.protocol.TType.STRING, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqTSledExchangeOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqTSledExchangeOptionTupleSchemeFactory());
  }

  public List<Integer> sledExchangeIds; // optional
  public String exchangeMic; // optional
  public String exchangeMicPartical; // optional
  public String nameInstitutionPartical; // optional
  public String acronymPartical; // optional
  public String cnAcronymPartical; // optional
  public String cnNamePartical; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_EXCHANGE_IDS((short)1, "sledExchangeIds"),
    EXCHANGE_MIC((short)2, "exchangeMic"),
    EXCHANGE_MIC_PARTICAL((short)20, "exchangeMicPartical"),
    NAME_INSTITUTION_PARTICAL((short)21, "nameInstitutionPartical"),
    ACRONYM_PARTICAL((short)22, "acronymPartical"),
    CN_ACRONYM_PARTICAL((short)23, "cnAcronymPartical"),
    CN_NAME_PARTICAL((short)24, "cnNamePartical");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_EXCHANGE_IDS
          return SLED_EXCHANGE_IDS;
        case 2: // EXCHANGE_MIC
          return EXCHANGE_MIC;
        case 20: // EXCHANGE_MIC_PARTICAL
          return EXCHANGE_MIC_PARTICAL;
        case 21: // NAME_INSTITUTION_PARTICAL
          return NAME_INSTITUTION_PARTICAL;
        case 22: // ACRONYM_PARTICAL
          return ACRONYM_PARTICAL;
        case 23: // CN_ACRONYM_PARTICAL
          return CN_ACRONYM_PARTICAL;
        case 24: // CN_NAME_PARTICAL
          return CN_NAME_PARTICAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.SLED_EXCHANGE_IDS,_Fields.EXCHANGE_MIC,_Fields.EXCHANGE_MIC_PARTICAL,_Fields.NAME_INSTITUTION_PARTICAL,_Fields.ACRONYM_PARTICAL,_Fields.CN_ACRONYM_PARTICAL,_Fields.CN_NAME_PARTICAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_EXCHANGE_IDS, new org.apache.thrift.meta_data.FieldMetaData("sledExchangeIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.EXCHANGE_MIC, new org.apache.thrift.meta_data.FieldMetaData("exchangeMic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCHANGE_MIC_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("exchangeMicPartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_INSTITUTION_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("nameInstitutionPartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACRONYM_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("acronymPartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CN_ACRONYM_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("cnAcronymPartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CN_NAME_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("cnNamePartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqTSledExchangeOption.class, metaDataMap);
  }

  public ReqTSledExchangeOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqTSledExchangeOption(ReqTSledExchangeOption other) {
    if (other.isSetSledExchangeIds()) {
      List<Integer> __this__sledExchangeIds = new ArrayList<Integer>(other.sledExchangeIds);
      this.sledExchangeIds = __this__sledExchangeIds;
    }
    if (other.isSetExchangeMic()) {
      this.exchangeMic = other.exchangeMic;
    }
    if (other.isSetExchangeMicPartical()) {
      this.exchangeMicPartical = other.exchangeMicPartical;
    }
    if (other.isSetNameInstitutionPartical()) {
      this.nameInstitutionPartical = other.nameInstitutionPartical;
    }
    if (other.isSetAcronymPartical()) {
      this.acronymPartical = other.acronymPartical;
    }
    if (other.isSetCnAcronymPartical()) {
      this.cnAcronymPartical = other.cnAcronymPartical;
    }
    if (other.isSetCnNamePartical()) {
      this.cnNamePartical = other.cnNamePartical;
    }
  }

  public ReqTSledExchangeOption deepCopy() {
    return new ReqTSledExchangeOption(this);
  }

  @Override
  public void clear() {
    this.sledExchangeIds = null;
    this.exchangeMic = null;
    this.exchangeMicPartical = null;
    this.nameInstitutionPartical = null;
    this.acronymPartical = null;
    this.cnAcronymPartical = null;
    this.cnNamePartical = null;
  }

  public int getSledExchangeIdsSize() {
    return (this.sledExchangeIds == null) ? 0 : this.sledExchangeIds.size();
  }

  public java.util.Iterator<Integer> getSledExchangeIdsIterator() {
    return (this.sledExchangeIds == null) ? null : this.sledExchangeIds.iterator();
  }

  public void addToSledExchangeIds(int elem) {
    if (this.sledExchangeIds == null) {
      this.sledExchangeIds = new ArrayList<Integer>();
    }
    this.sledExchangeIds.add(elem);
  }

  public List<Integer> getSledExchangeIds() {
    return this.sledExchangeIds;
  }

  public ReqTSledExchangeOption setSledExchangeIds(List<Integer> sledExchangeIds) {
    this.sledExchangeIds = sledExchangeIds;
    return this;
  }

  public void unsetSledExchangeIds() {
    this.sledExchangeIds = null;
  }

  /** Returns true if field sledExchangeIds is set (has been assigned a value) and false otherwise */
  public boolean isSetSledExchangeIds() {
    return this.sledExchangeIds != null;
  }

  public void setSledExchangeIdsIsSet(boolean value) {
    if (!value) {
      this.sledExchangeIds = null;
    }
  }

  public String getExchangeMic() {
    return this.exchangeMic;
  }

  public ReqTSledExchangeOption setExchangeMic(String exchangeMic) {
    this.exchangeMic = exchangeMic;
    return this;
  }

  public void unsetExchangeMic() {
    this.exchangeMic = null;
  }

  /** Returns true if field exchangeMic is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeMic() {
    return this.exchangeMic != null;
  }

  public void setExchangeMicIsSet(boolean value) {
    if (!value) {
      this.exchangeMic = null;
    }
  }

  public String getExchangeMicPartical() {
    return this.exchangeMicPartical;
  }

  public ReqTSledExchangeOption setExchangeMicPartical(String exchangeMicPartical) {
    this.exchangeMicPartical = exchangeMicPartical;
    return this;
  }

  public void unsetExchangeMicPartical() {
    this.exchangeMicPartical = null;
  }

  /** Returns true if field exchangeMicPartical is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeMicPartical() {
    return this.exchangeMicPartical != null;
  }

  public void setExchangeMicParticalIsSet(boolean value) {
    if (!value) {
      this.exchangeMicPartical = null;
    }
  }

  public String getNameInstitutionPartical() {
    return this.nameInstitutionPartical;
  }

  public ReqTSledExchangeOption setNameInstitutionPartical(String nameInstitutionPartical) {
    this.nameInstitutionPartical = nameInstitutionPartical;
    return this;
  }

  public void unsetNameInstitutionPartical() {
    this.nameInstitutionPartical = null;
  }

  /** Returns true if field nameInstitutionPartical is set (has been assigned a value) and false otherwise */
  public boolean isSetNameInstitutionPartical() {
    return this.nameInstitutionPartical != null;
  }

  public void setNameInstitutionParticalIsSet(boolean value) {
    if (!value) {
      this.nameInstitutionPartical = null;
    }
  }

  public String getAcronymPartical() {
    return this.acronymPartical;
  }

  public ReqTSledExchangeOption setAcronymPartical(String acronymPartical) {
    this.acronymPartical = acronymPartical;
    return this;
  }

  public void unsetAcronymPartical() {
    this.acronymPartical = null;
  }

  /** Returns true if field acronymPartical is set (has been assigned a value) and false otherwise */
  public boolean isSetAcronymPartical() {
    return this.acronymPartical != null;
  }

  public void setAcronymParticalIsSet(boolean value) {
    if (!value) {
      this.acronymPartical = null;
    }
  }

  public String getCnAcronymPartical() {
    return this.cnAcronymPartical;
  }

  public ReqTSledExchangeOption setCnAcronymPartical(String cnAcronymPartical) {
    this.cnAcronymPartical = cnAcronymPartical;
    return this;
  }

  public void unsetCnAcronymPartical() {
    this.cnAcronymPartical = null;
  }

  /** Returns true if field cnAcronymPartical is set (has been assigned a value) and false otherwise */
  public boolean isSetCnAcronymPartical() {
    return this.cnAcronymPartical != null;
  }

  public void setCnAcronymParticalIsSet(boolean value) {
    if (!value) {
      this.cnAcronymPartical = null;
    }
  }

  public String getCnNamePartical() {
    return this.cnNamePartical;
  }

  public ReqTSledExchangeOption setCnNamePartical(String cnNamePartical) {
    this.cnNamePartical = cnNamePartical;
    return this;
  }

  public void unsetCnNamePartical() {
    this.cnNamePartical = null;
  }

  /** Returns true if field cnNamePartical is set (has been assigned a value) and false otherwise */
  public boolean isSetCnNamePartical() {
    return this.cnNamePartical != null;
  }

  public void setCnNameParticalIsSet(boolean value) {
    if (!value) {
      this.cnNamePartical = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_EXCHANGE_IDS:
      if (value == null) {
        unsetSledExchangeIds();
      } else {
        setSledExchangeIds((List<Integer>)value);
      }
      break;

    case EXCHANGE_MIC:
      if (value == null) {
        unsetExchangeMic();
      } else {
        setExchangeMic((String)value);
      }
      break;

    case EXCHANGE_MIC_PARTICAL:
      if (value == null) {
        unsetExchangeMicPartical();
      } else {
        setExchangeMicPartical((String)value);
      }
      break;

    case NAME_INSTITUTION_PARTICAL:
      if (value == null) {
        unsetNameInstitutionPartical();
      } else {
        setNameInstitutionPartical((String)value);
      }
      break;

    case ACRONYM_PARTICAL:
      if (value == null) {
        unsetAcronymPartical();
      } else {
        setAcronymPartical((String)value);
      }
      break;

    case CN_ACRONYM_PARTICAL:
      if (value == null) {
        unsetCnAcronymPartical();
      } else {
        setCnAcronymPartical((String)value);
      }
      break;

    case CN_NAME_PARTICAL:
      if (value == null) {
        unsetCnNamePartical();
      } else {
        setCnNamePartical((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_EXCHANGE_IDS:
      return getSledExchangeIds();

    case EXCHANGE_MIC:
      return getExchangeMic();

    case EXCHANGE_MIC_PARTICAL:
      return getExchangeMicPartical();

    case NAME_INSTITUTION_PARTICAL:
      return getNameInstitutionPartical();

    case ACRONYM_PARTICAL:
      return getAcronymPartical();

    case CN_ACRONYM_PARTICAL:
      return getCnAcronymPartical();

    case CN_NAME_PARTICAL:
      return getCnNamePartical();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_EXCHANGE_IDS:
      return isSetSledExchangeIds();
    case EXCHANGE_MIC:
      return isSetExchangeMic();
    case EXCHANGE_MIC_PARTICAL:
      return isSetExchangeMicPartical();
    case NAME_INSTITUTION_PARTICAL:
      return isSetNameInstitutionPartical();
    case ACRONYM_PARTICAL:
      return isSetAcronymPartical();
    case CN_ACRONYM_PARTICAL:
      return isSetCnAcronymPartical();
    case CN_NAME_PARTICAL:
      return isSetCnNamePartical();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqTSledExchangeOption)
      return this.equals((ReqTSledExchangeOption)that);
    return false;
  }

  public boolean equals(ReqTSledExchangeOption that) {
    if (that == null)
      return false;

    boolean this_present_sledExchangeIds = true && this.isSetSledExchangeIds();
    boolean that_present_sledExchangeIds = true && that.isSetSledExchangeIds();
    if (this_present_sledExchangeIds || that_present_sledExchangeIds) {
      if (!(this_present_sledExchangeIds && that_present_sledExchangeIds))
        return false;
      if (!this.sledExchangeIds.equals(that.sledExchangeIds))
        return false;
    }

    boolean this_present_exchangeMic = true && this.isSetExchangeMic();
    boolean that_present_exchangeMic = true && that.isSetExchangeMic();
    if (this_present_exchangeMic || that_present_exchangeMic) {
      if (!(this_present_exchangeMic && that_present_exchangeMic))
        return false;
      if (!this.exchangeMic.equals(that.exchangeMic))
        return false;
    }

    boolean this_present_exchangeMicPartical = true && this.isSetExchangeMicPartical();
    boolean that_present_exchangeMicPartical = true && that.isSetExchangeMicPartical();
    if (this_present_exchangeMicPartical || that_present_exchangeMicPartical) {
      if (!(this_present_exchangeMicPartical && that_present_exchangeMicPartical))
        return false;
      if (!this.exchangeMicPartical.equals(that.exchangeMicPartical))
        return false;
    }

    boolean this_present_nameInstitutionPartical = true && this.isSetNameInstitutionPartical();
    boolean that_present_nameInstitutionPartical = true && that.isSetNameInstitutionPartical();
    if (this_present_nameInstitutionPartical || that_present_nameInstitutionPartical) {
      if (!(this_present_nameInstitutionPartical && that_present_nameInstitutionPartical))
        return false;
      if (!this.nameInstitutionPartical.equals(that.nameInstitutionPartical))
        return false;
    }

    boolean this_present_acronymPartical = true && this.isSetAcronymPartical();
    boolean that_present_acronymPartical = true && that.isSetAcronymPartical();
    if (this_present_acronymPartical || that_present_acronymPartical) {
      if (!(this_present_acronymPartical && that_present_acronymPartical))
        return false;
      if (!this.acronymPartical.equals(that.acronymPartical))
        return false;
    }

    boolean this_present_cnAcronymPartical = true && this.isSetCnAcronymPartical();
    boolean that_present_cnAcronymPartical = true && that.isSetCnAcronymPartical();
    if (this_present_cnAcronymPartical || that_present_cnAcronymPartical) {
      if (!(this_present_cnAcronymPartical && that_present_cnAcronymPartical))
        return false;
      if (!this.cnAcronymPartical.equals(that.cnAcronymPartical))
        return false;
    }

    boolean this_present_cnNamePartical = true && this.isSetCnNamePartical();
    boolean that_present_cnNamePartical = true && that.isSetCnNamePartical();
    if (this_present_cnNamePartical || that_present_cnNamePartical) {
      if (!(this_present_cnNamePartical && that_present_cnNamePartical))
        return false;
      if (!this.cnNamePartical.equals(that.cnNamePartical))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqTSledExchangeOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledExchangeIds()).compareTo(other.isSetSledExchangeIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledExchangeIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledExchangeIds, other.sledExchangeIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeMic()).compareTo(other.isSetExchangeMic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeMic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeMic, other.exchangeMic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeMicPartical()).compareTo(other.isSetExchangeMicPartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeMicPartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeMicPartical, other.exchangeMicPartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameInstitutionPartical()).compareTo(other.isSetNameInstitutionPartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameInstitutionPartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameInstitutionPartical, other.nameInstitutionPartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcronymPartical()).compareTo(other.isSetAcronymPartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcronymPartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acronymPartical, other.acronymPartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnAcronymPartical()).compareTo(other.isSetCnAcronymPartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnAcronymPartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnAcronymPartical, other.cnAcronymPartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnNamePartical()).compareTo(other.isSetCnNamePartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnNamePartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnNamePartical, other.cnNamePartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqTSledExchangeOption(");
    boolean first = true;

    if (isSetSledExchangeIds()) {
      sb.append("sledExchangeIds:");
      if (this.sledExchangeIds == null) {
        sb.append("null");
      } else {
        sb.append(this.sledExchangeIds);
      }
      first = false;
    }
    if (isSetExchangeMic()) {
      if (!first) sb.append(", ");
      sb.append("exchangeMic:");
      if (this.exchangeMic == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeMic);
      }
      first = false;
    }
    if (isSetExchangeMicPartical()) {
      if (!first) sb.append(", ");
      sb.append("exchangeMicPartical:");
      if (this.exchangeMicPartical == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeMicPartical);
      }
      first = false;
    }
    if (isSetNameInstitutionPartical()) {
      if (!first) sb.append(", ");
      sb.append("nameInstitutionPartical:");
      if (this.nameInstitutionPartical == null) {
        sb.append("null");
      } else {
        sb.append(this.nameInstitutionPartical);
      }
      first = false;
    }
    if (isSetAcronymPartical()) {
      if (!first) sb.append(", ");
      sb.append("acronymPartical:");
      if (this.acronymPartical == null) {
        sb.append("null");
      } else {
        sb.append(this.acronymPartical);
      }
      first = false;
    }
    if (isSetCnAcronymPartical()) {
      if (!first) sb.append(", ");
      sb.append("cnAcronymPartical:");
      if (this.cnAcronymPartical == null) {
        sb.append("null");
      } else {
        sb.append(this.cnAcronymPartical);
      }
      first = false;
    }
    if (isSetCnNamePartical()) {
      if (!first) sb.append(", ");
      sb.append("cnNamePartical:");
      if (this.cnNamePartical == null) {
        sb.append("null");
      } else {
        sb.append(this.cnNamePartical);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqTSledExchangeOptionStandardSchemeFactory implements SchemeFactory {
    public ReqTSledExchangeOptionStandardScheme getScheme() {
      return new ReqTSledExchangeOptionStandardScheme();
    }
  }

  private static class ReqTSledExchangeOptionStandardScheme extends StandardScheme<ReqTSledExchangeOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqTSledExchangeOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_EXCHANGE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                struct.sledExchangeIds = new ArrayList<Integer>(_list168.size);
                for (int _i169 = 0; _i169 < _list168.size; ++_i169)
                {
                  int _elem170;
                  _elem170 = iprot.readI32();
                  struct.sledExchangeIds.add(_elem170);
                }
                iprot.readListEnd();
              }
              struct.setSledExchangeIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCHANGE_MIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeMic = iprot.readString();
              struct.setExchangeMicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // EXCHANGE_MIC_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeMicPartical = iprot.readString();
              struct.setExchangeMicParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // NAME_INSTITUTION_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameInstitutionPartical = iprot.readString();
              struct.setNameInstitutionParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ACRONYM_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acronymPartical = iprot.readString();
              struct.setAcronymParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CN_ACRONYM_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnAcronymPartical = iprot.readString();
              struct.setCnAcronymParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CN_NAME_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnNamePartical = iprot.readString();
              struct.setCnNameParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqTSledExchangeOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sledExchangeIds != null) {
        if (struct.isSetSledExchangeIds()) {
          oprot.writeFieldBegin(SLED_EXCHANGE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sledExchangeIds.size()));
            for (int _iter171 : struct.sledExchangeIds)
            {
              oprot.writeI32(_iter171);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchangeMic != null) {
        if (struct.isSetExchangeMic()) {
          oprot.writeFieldBegin(EXCHANGE_MIC_FIELD_DESC);
          oprot.writeString(struct.exchangeMic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchangeMicPartical != null) {
        if (struct.isSetExchangeMicPartical()) {
          oprot.writeFieldBegin(EXCHANGE_MIC_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.exchangeMicPartical);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nameInstitutionPartical != null) {
        if (struct.isSetNameInstitutionPartical()) {
          oprot.writeFieldBegin(NAME_INSTITUTION_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.nameInstitutionPartical);
          oprot.writeFieldEnd();
        }
      }
      if (struct.acronymPartical != null) {
        if (struct.isSetAcronymPartical()) {
          oprot.writeFieldBegin(ACRONYM_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.acronymPartical);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cnAcronymPartical != null) {
        if (struct.isSetCnAcronymPartical()) {
          oprot.writeFieldBegin(CN_ACRONYM_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.cnAcronymPartical);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cnNamePartical != null) {
        if (struct.isSetCnNamePartical()) {
          oprot.writeFieldBegin(CN_NAME_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.cnNamePartical);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqTSledExchangeOptionTupleSchemeFactory implements SchemeFactory {
    public ReqTSledExchangeOptionTupleScheme getScheme() {
      return new ReqTSledExchangeOptionTupleScheme();
    }
  }

  private static class ReqTSledExchangeOptionTupleScheme extends TupleScheme<ReqTSledExchangeOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqTSledExchangeOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledExchangeIds()) {
        optionals.set(0);
      }
      if (struct.isSetExchangeMic()) {
        optionals.set(1);
      }
      if (struct.isSetExchangeMicPartical()) {
        optionals.set(2);
      }
      if (struct.isSetNameInstitutionPartical()) {
        optionals.set(3);
      }
      if (struct.isSetAcronymPartical()) {
        optionals.set(4);
      }
      if (struct.isSetCnAcronymPartical()) {
        optionals.set(5);
      }
      if (struct.isSetCnNamePartical()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetSledExchangeIds()) {
        {
          oprot.writeI32(struct.sledExchangeIds.size());
          for (int _iter172 : struct.sledExchangeIds)
          {
            oprot.writeI32(_iter172);
          }
        }
      }
      if (struct.isSetExchangeMic()) {
        oprot.writeString(struct.exchangeMic);
      }
      if (struct.isSetExchangeMicPartical()) {
        oprot.writeString(struct.exchangeMicPartical);
      }
      if (struct.isSetNameInstitutionPartical()) {
        oprot.writeString(struct.nameInstitutionPartical);
      }
      if (struct.isSetAcronymPartical()) {
        oprot.writeString(struct.acronymPartical);
      }
      if (struct.isSetCnAcronymPartical()) {
        oprot.writeString(struct.cnAcronymPartical);
      }
      if (struct.isSetCnNamePartical()) {
        oprot.writeString(struct.cnNamePartical);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqTSledExchangeOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.sledExchangeIds = new ArrayList<Integer>(_list173.size);
          for (int _i174 = 0; _i174 < _list173.size; ++_i174)
          {
            int _elem175;
            _elem175 = iprot.readI32();
            struct.sledExchangeIds.add(_elem175);
          }
        }
        struct.setSledExchangeIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exchangeMic = iprot.readString();
        struct.setExchangeMicIsSet(true);
      }
      if (incoming.get(2)) {
        struct.exchangeMicPartical = iprot.readString();
        struct.setExchangeMicParticalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nameInstitutionPartical = iprot.readString();
        struct.setNameInstitutionParticalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.acronymPartical = iprot.readString();
        struct.setAcronymParticalIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cnAcronymPartical = iprot.readString();
        struct.setCnAcronymParticalIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cnNamePartical = iprot.readString();
        struct.setCnNameParticalIsSet(true);
      }
    }
  }

}

