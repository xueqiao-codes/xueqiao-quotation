/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqSledTradingSessionOption implements org.apache.thrift.TBase<ReqSledTradingSessionOption, ReqSledTradingSessionOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqSledTradingSessionOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqSledTradingSessionOption");

  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TRADE_SESSION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeSessionIds", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField TIME_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("timeSystem", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqSledTradingSessionOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqSledTradingSessionOptionTupleSchemeFactory());
  }

  public int sledCommodityId; // optional
  public Set<Long> tradeSessionIds; // optional
  /**
   * 
   * @see TimeSystem
   */
  public TimeSystem timeSystem; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_COMMODITY_ID((short)1, "sledCommodityId"),
    TRADE_SESSION_IDS((short)2, "tradeSessionIds"),
    /**
     * 
     * @see TimeSystem
     */
    TIME_SYSTEM((short)3, "timeSystem");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 2: // TRADE_SESSION_IDS
          return TRADE_SESSION_IDS;
        case 3: // TIME_SYSTEM
          return TIME_SYSTEM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDCOMMODITYID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_COMMODITY_ID,_Fields.TRADE_SESSION_IDS,_Fields.TIME_SYSTEM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADE_SESSION_IDS, new org.apache.thrift.meta_data.FieldMetaData("tradeSessionIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.TIME_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("timeSystem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TimeSystem.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqSledTradingSessionOption.class, metaDataMap);
  }

  public ReqSledTradingSessionOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqSledTradingSessionOption(ReqSledTradingSessionOption other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sledCommodityId = other.sledCommodityId;
    if (other.isSetTradeSessionIds()) {
      Set<Long> __this__tradeSessionIds = new HashSet<Long>(other.tradeSessionIds);
      this.tradeSessionIds = __this__tradeSessionIds;
    }
    if (other.isSetTimeSystem()) {
      this.timeSystem = other.timeSystem;
    }
  }

  public ReqSledTradingSessionOption deepCopy() {
    return new ReqSledTradingSessionOption(this);
  }

  @Override
  public void clear() {
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    this.tradeSessionIds = null;
    this.timeSystem = null;
  }

  public int getSledCommodityId() {
    return this.sledCommodityId;
  }

  public ReqSledTradingSessionOption setSledCommodityId(int sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public int getTradeSessionIdsSize() {
    return (this.tradeSessionIds == null) ? 0 : this.tradeSessionIds.size();
  }

  public java.util.Iterator<Long> getTradeSessionIdsIterator() {
    return (this.tradeSessionIds == null) ? null : this.tradeSessionIds.iterator();
  }

  public void addToTradeSessionIds(long elem) {
    if (this.tradeSessionIds == null) {
      this.tradeSessionIds = new HashSet<Long>();
    }
    this.tradeSessionIds.add(elem);
  }

  public Set<Long> getTradeSessionIds() {
    return this.tradeSessionIds;
  }

  public ReqSledTradingSessionOption setTradeSessionIds(Set<Long> tradeSessionIds) {
    this.tradeSessionIds = tradeSessionIds;
    return this;
  }

  public void unsetTradeSessionIds() {
    this.tradeSessionIds = null;
  }

  /** Returns true if field tradeSessionIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeSessionIds() {
    return this.tradeSessionIds != null;
  }

  public void setTradeSessionIdsIsSet(boolean value) {
    if (!value) {
      this.tradeSessionIds = null;
    }
  }

  /**
   * 
   * @see TimeSystem
   */
  public TimeSystem getTimeSystem() {
    return this.timeSystem;
  }

  /**
   * 
   * @see TimeSystem
   */
  public ReqSledTradingSessionOption setTimeSystem(TimeSystem timeSystem) {
    this.timeSystem = timeSystem;
    return this;
  }

  public void unsetTimeSystem() {
    this.timeSystem = null;
  }

  /** Returns true if field timeSystem is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeSystem() {
    return this.timeSystem != null;
  }

  public void setTimeSystemIsSet(boolean value) {
    if (!value) {
      this.timeSystem = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Integer)value);
      }
      break;

    case TRADE_SESSION_IDS:
      if (value == null) {
        unsetTradeSessionIds();
      } else {
        setTradeSessionIds((Set<Long>)value);
      }
      break;

    case TIME_SYSTEM:
      if (value == null) {
        unsetTimeSystem();
      } else {
        setTimeSystem((TimeSystem)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_COMMODITY_ID:
      return Integer.valueOf(getSledCommodityId());

    case TRADE_SESSION_IDS:
      return getTradeSessionIds();

    case TIME_SYSTEM:
      return getTimeSystem();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case TRADE_SESSION_IDS:
      return isSetTradeSessionIds();
    case TIME_SYSTEM:
      return isSetTimeSystem();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqSledTradingSessionOption)
      return this.equals((ReqSledTradingSessionOption)that);
    return false;
  }

  public boolean equals(ReqSledTradingSessionOption that) {
    if (that == null)
      return false;

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_tradeSessionIds = true && this.isSetTradeSessionIds();
    boolean that_present_tradeSessionIds = true && that.isSetTradeSessionIds();
    if (this_present_tradeSessionIds || that_present_tradeSessionIds) {
      if (!(this_present_tradeSessionIds && that_present_tradeSessionIds))
        return false;
      if (!this.tradeSessionIds.equals(that.tradeSessionIds))
        return false;
    }

    boolean this_present_timeSystem = true && this.isSetTimeSystem();
    boolean that_present_timeSystem = true && that.isSetTimeSystem();
    if (this_present_timeSystem || that_present_timeSystem) {
      if (!(this_present_timeSystem && that_present_timeSystem))
        return false;
      if (!this.timeSystem.equals(that.timeSystem))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqSledTradingSessionOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeSessionIds()).compareTo(other.isSetTradeSessionIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeSessionIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeSessionIds, other.tradeSessionIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeSystem()).compareTo(other.isSetTimeSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeSystem, other.timeSystem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqSledTradingSessionOption(");
    boolean first = true;

    if (isSetSledCommodityId()) {
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetTradeSessionIds()) {
      if (!first) sb.append(", ");
      sb.append("tradeSessionIds:");
      if (this.tradeSessionIds == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeSessionIds);
      }
      first = false;
    }
    if (isSetTimeSystem()) {
      if (!first) sb.append(", ");
      sb.append("timeSystem:");
      if (this.timeSystem == null) {
        sb.append("null");
      } else {
        sb.append(this.timeSystem);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqSledTradingSessionOptionStandardSchemeFactory implements SchemeFactory {
    public ReqSledTradingSessionOptionStandardScheme getScheme() {
      return new ReqSledTradingSessionOptionStandardScheme();
    }
  }

  private static class ReqSledTradingSessionOptionStandardScheme extends StandardScheme<ReqSledTradingSessionOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqSledTradingSessionOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledCommodityId = iprot.readI32();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRADE_SESSION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set312 = iprot.readSetBegin();
                struct.tradeSessionIds = new HashSet<Long>(2*_set312.size);
                for (int _i313 = 0; _i313 < _set312.size; ++_i313)
                {
                  long _elem314;
                  _elem314 = iprot.readI64();
                  struct.tradeSessionIds.add(_elem314);
                }
                iprot.readSetEnd();
              }
              struct.setTradeSessionIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIME_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeSystem = TimeSystem.findByValue(iprot.readI32());
              struct.setTimeSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqSledTradingSessionOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI32(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.tradeSessionIds != null) {
        if (struct.isSetTradeSessionIds()) {
          oprot.writeFieldBegin(TRADE_SESSION_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.tradeSessionIds.size()));
            for (long _iter315 : struct.tradeSessionIds)
            {
              oprot.writeI64(_iter315);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.timeSystem != null) {
        if (struct.isSetTimeSystem()) {
          oprot.writeFieldBegin(TIME_SYSTEM_FIELD_DESC);
          oprot.writeI32(struct.timeSystem.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqSledTradingSessionOptionTupleSchemeFactory implements SchemeFactory {
    public ReqSledTradingSessionOptionTupleScheme getScheme() {
      return new ReqSledTradingSessionOptionTupleScheme();
    }
  }

  private static class ReqSledTradingSessionOptionTupleScheme extends TupleScheme<ReqSledTradingSessionOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqSledTradingSessionOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledCommodityId()) {
        optionals.set(0);
      }
      if (struct.isSetTradeSessionIds()) {
        optionals.set(1);
      }
      if (struct.isSetTimeSystem()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSledCommodityId()) {
        oprot.writeI32(struct.sledCommodityId);
      }
      if (struct.isSetTradeSessionIds()) {
        {
          oprot.writeI32(struct.tradeSessionIds.size());
          for (long _iter316 : struct.tradeSessionIds)
          {
            oprot.writeI64(_iter316);
          }
        }
      }
      if (struct.isSetTimeSystem()) {
        oprot.writeI32(struct.timeSystem.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqSledTradingSessionOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.sledCommodityId = iprot.readI32();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set317 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.tradeSessionIds = new HashSet<Long>(2*_set317.size);
          for (int _i318 = 0; _i318 < _set317.size; ++_i318)
          {
            long _elem319;
            _elem319 = iprot.readI64();
            struct.tradeSessionIds.add(_elem319);
          }
        }
        struct.setTradeSessionIdsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timeSystem = TimeSystem.findByValue(iprot.readI32());
        struct.setTimeSystemIsSet(true);
      }
    }
  }

}

