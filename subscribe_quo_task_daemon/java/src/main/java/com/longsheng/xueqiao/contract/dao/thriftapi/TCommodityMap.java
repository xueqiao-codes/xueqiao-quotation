/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.dao.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TCommodityMap implements org.apache.thrift.TBase<TCommodityMap, TCommodityMap._Fields>, java.io.Serializable, Cloneable, Comparable<TCommodityMap> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCommodityMap");

  private static final org.apache.thrift.protocol.TField MAP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mapId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TECH_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("techPlatform", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField EXCHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchange", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COMMODITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityCode", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MONEY_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("moneyRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField BROKER_ENTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerEntryId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField EDITSTATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("editstatus", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField WORKING_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("workingStatus", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ACTIVE_START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("activeStartTimestamp", org.apache.thrift.protocol.TType.I64, (short)31);
  private static final org.apache.thrift.protocol.TField ACTIVE_END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("activeEndTimestamp", org.apache.thrift.protocol.TType.I64, (short)32);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)42);
  private static final org.apache.thrift.protocol.TField LAST_MODITY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModityTimestamp", org.apache.thrift.protocol.TType.I64, (short)43);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCommodityMapStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCommodityMapTupleSchemeFactory());
  }

  public int mapId; // optional
  public int sledCommodityId; // optional
  public int techPlatform; // optional
  public String exchange; // optional
  public String commodityType; // optional
  public String commodityCode; // optional
  public double moneyRatio; // optional
  public int brokerEntryId; // optional
  public int editstatus; // optional
  public int workingStatus; // optional
  public long activeStartTimestamp; // optional
  public long activeEndTimestamp; // optional
  public long createTimestamp; // optional
  public long lastModityTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAP_ID((short)1, "mapId"),
    SLED_COMMODITY_ID((short)3, "sledCommodityId"),
    TECH_PLATFORM((short)4, "techPlatform"),
    EXCHANGE((short)5, "exchange"),
    COMMODITY_TYPE((short)6, "commodityType"),
    COMMODITY_CODE((short)7, "commodityCode"),
    MONEY_RATIO((short)9, "moneyRatio"),
    BROKER_ENTRY_ID((short)10, "brokerEntryId"),
    EDITSTATUS((short)14, "editstatus"),
    WORKING_STATUS((short)15, "workingStatus"),
    ACTIVE_START_TIMESTAMP((short)31, "activeStartTimestamp"),
    ACTIVE_END_TIMESTAMP((short)32, "activeEndTimestamp"),
    CREATE_TIMESTAMP((short)42, "createTimestamp"),
    LAST_MODITY_TIMESTAMP((short)43, "lastModityTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAP_ID
          return MAP_ID;
        case 3: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 4: // TECH_PLATFORM
          return TECH_PLATFORM;
        case 5: // EXCHANGE
          return EXCHANGE;
        case 6: // COMMODITY_TYPE
          return COMMODITY_TYPE;
        case 7: // COMMODITY_CODE
          return COMMODITY_CODE;
        case 9: // MONEY_RATIO
          return MONEY_RATIO;
        case 10: // BROKER_ENTRY_ID
          return BROKER_ENTRY_ID;
        case 14: // EDITSTATUS
          return EDITSTATUS;
        case 15: // WORKING_STATUS
          return WORKING_STATUS;
        case 31: // ACTIVE_START_TIMESTAMP
          return ACTIVE_START_TIMESTAMP;
        case 32: // ACTIVE_END_TIMESTAMP
          return ACTIVE_END_TIMESTAMP;
        case 42: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 43: // LAST_MODITY_TIMESTAMP
          return LAST_MODITY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAPID_ISSET_ID = 0;
  private static final int __SLEDCOMMODITYID_ISSET_ID = 1;
  private static final int __TECHPLATFORM_ISSET_ID = 2;
  private static final int __MONEYRATIO_ISSET_ID = 3;
  private static final int __BROKERENTRYID_ISSET_ID = 4;
  private static final int __EDITSTATUS_ISSET_ID = 5;
  private static final int __WORKINGSTATUS_ISSET_ID = 6;
  private static final int __ACTIVESTARTTIMESTAMP_ISSET_ID = 7;
  private static final int __ACTIVEENDTIMESTAMP_ISSET_ID = 8;
  private static final int __CREATETIMESTAMP_ISSET_ID = 9;
  private static final int __LASTMODITYTIMESTAMP_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MAP_ID,_Fields.SLED_COMMODITY_ID,_Fields.TECH_PLATFORM,_Fields.EXCHANGE,_Fields.COMMODITY_TYPE,_Fields.COMMODITY_CODE,_Fields.MONEY_RATIO,_Fields.BROKER_ENTRY_ID,_Fields.EDITSTATUS,_Fields.WORKING_STATUS,_Fields.ACTIVE_START_TIMESTAMP,_Fields.ACTIVE_END_TIMESTAMP,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODITY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAP_ID, new org.apache.thrift.meta_data.FieldMetaData("mapId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TECH_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("techPlatform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCHANGE, new org.apache.thrift.meta_data.FieldMetaData("exchange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("commodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("commodityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONEY_RATIO, new org.apache.thrift.meta_data.FieldMetaData("moneyRatio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BROKER_ENTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerEntryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EDITSTATUS, new org.apache.thrift.meta_data.FieldMetaData("editstatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKING_STATUS, new org.apache.thrift.meta_data.FieldMetaData("workingStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVE_START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("activeStartTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTIVE_END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("activeEndTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODITY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModityTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCommodityMap.class, metaDataMap);
  }

  public TCommodityMap() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCommodityMap(TCommodityMap other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mapId = other.mapId;
    this.sledCommodityId = other.sledCommodityId;
    this.techPlatform = other.techPlatform;
    if (other.isSetExchange()) {
      this.exchange = other.exchange;
    }
    if (other.isSetCommodityType()) {
      this.commodityType = other.commodityType;
    }
    if (other.isSetCommodityCode()) {
      this.commodityCode = other.commodityCode;
    }
    this.moneyRatio = other.moneyRatio;
    this.brokerEntryId = other.brokerEntryId;
    this.editstatus = other.editstatus;
    this.workingStatus = other.workingStatus;
    this.activeStartTimestamp = other.activeStartTimestamp;
    this.activeEndTimestamp = other.activeEndTimestamp;
    this.createTimestamp = other.createTimestamp;
    this.lastModityTimestamp = other.lastModityTimestamp;
  }

  public TCommodityMap deepCopy() {
    return new TCommodityMap(this);
  }

  @Override
  public void clear() {
    setMapIdIsSet(false);
    this.mapId = 0;
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    setTechPlatformIsSet(false);
    this.techPlatform = 0;
    this.exchange = null;
    this.commodityType = null;
    this.commodityCode = null;
    setMoneyRatioIsSet(false);
    this.moneyRatio = 0.0;
    setBrokerEntryIdIsSet(false);
    this.brokerEntryId = 0;
    setEditstatusIsSet(false);
    this.editstatus = 0;
    setWorkingStatusIsSet(false);
    this.workingStatus = 0;
    setActiveStartTimestampIsSet(false);
    this.activeStartTimestamp = 0;
    setActiveEndTimestampIsSet(false);
    this.activeEndTimestamp = 0;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModityTimestampIsSet(false);
    this.lastModityTimestamp = 0;
  }

  public int getMapId() {
    return this.mapId;
  }

  public TCommodityMap setMapId(int mapId) {
    this.mapId = mapId;
    setMapIdIsSet(true);
    return this;
  }

  public void unsetMapId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAPID_ISSET_ID);
  }

  /** Returns true if field mapId is set (has been assigned a value) and false otherwise */
  public boolean isSetMapId() {
    return EncodingUtils.testBit(__isset_bitfield, __MAPID_ISSET_ID);
  }

  public void setMapIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAPID_ISSET_ID, value);
  }

  public int getSledCommodityId() {
    return this.sledCommodityId;
  }

  public TCommodityMap setSledCommodityId(int sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public int getTechPlatform() {
    return this.techPlatform;
  }

  public TCommodityMap setTechPlatform(int techPlatform) {
    this.techPlatform = techPlatform;
    setTechPlatformIsSet(true);
    return this;
  }

  public void unsetTechPlatform() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TECHPLATFORM_ISSET_ID);
  }

  /** Returns true if field techPlatform is set (has been assigned a value) and false otherwise */
  public boolean isSetTechPlatform() {
    return EncodingUtils.testBit(__isset_bitfield, __TECHPLATFORM_ISSET_ID);
  }

  public void setTechPlatformIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TECHPLATFORM_ISSET_ID, value);
  }

  public String getExchange() {
    return this.exchange;
  }

  public TCommodityMap setExchange(String exchange) {
    this.exchange = exchange;
    return this;
  }

  public void unsetExchange() {
    this.exchange = null;
  }

  /** Returns true if field exchange is set (has been assigned a value) and false otherwise */
  public boolean isSetExchange() {
    return this.exchange != null;
  }

  public void setExchangeIsSet(boolean value) {
    if (!value) {
      this.exchange = null;
    }
  }

  public String getCommodityType() {
    return this.commodityType;
  }

  public TCommodityMap setCommodityType(String commodityType) {
    this.commodityType = commodityType;
    return this;
  }

  public void unsetCommodityType() {
    this.commodityType = null;
  }

  /** Returns true if field commodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityType() {
    return this.commodityType != null;
  }

  public void setCommodityTypeIsSet(boolean value) {
    if (!value) {
      this.commodityType = null;
    }
  }

  public String getCommodityCode() {
    return this.commodityCode;
  }

  public TCommodityMap setCommodityCode(String commodityCode) {
    this.commodityCode = commodityCode;
    return this;
  }

  public void unsetCommodityCode() {
    this.commodityCode = null;
  }

  /** Returns true if field commodityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityCode() {
    return this.commodityCode != null;
  }

  public void setCommodityCodeIsSet(boolean value) {
    if (!value) {
      this.commodityCode = null;
    }
  }

  public double getMoneyRatio() {
    return this.moneyRatio;
  }

  public TCommodityMap setMoneyRatio(double moneyRatio) {
    this.moneyRatio = moneyRatio;
    setMoneyRatioIsSet(true);
    return this;
  }

  public void unsetMoneyRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEYRATIO_ISSET_ID);
  }

  /** Returns true if field moneyRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetMoneyRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __MONEYRATIO_ISSET_ID);
  }

  public void setMoneyRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEYRATIO_ISSET_ID, value);
  }

  public int getBrokerEntryId() {
    return this.brokerEntryId;
  }

  public TCommodityMap setBrokerEntryId(int brokerEntryId) {
    this.brokerEntryId = brokerEntryId;
    setBrokerEntryIdIsSet(true);
    return this;
  }

  public void unsetBrokerEntryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BROKERENTRYID_ISSET_ID);
  }

  /** Returns true if field brokerEntryId is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerEntryId() {
    return EncodingUtils.testBit(__isset_bitfield, __BROKERENTRYID_ISSET_ID);
  }

  public void setBrokerEntryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BROKERENTRYID_ISSET_ID, value);
  }

  public int getEditstatus() {
    return this.editstatus;
  }

  public TCommodityMap setEditstatus(int editstatus) {
    this.editstatus = editstatus;
    setEditstatusIsSet(true);
    return this;
  }

  public void unsetEditstatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EDITSTATUS_ISSET_ID);
  }

  /** Returns true if field editstatus is set (has been assigned a value) and false otherwise */
  public boolean isSetEditstatus() {
    return EncodingUtils.testBit(__isset_bitfield, __EDITSTATUS_ISSET_ID);
  }

  public void setEditstatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EDITSTATUS_ISSET_ID, value);
  }

  public int getWorkingStatus() {
    return this.workingStatus;
  }

  public TCommodityMap setWorkingStatus(int workingStatus) {
    this.workingStatus = workingStatus;
    setWorkingStatusIsSet(true);
    return this;
  }

  public void unsetWorkingStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKINGSTATUS_ISSET_ID);
  }

  /** Returns true if field workingStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkingStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKINGSTATUS_ISSET_ID);
  }

  public void setWorkingStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKINGSTATUS_ISSET_ID, value);
  }

  public long getActiveStartTimestamp() {
    return this.activeStartTimestamp;
  }

  public TCommodityMap setActiveStartTimestamp(long activeStartTimestamp) {
    this.activeStartTimestamp = activeStartTimestamp;
    setActiveStartTimestampIsSet(true);
    return this;
  }

  public void unsetActiveStartTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field activeStartTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveStartTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID);
  }

  public void setActiveStartTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID, value);
  }

  public long getActiveEndTimestamp() {
    return this.activeEndTimestamp;
  }

  public TCommodityMap setActiveEndTimestamp(long activeEndTimestamp) {
    this.activeEndTimestamp = activeEndTimestamp;
    setActiveEndTimestampIsSet(true);
    return this;
  }

  public void unsetActiveEndTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVEENDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field activeEndTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveEndTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVEENDTIMESTAMP_ISSET_ID);
  }

  public void setActiveEndTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVEENDTIMESTAMP_ISSET_ID, value);
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public TCommodityMap setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModityTimestamp() {
    return this.lastModityTimestamp;
  }

  public TCommodityMap setLastModityTimestamp(long lastModityTimestamp) {
    this.lastModityTimestamp = lastModityTimestamp;
    setLastModityTimestampIsSet(true);
    return this;
  }

  public void unsetLastModityTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModityTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModityTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  public void setLastModityTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAP_ID:
      if (value == null) {
        unsetMapId();
      } else {
        setMapId((Integer)value);
      }
      break;

    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Integer)value);
      }
      break;

    case TECH_PLATFORM:
      if (value == null) {
        unsetTechPlatform();
      } else {
        setTechPlatform((Integer)value);
      }
      break;

    case EXCHANGE:
      if (value == null) {
        unsetExchange();
      } else {
        setExchange((String)value);
      }
      break;

    case COMMODITY_TYPE:
      if (value == null) {
        unsetCommodityType();
      } else {
        setCommodityType((String)value);
      }
      break;

    case COMMODITY_CODE:
      if (value == null) {
        unsetCommodityCode();
      } else {
        setCommodityCode((String)value);
      }
      break;

    case MONEY_RATIO:
      if (value == null) {
        unsetMoneyRatio();
      } else {
        setMoneyRatio((Double)value);
      }
      break;

    case BROKER_ENTRY_ID:
      if (value == null) {
        unsetBrokerEntryId();
      } else {
        setBrokerEntryId((Integer)value);
      }
      break;

    case EDITSTATUS:
      if (value == null) {
        unsetEditstatus();
      } else {
        setEditstatus((Integer)value);
      }
      break;

    case WORKING_STATUS:
      if (value == null) {
        unsetWorkingStatus();
      } else {
        setWorkingStatus((Integer)value);
      }
      break;

    case ACTIVE_START_TIMESTAMP:
      if (value == null) {
        unsetActiveStartTimestamp();
      } else {
        setActiveStartTimestamp((Long)value);
      }
      break;

    case ACTIVE_END_TIMESTAMP:
      if (value == null) {
        unsetActiveEndTimestamp();
      } else {
        setActiveEndTimestamp((Long)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODITY_TIMESTAMP:
      if (value == null) {
        unsetLastModityTimestamp();
      } else {
        setLastModityTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAP_ID:
      return Integer.valueOf(getMapId());

    case SLED_COMMODITY_ID:
      return Integer.valueOf(getSledCommodityId());

    case TECH_PLATFORM:
      return Integer.valueOf(getTechPlatform());

    case EXCHANGE:
      return getExchange();

    case COMMODITY_TYPE:
      return getCommodityType();

    case COMMODITY_CODE:
      return getCommodityCode();

    case MONEY_RATIO:
      return Double.valueOf(getMoneyRatio());

    case BROKER_ENTRY_ID:
      return Integer.valueOf(getBrokerEntryId());

    case EDITSTATUS:
      return Integer.valueOf(getEditstatus());

    case WORKING_STATUS:
      return Integer.valueOf(getWorkingStatus());

    case ACTIVE_START_TIMESTAMP:
      return Long.valueOf(getActiveStartTimestamp());

    case ACTIVE_END_TIMESTAMP:
      return Long.valueOf(getActiveEndTimestamp());

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODITY_TIMESTAMP:
      return Long.valueOf(getLastModityTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAP_ID:
      return isSetMapId();
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case TECH_PLATFORM:
      return isSetTechPlatform();
    case EXCHANGE:
      return isSetExchange();
    case COMMODITY_TYPE:
      return isSetCommodityType();
    case COMMODITY_CODE:
      return isSetCommodityCode();
    case MONEY_RATIO:
      return isSetMoneyRatio();
    case BROKER_ENTRY_ID:
      return isSetBrokerEntryId();
    case EDITSTATUS:
      return isSetEditstatus();
    case WORKING_STATUS:
      return isSetWorkingStatus();
    case ACTIVE_START_TIMESTAMP:
      return isSetActiveStartTimestamp();
    case ACTIVE_END_TIMESTAMP:
      return isSetActiveEndTimestamp();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODITY_TIMESTAMP:
      return isSetLastModityTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCommodityMap)
      return this.equals((TCommodityMap)that);
    return false;
  }

  public boolean equals(TCommodityMap that) {
    if (that == null)
      return false;

    boolean this_present_mapId = true && this.isSetMapId();
    boolean that_present_mapId = true && that.isSetMapId();
    if (this_present_mapId || that_present_mapId) {
      if (!(this_present_mapId && that_present_mapId))
        return false;
      if (this.mapId != that.mapId)
        return false;
    }

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_techPlatform = true && this.isSetTechPlatform();
    boolean that_present_techPlatform = true && that.isSetTechPlatform();
    if (this_present_techPlatform || that_present_techPlatform) {
      if (!(this_present_techPlatform && that_present_techPlatform))
        return false;
      if (this.techPlatform != that.techPlatform)
        return false;
    }

    boolean this_present_exchange = true && this.isSetExchange();
    boolean that_present_exchange = true && that.isSetExchange();
    if (this_present_exchange || that_present_exchange) {
      if (!(this_present_exchange && that_present_exchange))
        return false;
      if (!this.exchange.equals(that.exchange))
        return false;
    }

    boolean this_present_commodityType = true && this.isSetCommodityType();
    boolean that_present_commodityType = true && that.isSetCommodityType();
    if (this_present_commodityType || that_present_commodityType) {
      if (!(this_present_commodityType && that_present_commodityType))
        return false;
      if (!this.commodityType.equals(that.commodityType))
        return false;
    }

    boolean this_present_commodityCode = true && this.isSetCommodityCode();
    boolean that_present_commodityCode = true && that.isSetCommodityCode();
    if (this_present_commodityCode || that_present_commodityCode) {
      if (!(this_present_commodityCode && that_present_commodityCode))
        return false;
      if (!this.commodityCode.equals(that.commodityCode))
        return false;
    }

    boolean this_present_moneyRatio = true && this.isSetMoneyRatio();
    boolean that_present_moneyRatio = true && that.isSetMoneyRatio();
    if (this_present_moneyRatio || that_present_moneyRatio) {
      if (!(this_present_moneyRatio && that_present_moneyRatio))
        return false;
      if (this.moneyRatio != that.moneyRatio)
        return false;
    }

    boolean this_present_brokerEntryId = true && this.isSetBrokerEntryId();
    boolean that_present_brokerEntryId = true && that.isSetBrokerEntryId();
    if (this_present_brokerEntryId || that_present_brokerEntryId) {
      if (!(this_present_brokerEntryId && that_present_brokerEntryId))
        return false;
      if (this.brokerEntryId != that.brokerEntryId)
        return false;
    }

    boolean this_present_editstatus = true && this.isSetEditstatus();
    boolean that_present_editstatus = true && that.isSetEditstatus();
    if (this_present_editstatus || that_present_editstatus) {
      if (!(this_present_editstatus && that_present_editstatus))
        return false;
      if (this.editstatus != that.editstatus)
        return false;
    }

    boolean this_present_workingStatus = true && this.isSetWorkingStatus();
    boolean that_present_workingStatus = true && that.isSetWorkingStatus();
    if (this_present_workingStatus || that_present_workingStatus) {
      if (!(this_present_workingStatus && that_present_workingStatus))
        return false;
      if (this.workingStatus != that.workingStatus)
        return false;
    }

    boolean this_present_activeStartTimestamp = true && this.isSetActiveStartTimestamp();
    boolean that_present_activeStartTimestamp = true && that.isSetActiveStartTimestamp();
    if (this_present_activeStartTimestamp || that_present_activeStartTimestamp) {
      if (!(this_present_activeStartTimestamp && that_present_activeStartTimestamp))
        return false;
      if (this.activeStartTimestamp != that.activeStartTimestamp)
        return false;
    }

    boolean this_present_activeEndTimestamp = true && this.isSetActiveEndTimestamp();
    boolean that_present_activeEndTimestamp = true && that.isSetActiveEndTimestamp();
    if (this_present_activeEndTimestamp || that_present_activeEndTimestamp) {
      if (!(this_present_activeEndTimestamp && that_present_activeEndTimestamp))
        return false;
      if (this.activeEndTimestamp != that.activeEndTimestamp)
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModityTimestamp = true && this.isSetLastModityTimestamp();
    boolean that_present_lastModityTimestamp = true && that.isSetLastModityTimestamp();
    if (this_present_lastModityTimestamp || that_present_lastModityTimestamp) {
      if (!(this_present_lastModityTimestamp && that_present_lastModityTimestamp))
        return false;
      if (this.lastModityTimestamp != that.lastModityTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TCommodityMap other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMapId()).compareTo(other.isSetMapId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapId, other.mapId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTechPlatform()).compareTo(other.isSetTechPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTechPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.techPlatform, other.techPlatform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchange()).compareTo(other.isSetExchange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchange, other.exchange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityType()).compareTo(other.isSetCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityType, other.commodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityCode()).compareTo(other.isSetCommodityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityCode, other.commodityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoneyRatio()).compareTo(other.isSetMoneyRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoneyRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moneyRatio, other.moneyRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerEntryId()).compareTo(other.isSetBrokerEntryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerEntryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerEntryId, other.brokerEntryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEditstatus()).compareTo(other.isSetEditstatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEditstatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.editstatus, other.editstatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkingStatus()).compareTo(other.isSetWorkingStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkingStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workingStatus, other.workingStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveStartTimestamp()).compareTo(other.isSetActiveStartTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveStartTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeStartTimestamp, other.activeStartTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveEndTimestamp()).compareTo(other.isSetActiveEndTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveEndTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeEndTimestamp, other.activeEndTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModityTimestamp()).compareTo(other.isSetLastModityTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModityTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModityTimestamp, other.lastModityTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCommodityMap(");
    boolean first = true;

    if (isSetMapId()) {
      sb.append("mapId:");
      sb.append(this.mapId);
      first = false;
    }
    if (isSetSledCommodityId()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetTechPlatform()) {
      if (!first) sb.append(", ");
      sb.append("techPlatform:");
      sb.append(this.techPlatform);
      first = false;
    }
    if (isSetExchange()) {
      if (!first) sb.append(", ");
      sb.append("exchange:");
      if (this.exchange == null) {
        sb.append("null");
      } else {
        sb.append(this.exchange);
      }
      first = false;
    }
    if (isSetCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("commodityType:");
      if (this.commodityType == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityType);
      }
      first = false;
    }
    if (isSetCommodityCode()) {
      if (!first) sb.append(", ");
      sb.append("commodityCode:");
      if (this.commodityCode == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityCode);
      }
      first = false;
    }
    if (isSetMoneyRatio()) {
      if (!first) sb.append(", ");
      sb.append("moneyRatio:");
      sb.append(this.moneyRatio);
      first = false;
    }
    if (isSetBrokerEntryId()) {
      if (!first) sb.append(", ");
      sb.append("brokerEntryId:");
      sb.append(this.brokerEntryId);
      first = false;
    }
    if (isSetEditstatus()) {
      if (!first) sb.append(", ");
      sb.append("editstatus:");
      sb.append(this.editstatus);
      first = false;
    }
    if (isSetWorkingStatus()) {
      if (!first) sb.append(", ");
      sb.append("workingStatus:");
      sb.append(this.workingStatus);
      first = false;
    }
    if (isSetActiveStartTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("activeStartTimestamp:");
      sb.append(this.activeStartTimestamp);
      first = false;
    }
    if (isSetActiveEndTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("activeEndTimestamp:");
      sb.append(this.activeEndTimestamp);
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModityTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModityTimestamp:");
      sb.append(this.lastModityTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCommodityMapStandardSchemeFactory implements SchemeFactory {
    public TCommodityMapStandardScheme getScheme() {
      return new TCommodityMapStandardScheme();
    }
  }

  private static class TCommodityMapStandardScheme extends StandardScheme<TCommodityMap> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCommodityMap struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mapId = iprot.readI32();
              struct.setMapIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledCommodityId = iprot.readI32();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TECH_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.techPlatform = iprot.readI32();
              struct.setTechPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXCHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchange = iprot.readString();
              struct.setExchangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityType = iprot.readString();
              struct.setCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMMODITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityCode = iprot.readString();
              struct.setCommodityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MONEY_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.moneyRatio = iprot.readDouble();
              struct.setMoneyRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BROKER_ENTRY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brokerEntryId = iprot.readI32();
              struct.setBrokerEntryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EDITSTATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.editstatus = iprot.readI32();
              struct.setEditstatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WORKING_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.workingStatus = iprot.readI32();
              struct.setWorkingStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // ACTIVE_START_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.activeStartTimestamp = iprot.readI64();
              struct.setActiveStartTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // ACTIVE_END_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.activeEndTimestamp = iprot.readI64();
              struct.setActiveEndTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // LAST_MODITY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModityTimestamp = iprot.readI64();
              struct.setLastModityTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCommodityMap struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetMapId()) {
        oprot.writeFieldBegin(MAP_ID_FIELD_DESC);
        oprot.writeI32(struct.mapId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI32(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTechPlatform()) {
        oprot.writeFieldBegin(TECH_PLATFORM_FIELD_DESC);
        oprot.writeI32(struct.techPlatform);
        oprot.writeFieldEnd();
      }
      if (struct.exchange != null) {
        if (struct.isSetExchange()) {
          oprot.writeFieldBegin(EXCHANGE_FIELD_DESC);
          oprot.writeString(struct.exchange);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityType != null) {
        if (struct.isSetCommodityType()) {
          oprot.writeFieldBegin(COMMODITY_TYPE_FIELD_DESC);
          oprot.writeString(struct.commodityType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityCode != null) {
        if (struct.isSetCommodityCode()) {
          oprot.writeFieldBegin(COMMODITY_CODE_FIELD_DESC);
          oprot.writeString(struct.commodityCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMoneyRatio()) {
        oprot.writeFieldBegin(MONEY_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.moneyRatio);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBrokerEntryId()) {
        oprot.writeFieldBegin(BROKER_ENTRY_ID_FIELD_DESC);
        oprot.writeI32(struct.brokerEntryId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEditstatus()) {
        oprot.writeFieldBegin(EDITSTATUS_FIELD_DESC);
        oprot.writeI32(struct.editstatus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWorkingStatus()) {
        oprot.writeFieldBegin(WORKING_STATUS_FIELD_DESC);
        oprot.writeI32(struct.workingStatus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActiveStartTimestamp()) {
        oprot.writeFieldBegin(ACTIVE_START_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.activeStartTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActiveEndTimestamp()) {
        oprot.writeFieldBegin(ACTIVE_END_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.activeEndTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeFieldBegin(LAST_MODITY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModityTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCommodityMapTupleSchemeFactory implements SchemeFactory {
    public TCommodityMapTupleScheme getScheme() {
      return new TCommodityMapTupleScheme();
    }
  }

  private static class TCommodityMapTupleScheme extends TupleScheme<TCommodityMap> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCommodityMap struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMapId()) {
        optionals.set(0);
      }
      if (struct.isSetSledCommodityId()) {
        optionals.set(1);
      }
      if (struct.isSetTechPlatform()) {
        optionals.set(2);
      }
      if (struct.isSetExchange()) {
        optionals.set(3);
      }
      if (struct.isSetCommodityType()) {
        optionals.set(4);
      }
      if (struct.isSetCommodityCode()) {
        optionals.set(5);
      }
      if (struct.isSetMoneyRatio()) {
        optionals.set(6);
      }
      if (struct.isSetBrokerEntryId()) {
        optionals.set(7);
      }
      if (struct.isSetEditstatus()) {
        optionals.set(8);
      }
      if (struct.isSetWorkingStatus()) {
        optionals.set(9);
      }
      if (struct.isSetActiveStartTimestamp()) {
        optionals.set(10);
      }
      if (struct.isSetActiveEndTimestamp()) {
        optionals.set(11);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(12);
      }
      if (struct.isSetLastModityTimestamp()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetMapId()) {
        oprot.writeI32(struct.mapId);
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeI32(struct.sledCommodityId);
      }
      if (struct.isSetTechPlatform()) {
        oprot.writeI32(struct.techPlatform);
      }
      if (struct.isSetExchange()) {
        oprot.writeString(struct.exchange);
      }
      if (struct.isSetCommodityType()) {
        oprot.writeString(struct.commodityType);
      }
      if (struct.isSetCommodityCode()) {
        oprot.writeString(struct.commodityCode);
      }
      if (struct.isSetMoneyRatio()) {
        oprot.writeDouble(struct.moneyRatio);
      }
      if (struct.isSetBrokerEntryId()) {
        oprot.writeI32(struct.brokerEntryId);
      }
      if (struct.isSetEditstatus()) {
        oprot.writeI32(struct.editstatus);
      }
      if (struct.isSetWorkingStatus()) {
        oprot.writeI32(struct.workingStatus);
      }
      if (struct.isSetActiveStartTimestamp()) {
        oprot.writeI64(struct.activeStartTimestamp);
      }
      if (struct.isSetActiveEndTimestamp()) {
        oprot.writeI64(struct.activeEndTimestamp);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeI64(struct.lastModityTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCommodityMap struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.mapId = iprot.readI32();
        struct.setMapIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledCommodityId = iprot.readI32();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.techPlatform = iprot.readI32();
        struct.setTechPlatformIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exchange = iprot.readString();
        struct.setExchangeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.commodityType = iprot.readString();
        struct.setCommodityTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.commodityCode = iprot.readString();
        struct.setCommodityCodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.moneyRatio = iprot.readDouble();
        struct.setMoneyRatioIsSet(true);
      }
      if (incoming.get(7)) {
        struct.brokerEntryId = iprot.readI32();
        struct.setBrokerEntryIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.editstatus = iprot.readI32();
        struct.setEditstatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.workingStatus = iprot.readI32();
        struct.setWorkingStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.activeStartTimestamp = iprot.readI64();
        struct.setActiveStartTimestampIsSet(true);
      }
      if (incoming.get(11)) {
        struct.activeEndTimestamp = iprot.readI64();
        struct.setActiveEndTimestampIsSet(true);
      }
      if (incoming.get(12)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(13)) {
        struct.lastModityTimestamp = iprot.readI64();
        struct.setLastModityTimestampIsSet(true);
      }
    }
  }

}

