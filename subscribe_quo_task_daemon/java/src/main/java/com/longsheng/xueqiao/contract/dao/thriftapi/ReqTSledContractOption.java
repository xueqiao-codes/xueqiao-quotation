/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.dao.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqTSledContractOption implements org.apache.thrift.TBase<ReqTSledContractOption, ReqTSledContractOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqTSledContractOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqTSledContractOption");

  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TECH_PLATFORM_ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("techPlatformEnv", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractIds", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CONTRACT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("contractStatus", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField EDIT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("editStatus", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField WORKING_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("workingStatus", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField IS_SUBSCRIBE_QUOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("isSubscribeQuote", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField CONTRACT_CODE_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("contractCodePartical", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField SLED_TAG_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("sledTagPartical", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField CONTRACT_ENG_NAME_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("contractEngNamePartical", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CONTRACT_CN_NAME_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("contractCnNamePartical", org.apache.thrift.protocol.TType.STRING, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqTSledContractOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqTSledContractOptionTupleSchemeFactory());
  }

  public int sledCommodityId; // optional
  public String sledContractCode; // optional
  public int techPlatformEnv; // optional
  public List<Integer> sledContractIds; // optional
  public int contractStatus; // optional
  public int editStatus; // optional
  public int workingStatus; // optional
  public boolean isSubscribeQuote; // optional
  public String contractCodePartical; // optional
  public String sledTagPartical; // optional
  public String contractEngNamePartical; // optional
  public String contractCnNamePartical; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_COMMODITY_ID((short)1, "sledCommodityId"),
    SLED_CONTRACT_CODE((short)2, "sledContractCode"),
    TECH_PLATFORM_ENV((short)5, "techPlatformEnv"),
    SLED_CONTRACT_IDS((short)6, "sledContractIds"),
    CONTRACT_STATUS((short)7, "contractStatus"),
    EDIT_STATUS((short)14, "editStatus"),
    WORKING_STATUS((short)15, "workingStatus"),
    IS_SUBSCRIBE_QUOTE((short)16, "isSubscribeQuote"),
    CONTRACT_CODE_PARTICAL((short)20, "contractCodePartical"),
    SLED_TAG_PARTICAL((short)21, "sledTagPartical"),
    CONTRACT_ENG_NAME_PARTICAL((short)22, "contractEngNamePartical"),
    CONTRACT_CN_NAME_PARTICAL((short)23, "contractCnNamePartical");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 2: // SLED_CONTRACT_CODE
          return SLED_CONTRACT_CODE;
        case 5: // TECH_PLATFORM_ENV
          return TECH_PLATFORM_ENV;
        case 6: // SLED_CONTRACT_IDS
          return SLED_CONTRACT_IDS;
        case 7: // CONTRACT_STATUS
          return CONTRACT_STATUS;
        case 14: // EDIT_STATUS
          return EDIT_STATUS;
        case 15: // WORKING_STATUS
          return WORKING_STATUS;
        case 16: // IS_SUBSCRIBE_QUOTE
          return IS_SUBSCRIBE_QUOTE;
        case 20: // CONTRACT_CODE_PARTICAL
          return CONTRACT_CODE_PARTICAL;
        case 21: // SLED_TAG_PARTICAL
          return SLED_TAG_PARTICAL;
        case 22: // CONTRACT_ENG_NAME_PARTICAL
          return CONTRACT_ENG_NAME_PARTICAL;
        case 23: // CONTRACT_CN_NAME_PARTICAL
          return CONTRACT_CN_NAME_PARTICAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDCOMMODITYID_ISSET_ID = 0;
  private static final int __TECHPLATFORMENV_ISSET_ID = 1;
  private static final int __CONTRACTSTATUS_ISSET_ID = 2;
  private static final int __EDITSTATUS_ISSET_ID = 3;
  private static final int __WORKINGSTATUS_ISSET_ID = 4;
  private static final int __ISSUBSCRIBEQUOTE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_COMMODITY_ID,_Fields.SLED_CONTRACT_CODE,_Fields.TECH_PLATFORM_ENV,_Fields.SLED_CONTRACT_IDS,_Fields.CONTRACT_STATUS,_Fields.EDIT_STATUS,_Fields.WORKING_STATUS,_Fields.IS_SUBSCRIBE_QUOTE,_Fields.CONTRACT_CODE_PARTICAL,_Fields.SLED_TAG_PARTICAL,_Fields.CONTRACT_ENG_NAME_PARTICAL,_Fields.CONTRACT_CN_NAME_PARTICAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_CONTRACT_CODE, new org.apache.thrift.meta_data.FieldMetaData("sledContractCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TECH_PLATFORM_ENV, new org.apache.thrift.meta_data.FieldMetaData("techPlatformEnv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_CONTRACT_IDS, new org.apache.thrift.meta_data.FieldMetaData("sledContractIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CONTRACT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("contractStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EDIT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("editStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKING_STATUS, new org.apache.thrift.meta_data.FieldMetaData("workingStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_SUBSCRIBE_QUOTE, new org.apache.thrift.meta_data.FieldMetaData("isSubscribeQuote", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CONTRACT_CODE_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("contractCodePartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_TAG_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("sledTagPartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_ENG_NAME_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("contractEngNamePartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_CN_NAME_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("contractCnNamePartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqTSledContractOption.class, metaDataMap);
  }

  public ReqTSledContractOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqTSledContractOption(ReqTSledContractOption other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sledCommodityId = other.sledCommodityId;
    if (other.isSetSledContractCode()) {
      this.sledContractCode = other.sledContractCode;
    }
    this.techPlatformEnv = other.techPlatformEnv;
    if (other.isSetSledContractIds()) {
      List<Integer> __this__sledContractIds = new ArrayList<Integer>(other.sledContractIds);
      this.sledContractIds = __this__sledContractIds;
    }
    this.contractStatus = other.contractStatus;
    this.editStatus = other.editStatus;
    this.workingStatus = other.workingStatus;
    this.isSubscribeQuote = other.isSubscribeQuote;
    if (other.isSetContractCodePartical()) {
      this.contractCodePartical = other.contractCodePartical;
    }
    if (other.isSetSledTagPartical()) {
      this.sledTagPartical = other.sledTagPartical;
    }
    if (other.isSetContractEngNamePartical()) {
      this.contractEngNamePartical = other.contractEngNamePartical;
    }
    if (other.isSetContractCnNamePartical()) {
      this.contractCnNamePartical = other.contractCnNamePartical;
    }
  }

  public ReqTSledContractOption deepCopy() {
    return new ReqTSledContractOption(this);
  }

  @Override
  public void clear() {
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    this.sledContractCode = null;
    setTechPlatformEnvIsSet(false);
    this.techPlatformEnv = 0;
    this.sledContractIds = null;
    setContractStatusIsSet(false);
    this.contractStatus = 0;
    setEditStatusIsSet(false);
    this.editStatus = 0;
    setWorkingStatusIsSet(false);
    this.workingStatus = 0;
    setIsSubscribeQuoteIsSet(false);
    this.isSubscribeQuote = false;
    this.contractCodePartical = null;
    this.sledTagPartical = null;
    this.contractEngNamePartical = null;
    this.contractCnNamePartical = null;
  }

  public int getSledCommodityId() {
    return this.sledCommodityId;
  }

  public ReqTSledContractOption setSledCommodityId(int sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public String getSledContractCode() {
    return this.sledContractCode;
  }

  public ReqTSledContractOption setSledContractCode(String sledContractCode) {
    this.sledContractCode = sledContractCode;
    return this;
  }

  public void unsetSledContractCode() {
    this.sledContractCode = null;
  }

  /** Returns true if field sledContractCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractCode() {
    return this.sledContractCode != null;
  }

  public void setSledContractCodeIsSet(boolean value) {
    if (!value) {
      this.sledContractCode = null;
    }
  }

  public int getTechPlatformEnv() {
    return this.techPlatformEnv;
  }

  public ReqTSledContractOption setTechPlatformEnv(int techPlatformEnv) {
    this.techPlatformEnv = techPlatformEnv;
    setTechPlatformEnvIsSet(true);
    return this;
  }

  public void unsetTechPlatformEnv() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TECHPLATFORMENV_ISSET_ID);
  }

  /** Returns true if field techPlatformEnv is set (has been assigned a value) and false otherwise */
  public boolean isSetTechPlatformEnv() {
    return EncodingUtils.testBit(__isset_bitfield, __TECHPLATFORMENV_ISSET_ID);
  }

  public void setTechPlatformEnvIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TECHPLATFORMENV_ISSET_ID, value);
  }

  public int getSledContractIdsSize() {
    return (this.sledContractIds == null) ? 0 : this.sledContractIds.size();
  }

  public java.util.Iterator<Integer> getSledContractIdsIterator() {
    return (this.sledContractIds == null) ? null : this.sledContractIds.iterator();
  }

  public void addToSledContractIds(int elem) {
    if (this.sledContractIds == null) {
      this.sledContractIds = new ArrayList<Integer>();
    }
    this.sledContractIds.add(elem);
  }

  public List<Integer> getSledContractIds() {
    return this.sledContractIds;
  }

  public ReqTSledContractOption setSledContractIds(List<Integer> sledContractIds) {
    this.sledContractIds = sledContractIds;
    return this;
  }

  public void unsetSledContractIds() {
    this.sledContractIds = null;
  }

  /** Returns true if field sledContractIds is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractIds() {
    return this.sledContractIds != null;
  }

  public void setSledContractIdsIsSet(boolean value) {
    if (!value) {
      this.sledContractIds = null;
    }
  }

  public int getContractStatus() {
    return this.contractStatus;
  }

  public ReqTSledContractOption setContractStatus(int contractStatus) {
    this.contractStatus = contractStatus;
    setContractStatusIsSet(true);
    return this;
  }

  public void unsetContractStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTSTATUS_ISSET_ID);
  }

  /** Returns true if field contractStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetContractStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTSTATUS_ISSET_ID);
  }

  public void setContractStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTSTATUS_ISSET_ID, value);
  }

  public int getEditStatus() {
    return this.editStatus;
  }

  public ReqTSledContractOption setEditStatus(int editStatus) {
    this.editStatus = editStatus;
    setEditStatusIsSet(true);
    return this;
  }

  public void unsetEditStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EDITSTATUS_ISSET_ID);
  }

  /** Returns true if field editStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetEditStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __EDITSTATUS_ISSET_ID);
  }

  public void setEditStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EDITSTATUS_ISSET_ID, value);
  }

  public int getWorkingStatus() {
    return this.workingStatus;
  }

  public ReqTSledContractOption setWorkingStatus(int workingStatus) {
    this.workingStatus = workingStatus;
    setWorkingStatusIsSet(true);
    return this;
  }

  public void unsetWorkingStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKINGSTATUS_ISSET_ID);
  }

  /** Returns true if field workingStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkingStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKINGSTATUS_ISSET_ID);
  }

  public void setWorkingStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKINGSTATUS_ISSET_ID, value);
  }

  public boolean isIsSubscribeQuote() {
    return this.isSubscribeQuote;
  }

  public ReqTSledContractOption setIsSubscribeQuote(boolean isSubscribeQuote) {
    this.isSubscribeQuote = isSubscribeQuote;
    setIsSubscribeQuoteIsSet(true);
    return this;
  }

  public void unsetIsSubscribeQuote() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSUBSCRIBEQUOTE_ISSET_ID);
  }

  /** Returns true if field isSubscribeQuote is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSubscribeQuote() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSUBSCRIBEQUOTE_ISSET_ID);
  }

  public void setIsSubscribeQuoteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSUBSCRIBEQUOTE_ISSET_ID, value);
  }

  public String getContractCodePartical() {
    return this.contractCodePartical;
  }

  public ReqTSledContractOption setContractCodePartical(String contractCodePartical) {
    this.contractCodePartical = contractCodePartical;
    return this;
  }

  public void unsetContractCodePartical() {
    this.contractCodePartical = null;
  }

  /** Returns true if field contractCodePartical is set (has been assigned a value) and false otherwise */
  public boolean isSetContractCodePartical() {
    return this.contractCodePartical != null;
  }

  public void setContractCodeParticalIsSet(boolean value) {
    if (!value) {
      this.contractCodePartical = null;
    }
  }

  public String getSledTagPartical() {
    return this.sledTagPartical;
  }

  public ReqTSledContractOption setSledTagPartical(String sledTagPartical) {
    this.sledTagPartical = sledTagPartical;
    return this;
  }

  public void unsetSledTagPartical() {
    this.sledTagPartical = null;
  }

  /** Returns true if field sledTagPartical is set (has been assigned a value) and false otherwise */
  public boolean isSetSledTagPartical() {
    return this.sledTagPartical != null;
  }

  public void setSledTagParticalIsSet(boolean value) {
    if (!value) {
      this.sledTagPartical = null;
    }
  }

  public String getContractEngNamePartical() {
    return this.contractEngNamePartical;
  }

  public ReqTSledContractOption setContractEngNamePartical(String contractEngNamePartical) {
    this.contractEngNamePartical = contractEngNamePartical;
    return this;
  }

  public void unsetContractEngNamePartical() {
    this.contractEngNamePartical = null;
  }

  /** Returns true if field contractEngNamePartical is set (has been assigned a value) and false otherwise */
  public boolean isSetContractEngNamePartical() {
    return this.contractEngNamePartical != null;
  }

  public void setContractEngNameParticalIsSet(boolean value) {
    if (!value) {
      this.contractEngNamePartical = null;
    }
  }

  public String getContractCnNamePartical() {
    return this.contractCnNamePartical;
  }

  public ReqTSledContractOption setContractCnNamePartical(String contractCnNamePartical) {
    this.contractCnNamePartical = contractCnNamePartical;
    return this;
  }

  public void unsetContractCnNamePartical() {
    this.contractCnNamePartical = null;
  }

  /** Returns true if field contractCnNamePartical is set (has been assigned a value) and false otherwise */
  public boolean isSetContractCnNamePartical() {
    return this.contractCnNamePartical != null;
  }

  public void setContractCnNameParticalIsSet(boolean value) {
    if (!value) {
      this.contractCnNamePartical = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Integer)value);
      }
      break;

    case SLED_CONTRACT_CODE:
      if (value == null) {
        unsetSledContractCode();
      } else {
        setSledContractCode((String)value);
      }
      break;

    case TECH_PLATFORM_ENV:
      if (value == null) {
        unsetTechPlatformEnv();
      } else {
        setTechPlatformEnv((Integer)value);
      }
      break;

    case SLED_CONTRACT_IDS:
      if (value == null) {
        unsetSledContractIds();
      } else {
        setSledContractIds((List<Integer>)value);
      }
      break;

    case CONTRACT_STATUS:
      if (value == null) {
        unsetContractStatus();
      } else {
        setContractStatus((Integer)value);
      }
      break;

    case EDIT_STATUS:
      if (value == null) {
        unsetEditStatus();
      } else {
        setEditStatus((Integer)value);
      }
      break;

    case WORKING_STATUS:
      if (value == null) {
        unsetWorkingStatus();
      } else {
        setWorkingStatus((Integer)value);
      }
      break;

    case IS_SUBSCRIBE_QUOTE:
      if (value == null) {
        unsetIsSubscribeQuote();
      } else {
        setIsSubscribeQuote((Boolean)value);
      }
      break;

    case CONTRACT_CODE_PARTICAL:
      if (value == null) {
        unsetContractCodePartical();
      } else {
        setContractCodePartical((String)value);
      }
      break;

    case SLED_TAG_PARTICAL:
      if (value == null) {
        unsetSledTagPartical();
      } else {
        setSledTagPartical((String)value);
      }
      break;

    case CONTRACT_ENG_NAME_PARTICAL:
      if (value == null) {
        unsetContractEngNamePartical();
      } else {
        setContractEngNamePartical((String)value);
      }
      break;

    case CONTRACT_CN_NAME_PARTICAL:
      if (value == null) {
        unsetContractCnNamePartical();
      } else {
        setContractCnNamePartical((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_COMMODITY_ID:
      return Integer.valueOf(getSledCommodityId());

    case SLED_CONTRACT_CODE:
      return getSledContractCode();

    case TECH_PLATFORM_ENV:
      return Integer.valueOf(getTechPlatformEnv());

    case SLED_CONTRACT_IDS:
      return getSledContractIds();

    case CONTRACT_STATUS:
      return Integer.valueOf(getContractStatus());

    case EDIT_STATUS:
      return Integer.valueOf(getEditStatus());

    case WORKING_STATUS:
      return Integer.valueOf(getWorkingStatus());

    case IS_SUBSCRIBE_QUOTE:
      return Boolean.valueOf(isIsSubscribeQuote());

    case CONTRACT_CODE_PARTICAL:
      return getContractCodePartical();

    case SLED_TAG_PARTICAL:
      return getSledTagPartical();

    case CONTRACT_ENG_NAME_PARTICAL:
      return getContractEngNamePartical();

    case CONTRACT_CN_NAME_PARTICAL:
      return getContractCnNamePartical();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case SLED_CONTRACT_CODE:
      return isSetSledContractCode();
    case TECH_PLATFORM_ENV:
      return isSetTechPlatformEnv();
    case SLED_CONTRACT_IDS:
      return isSetSledContractIds();
    case CONTRACT_STATUS:
      return isSetContractStatus();
    case EDIT_STATUS:
      return isSetEditStatus();
    case WORKING_STATUS:
      return isSetWorkingStatus();
    case IS_SUBSCRIBE_QUOTE:
      return isSetIsSubscribeQuote();
    case CONTRACT_CODE_PARTICAL:
      return isSetContractCodePartical();
    case SLED_TAG_PARTICAL:
      return isSetSledTagPartical();
    case CONTRACT_ENG_NAME_PARTICAL:
      return isSetContractEngNamePartical();
    case CONTRACT_CN_NAME_PARTICAL:
      return isSetContractCnNamePartical();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqTSledContractOption)
      return this.equals((ReqTSledContractOption)that);
    return false;
  }

  public boolean equals(ReqTSledContractOption that) {
    if (that == null)
      return false;

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_sledContractCode = true && this.isSetSledContractCode();
    boolean that_present_sledContractCode = true && that.isSetSledContractCode();
    if (this_present_sledContractCode || that_present_sledContractCode) {
      if (!(this_present_sledContractCode && that_present_sledContractCode))
        return false;
      if (!this.sledContractCode.equals(that.sledContractCode))
        return false;
    }

    boolean this_present_techPlatformEnv = true && this.isSetTechPlatformEnv();
    boolean that_present_techPlatformEnv = true && that.isSetTechPlatformEnv();
    if (this_present_techPlatformEnv || that_present_techPlatformEnv) {
      if (!(this_present_techPlatformEnv && that_present_techPlatformEnv))
        return false;
      if (this.techPlatformEnv != that.techPlatformEnv)
        return false;
    }

    boolean this_present_sledContractIds = true && this.isSetSledContractIds();
    boolean that_present_sledContractIds = true && that.isSetSledContractIds();
    if (this_present_sledContractIds || that_present_sledContractIds) {
      if (!(this_present_sledContractIds && that_present_sledContractIds))
        return false;
      if (!this.sledContractIds.equals(that.sledContractIds))
        return false;
    }

    boolean this_present_contractStatus = true && this.isSetContractStatus();
    boolean that_present_contractStatus = true && that.isSetContractStatus();
    if (this_present_contractStatus || that_present_contractStatus) {
      if (!(this_present_contractStatus && that_present_contractStatus))
        return false;
      if (this.contractStatus != that.contractStatus)
        return false;
    }

    boolean this_present_editStatus = true && this.isSetEditStatus();
    boolean that_present_editStatus = true && that.isSetEditStatus();
    if (this_present_editStatus || that_present_editStatus) {
      if (!(this_present_editStatus && that_present_editStatus))
        return false;
      if (this.editStatus != that.editStatus)
        return false;
    }

    boolean this_present_workingStatus = true && this.isSetWorkingStatus();
    boolean that_present_workingStatus = true && that.isSetWorkingStatus();
    if (this_present_workingStatus || that_present_workingStatus) {
      if (!(this_present_workingStatus && that_present_workingStatus))
        return false;
      if (this.workingStatus != that.workingStatus)
        return false;
    }

    boolean this_present_isSubscribeQuote = true && this.isSetIsSubscribeQuote();
    boolean that_present_isSubscribeQuote = true && that.isSetIsSubscribeQuote();
    if (this_present_isSubscribeQuote || that_present_isSubscribeQuote) {
      if (!(this_present_isSubscribeQuote && that_present_isSubscribeQuote))
        return false;
      if (this.isSubscribeQuote != that.isSubscribeQuote)
        return false;
    }

    boolean this_present_contractCodePartical = true && this.isSetContractCodePartical();
    boolean that_present_contractCodePartical = true && that.isSetContractCodePartical();
    if (this_present_contractCodePartical || that_present_contractCodePartical) {
      if (!(this_present_contractCodePartical && that_present_contractCodePartical))
        return false;
      if (!this.contractCodePartical.equals(that.contractCodePartical))
        return false;
    }

    boolean this_present_sledTagPartical = true && this.isSetSledTagPartical();
    boolean that_present_sledTagPartical = true && that.isSetSledTagPartical();
    if (this_present_sledTagPartical || that_present_sledTagPartical) {
      if (!(this_present_sledTagPartical && that_present_sledTagPartical))
        return false;
      if (!this.sledTagPartical.equals(that.sledTagPartical))
        return false;
    }

    boolean this_present_contractEngNamePartical = true && this.isSetContractEngNamePartical();
    boolean that_present_contractEngNamePartical = true && that.isSetContractEngNamePartical();
    if (this_present_contractEngNamePartical || that_present_contractEngNamePartical) {
      if (!(this_present_contractEngNamePartical && that_present_contractEngNamePartical))
        return false;
      if (!this.contractEngNamePartical.equals(that.contractEngNamePartical))
        return false;
    }

    boolean this_present_contractCnNamePartical = true && this.isSetContractCnNamePartical();
    boolean that_present_contractCnNamePartical = true && that.isSetContractCnNamePartical();
    if (this_present_contractCnNamePartical || that_present_contractCnNamePartical) {
      if (!(this_present_contractCnNamePartical && that_present_contractCnNamePartical))
        return false;
      if (!this.contractCnNamePartical.equals(that.contractCnNamePartical))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqTSledContractOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractCode()).compareTo(other.isSetSledContractCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractCode, other.sledContractCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTechPlatformEnv()).compareTo(other.isSetTechPlatformEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTechPlatformEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.techPlatformEnv, other.techPlatformEnv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractIds()).compareTo(other.isSetSledContractIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractIds, other.sledContractIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractStatus()).compareTo(other.isSetContractStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractStatus, other.contractStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEditStatus()).compareTo(other.isSetEditStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEditStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.editStatus, other.editStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkingStatus()).compareTo(other.isSetWorkingStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkingStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workingStatus, other.workingStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSubscribeQuote()).compareTo(other.isSetIsSubscribeQuote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSubscribeQuote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSubscribeQuote, other.isSubscribeQuote);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractCodePartical()).compareTo(other.isSetContractCodePartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractCodePartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractCodePartical, other.contractCodePartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledTagPartical()).compareTo(other.isSetSledTagPartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledTagPartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledTagPartical, other.sledTagPartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractEngNamePartical()).compareTo(other.isSetContractEngNamePartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractEngNamePartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractEngNamePartical, other.contractEngNamePartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractCnNamePartical()).compareTo(other.isSetContractCnNamePartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractCnNamePartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractCnNamePartical, other.contractCnNamePartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqTSledContractOption(");
    boolean first = true;

    if (isSetSledCommodityId()) {
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetSledContractCode()) {
      if (!first) sb.append(", ");
      sb.append("sledContractCode:");
      if (this.sledContractCode == null) {
        sb.append("null");
      } else {
        sb.append(this.sledContractCode);
      }
      first = false;
    }
    if (isSetTechPlatformEnv()) {
      if (!first) sb.append(", ");
      sb.append("techPlatformEnv:");
      sb.append(this.techPlatformEnv);
      first = false;
    }
    if (isSetSledContractIds()) {
      if (!first) sb.append(", ");
      sb.append("sledContractIds:");
      if (this.sledContractIds == null) {
        sb.append("null");
      } else {
        sb.append(this.sledContractIds);
      }
      first = false;
    }
    if (isSetContractStatus()) {
      if (!first) sb.append(", ");
      sb.append("contractStatus:");
      sb.append(this.contractStatus);
      first = false;
    }
    if (isSetEditStatus()) {
      if (!first) sb.append(", ");
      sb.append("editStatus:");
      sb.append(this.editStatus);
      first = false;
    }
    if (isSetWorkingStatus()) {
      if (!first) sb.append(", ");
      sb.append("workingStatus:");
      sb.append(this.workingStatus);
      first = false;
    }
    if (isSetIsSubscribeQuote()) {
      if (!first) sb.append(", ");
      sb.append("isSubscribeQuote:");
      sb.append(this.isSubscribeQuote);
      first = false;
    }
    if (isSetContractCodePartical()) {
      if (!first) sb.append(", ");
      sb.append("contractCodePartical:");
      if (this.contractCodePartical == null) {
        sb.append("null");
      } else {
        sb.append(this.contractCodePartical);
      }
      first = false;
    }
    if (isSetSledTagPartical()) {
      if (!first) sb.append(", ");
      sb.append("sledTagPartical:");
      if (this.sledTagPartical == null) {
        sb.append("null");
      } else {
        sb.append(this.sledTagPartical);
      }
      first = false;
    }
    if (isSetContractEngNamePartical()) {
      if (!first) sb.append(", ");
      sb.append("contractEngNamePartical:");
      if (this.contractEngNamePartical == null) {
        sb.append("null");
      } else {
        sb.append(this.contractEngNamePartical);
      }
      first = false;
    }
    if (isSetContractCnNamePartical()) {
      if (!first) sb.append(", ");
      sb.append("contractCnNamePartical:");
      if (this.contractCnNamePartical == null) {
        sb.append("null");
      } else {
        sb.append(this.contractCnNamePartical);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqTSledContractOptionStandardSchemeFactory implements SchemeFactory {
    public ReqTSledContractOptionStandardScheme getScheme() {
      return new ReqTSledContractOptionStandardScheme();
    }
  }

  private static class ReqTSledContractOptionStandardScheme extends StandardScheme<ReqTSledContractOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqTSledContractOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledCommodityId = iprot.readI32();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_CONTRACT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledContractCode = iprot.readString();
              struct.setSledContractCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TECH_PLATFORM_ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.techPlatformEnv = iprot.readI32();
              struct.setTechPlatformEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SLED_CONTRACT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                struct.sledContractIds = new ArrayList<Integer>(_list136.size);
                for (int _i137 = 0; _i137 < _list136.size; ++_i137)
                {
                  int _elem138;
                  _elem138 = iprot.readI32();
                  struct.sledContractIds.add(_elem138);
                }
                iprot.readListEnd();
              }
              struct.setSledContractIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTRACT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractStatus = iprot.readI32();
              struct.setContractStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EDIT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.editStatus = iprot.readI32();
              struct.setEditStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WORKING_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.workingStatus = iprot.readI32();
              struct.setWorkingStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // IS_SUBSCRIBE_QUOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSubscribeQuote = iprot.readBool();
              struct.setIsSubscribeQuoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CONTRACT_CODE_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractCodePartical = iprot.readString();
              struct.setContractCodeParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SLED_TAG_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledTagPartical = iprot.readString();
              struct.setSledTagParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CONTRACT_ENG_NAME_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractEngNamePartical = iprot.readString();
              struct.setContractEngNameParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CONTRACT_CN_NAME_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractCnNamePartical = iprot.readString();
              struct.setContractCnNameParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqTSledContractOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI32(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.sledContractCode != null) {
        if (struct.isSetSledContractCode()) {
          oprot.writeFieldBegin(SLED_CONTRACT_CODE_FIELD_DESC);
          oprot.writeString(struct.sledContractCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTechPlatformEnv()) {
        oprot.writeFieldBegin(TECH_PLATFORM_ENV_FIELD_DESC);
        oprot.writeI32(struct.techPlatformEnv);
        oprot.writeFieldEnd();
      }
      if (struct.sledContractIds != null) {
        if (struct.isSetSledContractIds()) {
          oprot.writeFieldBegin(SLED_CONTRACT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sledContractIds.size()));
            for (int _iter139 : struct.sledContractIds)
            {
              oprot.writeI32(_iter139);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetContractStatus()) {
        oprot.writeFieldBegin(CONTRACT_STATUS_FIELD_DESC);
        oprot.writeI32(struct.contractStatus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEditStatus()) {
        oprot.writeFieldBegin(EDIT_STATUS_FIELD_DESC);
        oprot.writeI32(struct.editStatus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWorkingStatus()) {
        oprot.writeFieldBegin(WORKING_STATUS_FIELD_DESC);
        oprot.writeI32(struct.workingStatus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsSubscribeQuote()) {
        oprot.writeFieldBegin(IS_SUBSCRIBE_QUOTE_FIELD_DESC);
        oprot.writeBool(struct.isSubscribeQuote);
        oprot.writeFieldEnd();
      }
      if (struct.contractCodePartical != null) {
        if (struct.isSetContractCodePartical()) {
          oprot.writeFieldBegin(CONTRACT_CODE_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.contractCodePartical);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledTagPartical != null) {
        if (struct.isSetSledTagPartical()) {
          oprot.writeFieldBegin(SLED_TAG_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.sledTagPartical);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractEngNamePartical != null) {
        if (struct.isSetContractEngNamePartical()) {
          oprot.writeFieldBegin(CONTRACT_ENG_NAME_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.contractEngNamePartical);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractCnNamePartical != null) {
        if (struct.isSetContractCnNamePartical()) {
          oprot.writeFieldBegin(CONTRACT_CN_NAME_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.contractCnNamePartical);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqTSledContractOptionTupleSchemeFactory implements SchemeFactory {
    public ReqTSledContractOptionTupleScheme getScheme() {
      return new ReqTSledContractOptionTupleScheme();
    }
  }

  private static class ReqTSledContractOptionTupleScheme extends TupleScheme<ReqTSledContractOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqTSledContractOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledCommodityId()) {
        optionals.set(0);
      }
      if (struct.isSetSledContractCode()) {
        optionals.set(1);
      }
      if (struct.isSetTechPlatformEnv()) {
        optionals.set(2);
      }
      if (struct.isSetSledContractIds()) {
        optionals.set(3);
      }
      if (struct.isSetContractStatus()) {
        optionals.set(4);
      }
      if (struct.isSetEditStatus()) {
        optionals.set(5);
      }
      if (struct.isSetWorkingStatus()) {
        optionals.set(6);
      }
      if (struct.isSetIsSubscribeQuote()) {
        optionals.set(7);
      }
      if (struct.isSetContractCodePartical()) {
        optionals.set(8);
      }
      if (struct.isSetSledTagPartical()) {
        optionals.set(9);
      }
      if (struct.isSetContractEngNamePartical()) {
        optionals.set(10);
      }
      if (struct.isSetContractCnNamePartical()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetSledCommodityId()) {
        oprot.writeI32(struct.sledCommodityId);
      }
      if (struct.isSetSledContractCode()) {
        oprot.writeString(struct.sledContractCode);
      }
      if (struct.isSetTechPlatformEnv()) {
        oprot.writeI32(struct.techPlatformEnv);
      }
      if (struct.isSetSledContractIds()) {
        {
          oprot.writeI32(struct.sledContractIds.size());
          for (int _iter140 : struct.sledContractIds)
          {
            oprot.writeI32(_iter140);
          }
        }
      }
      if (struct.isSetContractStatus()) {
        oprot.writeI32(struct.contractStatus);
      }
      if (struct.isSetEditStatus()) {
        oprot.writeI32(struct.editStatus);
      }
      if (struct.isSetWorkingStatus()) {
        oprot.writeI32(struct.workingStatus);
      }
      if (struct.isSetIsSubscribeQuote()) {
        oprot.writeBool(struct.isSubscribeQuote);
      }
      if (struct.isSetContractCodePartical()) {
        oprot.writeString(struct.contractCodePartical);
      }
      if (struct.isSetSledTagPartical()) {
        oprot.writeString(struct.sledTagPartical);
      }
      if (struct.isSetContractEngNamePartical()) {
        oprot.writeString(struct.contractEngNamePartical);
      }
      if (struct.isSetContractCnNamePartical()) {
        oprot.writeString(struct.contractCnNamePartical);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqTSledContractOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.sledCommodityId = iprot.readI32();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledContractCode = iprot.readString();
        struct.setSledContractCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.techPlatformEnv = iprot.readI32();
        struct.setTechPlatformEnvIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.sledContractIds = new ArrayList<Integer>(_list141.size);
          for (int _i142 = 0; _i142 < _list141.size; ++_i142)
          {
            int _elem143;
            _elem143 = iprot.readI32();
            struct.sledContractIds.add(_elem143);
          }
        }
        struct.setSledContractIdsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.contractStatus = iprot.readI32();
        struct.setContractStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.editStatus = iprot.readI32();
        struct.setEditStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.workingStatus = iprot.readI32();
        struct.setWorkingStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isSubscribeQuote = iprot.readBool();
        struct.setIsSubscribeQuoteIsSet(true);
      }
      if (incoming.get(8)) {
        struct.contractCodePartical = iprot.readString();
        struct.setContractCodeParticalIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sledTagPartical = iprot.readString();
        struct.setSledTagParticalIsSet(true);
      }
      if (incoming.get(10)) {
        struct.contractEngNamePartical = iprot.readString();
        struct.setContractEngNameParticalIsSet(true);
      }
      if (incoming.get(11)) {
        struct.contractCnNamePartical = iprot.readString();
        struct.setContractCnNameParticalIsSet(true);
      }
    }
  }

}

