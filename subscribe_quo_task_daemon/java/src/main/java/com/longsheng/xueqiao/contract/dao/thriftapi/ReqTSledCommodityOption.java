/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.dao.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqTSledCommodityOption implements org.apache.thrift.TBase<ReqTSledCommodityOption, ReqTSledCommodityOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqTSledCommodityOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqTSledCommodityOption");

  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField EXCHANGE_MIC_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeMic", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IS_SIM_FIELD_DESC = new org.apache.thrift.protocol.TField("isSim", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField EDITSTATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("editstatus", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField WORKING_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("workingStatus", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_CODE_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityCodePartical", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField ENG_NAME_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("engNamePartical", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CN_NAME_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("cnNamePartical", org.apache.thrift.protocol.TType.STRING, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqTSledCommodityOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqTSledCommodityOptionTupleSchemeFactory());
  }

  public List<Integer> sledCommodityIds; // optional
  public String exchangeMic; // optional
  public int sledCommodityType; // optional
  public String sledCommodityCode; // optional
  public boolean isSim; // optional
  public int editstatus; // optional
  public int workingStatus; // optional
  public String sledCommodityCodePartical; // optional
  public String engNamePartical; // optional
  public String cnNamePartical; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_COMMODITY_IDS((short)1, "sledCommodityIds"),
    EXCHANGE_MIC((short)2, "exchangeMic"),
    SLED_COMMODITY_TYPE((short)3, "sledCommodityType"),
    SLED_COMMODITY_CODE((short)4, "sledCommodityCode"),
    IS_SIM((short)5, "isSim"),
    EDITSTATUS((short)14, "editstatus"),
    WORKING_STATUS((short)15, "workingStatus"),
    SLED_COMMODITY_CODE_PARTICAL((short)20, "sledCommodityCodePartical"),
    ENG_NAME_PARTICAL((short)22, "engNamePartical"),
    CN_NAME_PARTICAL((short)23, "cnNamePartical");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_COMMODITY_IDS
          return SLED_COMMODITY_IDS;
        case 2: // EXCHANGE_MIC
          return EXCHANGE_MIC;
        case 3: // SLED_COMMODITY_TYPE
          return SLED_COMMODITY_TYPE;
        case 4: // SLED_COMMODITY_CODE
          return SLED_COMMODITY_CODE;
        case 5: // IS_SIM
          return IS_SIM;
        case 14: // EDITSTATUS
          return EDITSTATUS;
        case 15: // WORKING_STATUS
          return WORKING_STATUS;
        case 20: // SLED_COMMODITY_CODE_PARTICAL
          return SLED_COMMODITY_CODE_PARTICAL;
        case 22: // ENG_NAME_PARTICAL
          return ENG_NAME_PARTICAL;
        case 23: // CN_NAME_PARTICAL
          return CN_NAME_PARTICAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDCOMMODITYTYPE_ISSET_ID = 0;
  private static final int __ISSIM_ISSET_ID = 1;
  private static final int __EDITSTATUS_ISSET_ID = 2;
  private static final int __WORKINGSTATUS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_COMMODITY_IDS,_Fields.EXCHANGE_MIC,_Fields.SLED_COMMODITY_TYPE,_Fields.SLED_COMMODITY_CODE,_Fields.IS_SIM,_Fields.EDITSTATUS,_Fields.WORKING_STATUS,_Fields.SLED_COMMODITY_CODE_PARTICAL,_Fields.ENG_NAME_PARTICAL,_Fields.CN_NAME_PARTICAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_COMMODITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.EXCHANGE_MIC, new org.apache.thrift.meta_data.FieldMetaData("exchangeMic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_COMMODITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SIM, new org.apache.thrift.meta_data.FieldMetaData("isSim", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EDITSTATUS, new org.apache.thrift.meta_data.FieldMetaData("editstatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKING_STATUS, new org.apache.thrift.meta_data.FieldMetaData("workingStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_COMMODITY_CODE_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityCodePartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENG_NAME_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("engNamePartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CN_NAME_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("cnNamePartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqTSledCommodityOption.class, metaDataMap);
  }

  public ReqTSledCommodityOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqTSledCommodityOption(ReqTSledCommodityOption other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSledCommodityIds()) {
      List<Integer> __this__sledCommodityIds = new ArrayList<Integer>(other.sledCommodityIds);
      this.sledCommodityIds = __this__sledCommodityIds;
    }
    if (other.isSetExchangeMic()) {
      this.exchangeMic = other.exchangeMic;
    }
    this.sledCommodityType = other.sledCommodityType;
    if (other.isSetSledCommodityCode()) {
      this.sledCommodityCode = other.sledCommodityCode;
    }
    this.isSim = other.isSim;
    this.editstatus = other.editstatus;
    this.workingStatus = other.workingStatus;
    if (other.isSetSledCommodityCodePartical()) {
      this.sledCommodityCodePartical = other.sledCommodityCodePartical;
    }
    if (other.isSetEngNamePartical()) {
      this.engNamePartical = other.engNamePartical;
    }
    if (other.isSetCnNamePartical()) {
      this.cnNamePartical = other.cnNamePartical;
    }
  }

  public ReqTSledCommodityOption deepCopy() {
    return new ReqTSledCommodityOption(this);
  }

  @Override
  public void clear() {
    this.sledCommodityIds = null;
    this.exchangeMic = null;
    setSledCommodityTypeIsSet(false);
    this.sledCommodityType = 0;
    this.sledCommodityCode = null;
    setIsSimIsSet(false);
    this.isSim = false;
    setEditstatusIsSet(false);
    this.editstatus = 0;
    setWorkingStatusIsSet(false);
    this.workingStatus = 0;
    this.sledCommodityCodePartical = null;
    this.engNamePartical = null;
    this.cnNamePartical = null;
  }

  public int getSledCommodityIdsSize() {
    return (this.sledCommodityIds == null) ? 0 : this.sledCommodityIds.size();
  }

  public java.util.Iterator<Integer> getSledCommodityIdsIterator() {
    return (this.sledCommodityIds == null) ? null : this.sledCommodityIds.iterator();
  }

  public void addToSledCommodityIds(int elem) {
    if (this.sledCommodityIds == null) {
      this.sledCommodityIds = new ArrayList<Integer>();
    }
    this.sledCommodityIds.add(elem);
  }

  public List<Integer> getSledCommodityIds() {
    return this.sledCommodityIds;
  }

  public ReqTSledCommodityOption setSledCommodityIds(List<Integer> sledCommodityIds) {
    this.sledCommodityIds = sledCommodityIds;
    return this;
  }

  public void unsetSledCommodityIds() {
    this.sledCommodityIds = null;
  }

  /** Returns true if field sledCommodityIds is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityIds() {
    return this.sledCommodityIds != null;
  }

  public void setSledCommodityIdsIsSet(boolean value) {
    if (!value) {
      this.sledCommodityIds = null;
    }
  }

  public String getExchangeMic() {
    return this.exchangeMic;
  }

  public ReqTSledCommodityOption setExchangeMic(String exchangeMic) {
    this.exchangeMic = exchangeMic;
    return this;
  }

  public void unsetExchangeMic() {
    this.exchangeMic = null;
  }

  /** Returns true if field exchangeMic is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeMic() {
    return this.exchangeMic != null;
  }

  public void setExchangeMicIsSet(boolean value) {
    if (!value) {
      this.exchangeMic = null;
    }
  }

  public int getSledCommodityType() {
    return this.sledCommodityType;
  }

  public ReqTSledCommodityOption setSledCommodityType(int sledCommodityType) {
    this.sledCommodityType = sledCommodityType;
    setSledCommodityTypeIsSet(true);
    return this;
  }

  public void unsetSledCommodityType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID);
  }

  /** Returns true if field sledCommodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityType() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID);
  }

  public void setSledCommodityTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID, value);
  }

  public String getSledCommodityCode() {
    return this.sledCommodityCode;
  }

  public ReqTSledCommodityOption setSledCommodityCode(String sledCommodityCode) {
    this.sledCommodityCode = sledCommodityCode;
    return this;
  }

  public void unsetSledCommodityCode() {
    this.sledCommodityCode = null;
  }

  /** Returns true if field sledCommodityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityCode() {
    return this.sledCommodityCode != null;
  }

  public void setSledCommodityCodeIsSet(boolean value) {
    if (!value) {
      this.sledCommodityCode = null;
    }
  }

  public boolean isIsSim() {
    return this.isSim;
  }

  public ReqTSledCommodityOption setIsSim(boolean isSim) {
    this.isSim = isSim;
    setIsSimIsSet(true);
    return this;
  }

  public void unsetIsSim() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSIM_ISSET_ID);
  }

  /** Returns true if field isSim is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSim() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSIM_ISSET_ID);
  }

  public void setIsSimIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSIM_ISSET_ID, value);
  }

  public int getEditstatus() {
    return this.editstatus;
  }

  public ReqTSledCommodityOption setEditstatus(int editstatus) {
    this.editstatus = editstatus;
    setEditstatusIsSet(true);
    return this;
  }

  public void unsetEditstatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EDITSTATUS_ISSET_ID);
  }

  /** Returns true if field editstatus is set (has been assigned a value) and false otherwise */
  public boolean isSetEditstatus() {
    return EncodingUtils.testBit(__isset_bitfield, __EDITSTATUS_ISSET_ID);
  }

  public void setEditstatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EDITSTATUS_ISSET_ID, value);
  }

  public int getWorkingStatus() {
    return this.workingStatus;
  }

  public ReqTSledCommodityOption setWorkingStatus(int workingStatus) {
    this.workingStatus = workingStatus;
    setWorkingStatusIsSet(true);
    return this;
  }

  public void unsetWorkingStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKINGSTATUS_ISSET_ID);
  }

  /** Returns true if field workingStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkingStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKINGSTATUS_ISSET_ID);
  }

  public void setWorkingStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKINGSTATUS_ISSET_ID, value);
  }

  public String getSledCommodityCodePartical() {
    return this.sledCommodityCodePartical;
  }

  public ReqTSledCommodityOption setSledCommodityCodePartical(String sledCommodityCodePartical) {
    this.sledCommodityCodePartical = sledCommodityCodePartical;
    return this;
  }

  public void unsetSledCommodityCodePartical() {
    this.sledCommodityCodePartical = null;
  }

  /** Returns true if field sledCommodityCodePartical is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityCodePartical() {
    return this.sledCommodityCodePartical != null;
  }

  public void setSledCommodityCodeParticalIsSet(boolean value) {
    if (!value) {
      this.sledCommodityCodePartical = null;
    }
  }

  public String getEngNamePartical() {
    return this.engNamePartical;
  }

  public ReqTSledCommodityOption setEngNamePartical(String engNamePartical) {
    this.engNamePartical = engNamePartical;
    return this;
  }

  public void unsetEngNamePartical() {
    this.engNamePartical = null;
  }

  /** Returns true if field engNamePartical is set (has been assigned a value) and false otherwise */
  public boolean isSetEngNamePartical() {
    return this.engNamePartical != null;
  }

  public void setEngNameParticalIsSet(boolean value) {
    if (!value) {
      this.engNamePartical = null;
    }
  }

  public String getCnNamePartical() {
    return this.cnNamePartical;
  }

  public ReqTSledCommodityOption setCnNamePartical(String cnNamePartical) {
    this.cnNamePartical = cnNamePartical;
    return this;
  }

  public void unsetCnNamePartical() {
    this.cnNamePartical = null;
  }

  /** Returns true if field cnNamePartical is set (has been assigned a value) and false otherwise */
  public boolean isSetCnNamePartical() {
    return this.cnNamePartical != null;
  }

  public void setCnNameParticalIsSet(boolean value) {
    if (!value) {
      this.cnNamePartical = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_COMMODITY_IDS:
      if (value == null) {
        unsetSledCommodityIds();
      } else {
        setSledCommodityIds((List<Integer>)value);
      }
      break;

    case EXCHANGE_MIC:
      if (value == null) {
        unsetExchangeMic();
      } else {
        setExchangeMic((String)value);
      }
      break;

    case SLED_COMMODITY_TYPE:
      if (value == null) {
        unsetSledCommodityType();
      } else {
        setSledCommodityType((Integer)value);
      }
      break;

    case SLED_COMMODITY_CODE:
      if (value == null) {
        unsetSledCommodityCode();
      } else {
        setSledCommodityCode((String)value);
      }
      break;

    case IS_SIM:
      if (value == null) {
        unsetIsSim();
      } else {
        setIsSim((Boolean)value);
      }
      break;

    case EDITSTATUS:
      if (value == null) {
        unsetEditstatus();
      } else {
        setEditstatus((Integer)value);
      }
      break;

    case WORKING_STATUS:
      if (value == null) {
        unsetWorkingStatus();
      } else {
        setWorkingStatus((Integer)value);
      }
      break;

    case SLED_COMMODITY_CODE_PARTICAL:
      if (value == null) {
        unsetSledCommodityCodePartical();
      } else {
        setSledCommodityCodePartical((String)value);
      }
      break;

    case ENG_NAME_PARTICAL:
      if (value == null) {
        unsetEngNamePartical();
      } else {
        setEngNamePartical((String)value);
      }
      break;

    case CN_NAME_PARTICAL:
      if (value == null) {
        unsetCnNamePartical();
      } else {
        setCnNamePartical((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_COMMODITY_IDS:
      return getSledCommodityIds();

    case EXCHANGE_MIC:
      return getExchangeMic();

    case SLED_COMMODITY_TYPE:
      return Integer.valueOf(getSledCommodityType());

    case SLED_COMMODITY_CODE:
      return getSledCommodityCode();

    case IS_SIM:
      return Boolean.valueOf(isIsSim());

    case EDITSTATUS:
      return Integer.valueOf(getEditstatus());

    case WORKING_STATUS:
      return Integer.valueOf(getWorkingStatus());

    case SLED_COMMODITY_CODE_PARTICAL:
      return getSledCommodityCodePartical();

    case ENG_NAME_PARTICAL:
      return getEngNamePartical();

    case CN_NAME_PARTICAL:
      return getCnNamePartical();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_COMMODITY_IDS:
      return isSetSledCommodityIds();
    case EXCHANGE_MIC:
      return isSetExchangeMic();
    case SLED_COMMODITY_TYPE:
      return isSetSledCommodityType();
    case SLED_COMMODITY_CODE:
      return isSetSledCommodityCode();
    case IS_SIM:
      return isSetIsSim();
    case EDITSTATUS:
      return isSetEditstatus();
    case WORKING_STATUS:
      return isSetWorkingStatus();
    case SLED_COMMODITY_CODE_PARTICAL:
      return isSetSledCommodityCodePartical();
    case ENG_NAME_PARTICAL:
      return isSetEngNamePartical();
    case CN_NAME_PARTICAL:
      return isSetCnNamePartical();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqTSledCommodityOption)
      return this.equals((ReqTSledCommodityOption)that);
    return false;
  }

  public boolean equals(ReqTSledCommodityOption that) {
    if (that == null)
      return false;

    boolean this_present_sledCommodityIds = true && this.isSetSledCommodityIds();
    boolean that_present_sledCommodityIds = true && that.isSetSledCommodityIds();
    if (this_present_sledCommodityIds || that_present_sledCommodityIds) {
      if (!(this_present_sledCommodityIds && that_present_sledCommodityIds))
        return false;
      if (!this.sledCommodityIds.equals(that.sledCommodityIds))
        return false;
    }

    boolean this_present_exchangeMic = true && this.isSetExchangeMic();
    boolean that_present_exchangeMic = true && that.isSetExchangeMic();
    if (this_present_exchangeMic || that_present_exchangeMic) {
      if (!(this_present_exchangeMic && that_present_exchangeMic))
        return false;
      if (!this.exchangeMic.equals(that.exchangeMic))
        return false;
    }

    boolean this_present_sledCommodityType = true && this.isSetSledCommodityType();
    boolean that_present_sledCommodityType = true && that.isSetSledCommodityType();
    if (this_present_sledCommodityType || that_present_sledCommodityType) {
      if (!(this_present_sledCommodityType && that_present_sledCommodityType))
        return false;
      if (this.sledCommodityType != that.sledCommodityType)
        return false;
    }

    boolean this_present_sledCommodityCode = true && this.isSetSledCommodityCode();
    boolean that_present_sledCommodityCode = true && that.isSetSledCommodityCode();
    if (this_present_sledCommodityCode || that_present_sledCommodityCode) {
      if (!(this_present_sledCommodityCode && that_present_sledCommodityCode))
        return false;
      if (!this.sledCommodityCode.equals(that.sledCommodityCode))
        return false;
    }

    boolean this_present_isSim = true && this.isSetIsSim();
    boolean that_present_isSim = true && that.isSetIsSim();
    if (this_present_isSim || that_present_isSim) {
      if (!(this_present_isSim && that_present_isSim))
        return false;
      if (this.isSim != that.isSim)
        return false;
    }

    boolean this_present_editstatus = true && this.isSetEditstatus();
    boolean that_present_editstatus = true && that.isSetEditstatus();
    if (this_present_editstatus || that_present_editstatus) {
      if (!(this_present_editstatus && that_present_editstatus))
        return false;
      if (this.editstatus != that.editstatus)
        return false;
    }

    boolean this_present_workingStatus = true && this.isSetWorkingStatus();
    boolean that_present_workingStatus = true && that.isSetWorkingStatus();
    if (this_present_workingStatus || that_present_workingStatus) {
      if (!(this_present_workingStatus && that_present_workingStatus))
        return false;
      if (this.workingStatus != that.workingStatus)
        return false;
    }

    boolean this_present_sledCommodityCodePartical = true && this.isSetSledCommodityCodePartical();
    boolean that_present_sledCommodityCodePartical = true && that.isSetSledCommodityCodePartical();
    if (this_present_sledCommodityCodePartical || that_present_sledCommodityCodePartical) {
      if (!(this_present_sledCommodityCodePartical && that_present_sledCommodityCodePartical))
        return false;
      if (!this.sledCommodityCodePartical.equals(that.sledCommodityCodePartical))
        return false;
    }

    boolean this_present_engNamePartical = true && this.isSetEngNamePartical();
    boolean that_present_engNamePartical = true && that.isSetEngNamePartical();
    if (this_present_engNamePartical || that_present_engNamePartical) {
      if (!(this_present_engNamePartical && that_present_engNamePartical))
        return false;
      if (!this.engNamePartical.equals(that.engNamePartical))
        return false;
    }

    boolean this_present_cnNamePartical = true && this.isSetCnNamePartical();
    boolean that_present_cnNamePartical = true && that.isSetCnNamePartical();
    if (this_present_cnNamePartical || that_present_cnNamePartical) {
      if (!(this_present_cnNamePartical && that_present_cnNamePartical))
        return false;
      if (!this.cnNamePartical.equals(that.cnNamePartical))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqTSledCommodityOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledCommodityIds()).compareTo(other.isSetSledCommodityIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityIds, other.sledCommodityIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeMic()).compareTo(other.isSetExchangeMic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeMic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeMic, other.exchangeMic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityType()).compareTo(other.isSetSledCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityType, other.sledCommodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityCode()).compareTo(other.isSetSledCommodityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityCode, other.sledCommodityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSim()).compareTo(other.isSetIsSim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSim, other.isSim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEditstatus()).compareTo(other.isSetEditstatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEditstatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.editstatus, other.editstatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkingStatus()).compareTo(other.isSetWorkingStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkingStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workingStatus, other.workingStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityCodePartical()).compareTo(other.isSetSledCommodityCodePartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityCodePartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityCodePartical, other.sledCommodityCodePartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngNamePartical()).compareTo(other.isSetEngNamePartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngNamePartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engNamePartical, other.engNamePartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnNamePartical()).compareTo(other.isSetCnNamePartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnNamePartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnNamePartical, other.cnNamePartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqTSledCommodityOption(");
    boolean first = true;

    if (isSetSledCommodityIds()) {
      sb.append("sledCommodityIds:");
      if (this.sledCommodityIds == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityIds);
      }
      first = false;
    }
    if (isSetExchangeMic()) {
      if (!first) sb.append(", ");
      sb.append("exchangeMic:");
      if (this.exchangeMic == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeMic);
      }
      first = false;
    }
    if (isSetSledCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityType:");
      sb.append(this.sledCommodityType);
      first = false;
    }
    if (isSetSledCommodityCode()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityCode:");
      if (this.sledCommodityCode == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityCode);
      }
      first = false;
    }
    if (isSetIsSim()) {
      if (!first) sb.append(", ");
      sb.append("isSim:");
      sb.append(this.isSim);
      first = false;
    }
    if (isSetEditstatus()) {
      if (!first) sb.append(", ");
      sb.append("editstatus:");
      sb.append(this.editstatus);
      first = false;
    }
    if (isSetWorkingStatus()) {
      if (!first) sb.append(", ");
      sb.append("workingStatus:");
      sb.append(this.workingStatus);
      first = false;
    }
    if (isSetSledCommodityCodePartical()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityCodePartical:");
      if (this.sledCommodityCodePartical == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityCodePartical);
      }
      first = false;
    }
    if (isSetEngNamePartical()) {
      if (!first) sb.append(", ");
      sb.append("engNamePartical:");
      if (this.engNamePartical == null) {
        sb.append("null");
      } else {
        sb.append(this.engNamePartical);
      }
      first = false;
    }
    if (isSetCnNamePartical()) {
      if (!first) sb.append(", ");
      sb.append("cnNamePartical:");
      if (this.cnNamePartical == null) {
        sb.append("null");
      } else {
        sb.append(this.cnNamePartical);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqTSledCommodityOptionStandardSchemeFactory implements SchemeFactory {
    public ReqTSledCommodityOptionStandardScheme getScheme() {
      return new ReqTSledCommodityOptionStandardScheme();
    }
  }

  private static class ReqTSledCommodityOptionStandardScheme extends StandardScheme<ReqTSledCommodityOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqTSledCommodityOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_COMMODITY_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                struct.sledCommodityIds = new ArrayList<Integer>(_list120.size);
                for (int _i121 = 0; _i121 < _list120.size; ++_i121)
                {
                  int _elem122;
                  _elem122 = iprot.readI32();
                  struct.sledCommodityIds.add(_elem122);
                }
                iprot.readListEnd();
              }
              struct.setSledCommodityIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCHANGE_MIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeMic = iprot.readString();
              struct.setExchangeMicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLED_COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledCommodityType = iprot.readI32();
              struct.setSledCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SLED_COMMODITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledCommodityCode = iprot.readString();
              struct.setSledCommodityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_SIM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSim = iprot.readBool();
              struct.setIsSimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EDITSTATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.editstatus = iprot.readI32();
              struct.setEditstatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WORKING_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.workingStatus = iprot.readI32();
              struct.setWorkingStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SLED_COMMODITY_CODE_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledCommodityCodePartical = iprot.readString();
              struct.setSledCommodityCodeParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ENG_NAME_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engNamePartical = iprot.readString();
              struct.setEngNameParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CN_NAME_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnNamePartical = iprot.readString();
              struct.setCnNameParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqTSledCommodityOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sledCommodityIds != null) {
        if (struct.isSetSledCommodityIds()) {
          oprot.writeFieldBegin(SLED_COMMODITY_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sledCommodityIds.size()));
            for (int _iter123 : struct.sledCommodityIds)
            {
              oprot.writeI32(_iter123);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchangeMic != null) {
        if (struct.isSetExchangeMic()) {
          oprot.writeFieldBegin(EXCHANGE_MIC_FIELD_DESC);
          oprot.writeString(struct.exchangeMic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSledCommodityType()) {
        oprot.writeFieldBegin(SLED_COMMODITY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.sledCommodityType);
        oprot.writeFieldEnd();
      }
      if (struct.sledCommodityCode != null) {
        if (struct.isSetSledCommodityCode()) {
          oprot.writeFieldBegin(SLED_COMMODITY_CODE_FIELD_DESC);
          oprot.writeString(struct.sledCommodityCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsSim()) {
        oprot.writeFieldBegin(IS_SIM_FIELD_DESC);
        oprot.writeBool(struct.isSim);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEditstatus()) {
        oprot.writeFieldBegin(EDITSTATUS_FIELD_DESC);
        oprot.writeI32(struct.editstatus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWorkingStatus()) {
        oprot.writeFieldBegin(WORKING_STATUS_FIELD_DESC);
        oprot.writeI32(struct.workingStatus);
        oprot.writeFieldEnd();
      }
      if (struct.sledCommodityCodePartical != null) {
        if (struct.isSetSledCommodityCodePartical()) {
          oprot.writeFieldBegin(SLED_COMMODITY_CODE_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.sledCommodityCodePartical);
          oprot.writeFieldEnd();
        }
      }
      if (struct.engNamePartical != null) {
        if (struct.isSetEngNamePartical()) {
          oprot.writeFieldBegin(ENG_NAME_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.engNamePartical);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cnNamePartical != null) {
        if (struct.isSetCnNamePartical()) {
          oprot.writeFieldBegin(CN_NAME_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.cnNamePartical);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqTSledCommodityOptionTupleSchemeFactory implements SchemeFactory {
    public ReqTSledCommodityOptionTupleScheme getScheme() {
      return new ReqTSledCommodityOptionTupleScheme();
    }
  }

  private static class ReqTSledCommodityOptionTupleScheme extends TupleScheme<ReqTSledCommodityOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqTSledCommodityOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledCommodityIds()) {
        optionals.set(0);
      }
      if (struct.isSetExchangeMic()) {
        optionals.set(1);
      }
      if (struct.isSetSledCommodityType()) {
        optionals.set(2);
      }
      if (struct.isSetSledCommodityCode()) {
        optionals.set(3);
      }
      if (struct.isSetIsSim()) {
        optionals.set(4);
      }
      if (struct.isSetEditstatus()) {
        optionals.set(5);
      }
      if (struct.isSetWorkingStatus()) {
        optionals.set(6);
      }
      if (struct.isSetSledCommodityCodePartical()) {
        optionals.set(7);
      }
      if (struct.isSetEngNamePartical()) {
        optionals.set(8);
      }
      if (struct.isSetCnNamePartical()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetSledCommodityIds()) {
        {
          oprot.writeI32(struct.sledCommodityIds.size());
          for (int _iter124 : struct.sledCommodityIds)
          {
            oprot.writeI32(_iter124);
          }
        }
      }
      if (struct.isSetExchangeMic()) {
        oprot.writeString(struct.exchangeMic);
      }
      if (struct.isSetSledCommodityType()) {
        oprot.writeI32(struct.sledCommodityType);
      }
      if (struct.isSetSledCommodityCode()) {
        oprot.writeString(struct.sledCommodityCode);
      }
      if (struct.isSetIsSim()) {
        oprot.writeBool(struct.isSim);
      }
      if (struct.isSetEditstatus()) {
        oprot.writeI32(struct.editstatus);
      }
      if (struct.isSetWorkingStatus()) {
        oprot.writeI32(struct.workingStatus);
      }
      if (struct.isSetSledCommodityCodePartical()) {
        oprot.writeString(struct.sledCommodityCodePartical);
      }
      if (struct.isSetEngNamePartical()) {
        oprot.writeString(struct.engNamePartical);
      }
      if (struct.isSetCnNamePartical()) {
        oprot.writeString(struct.cnNamePartical);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqTSledCommodityOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.sledCommodityIds = new ArrayList<Integer>(_list125.size);
          for (int _i126 = 0; _i126 < _list125.size; ++_i126)
          {
            int _elem127;
            _elem127 = iprot.readI32();
            struct.sledCommodityIds.add(_elem127);
          }
        }
        struct.setSledCommodityIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exchangeMic = iprot.readString();
        struct.setExchangeMicIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sledCommodityType = iprot.readI32();
        struct.setSledCommodityTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sledCommodityCode = iprot.readString();
        struct.setSledCommodityCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isSim = iprot.readBool();
        struct.setIsSimIsSet(true);
      }
      if (incoming.get(5)) {
        struct.editstatus = iprot.readI32();
        struct.setEditstatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.workingStatus = iprot.readI32();
        struct.setWorkingStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sledCommodityCodePartical = iprot.readString();
        struct.setSledCommodityCodeParticalIsSet(true);
      }
      if (incoming.get(8)) {
        struct.engNamePartical = iprot.readString();
        struct.setEngNameParticalIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cnNamePartical = iprot.readString();
        struct.setCnNameParticalIsSet(true);
      }
    }
  }

}

