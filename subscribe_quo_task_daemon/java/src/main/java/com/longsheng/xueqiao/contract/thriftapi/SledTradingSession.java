/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SledTradingSession implements org.apache.thrift.TBase<SledTradingSession, SledTradingSession._Fields>, java.io.Serializable, Cloneable, Comparable<SledTradingSession> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SledTradingSession");

  private static final org.apache.thrift.protocol.TField TRADE_SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeSessionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ZONE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("zoneId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_SPANS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeSpans", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField TIME_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("timeSystem", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestamp", org.apache.thrift.protocol.TType.I64, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SledTradingSessionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SledTradingSessionTupleSchemeFactory());
  }

  public long tradeSessionId; // optional
  public int sledCommodityId; // optional
  public String zoneId; // optional
  public List<SledTradingSessionTimeSpan> timeSpans; // optional
  /**
   * 
   * @see TimeSystem
   */
  public TimeSystem timeSystem; // optional
  public long createTimestamp; // optional
  public long lastModifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADE_SESSION_ID((short)1, "tradeSessionId"),
    SLED_COMMODITY_ID((short)2, "sledCommodityId"),
    ZONE_ID((short)3, "zoneId"),
    TIME_SPANS((short)4, "timeSpans"),
    /**
     * 
     * @see TimeSystem
     */
    TIME_SYSTEM((short)5, "timeSystem"),
    CREATE_TIMESTAMP((short)9, "createTimestamp"),
    LAST_MODIFY_TIMESTAMP((short)10, "lastModifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADE_SESSION_ID
          return TRADE_SESSION_ID;
        case 2: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 3: // ZONE_ID
          return ZONE_ID;
        case 4: // TIME_SPANS
          return TIME_SPANS;
        case 5: // TIME_SYSTEM
          return TIME_SYSTEM;
        case 9: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 10: // LAST_MODIFY_TIMESTAMP
          return LAST_MODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRADESESSIONID_ISSET_ID = 0;
  private static final int __SLEDCOMMODITYID_ISSET_ID = 1;
  private static final int __CREATETIMESTAMP_ISSET_ID = 2;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TRADE_SESSION_ID,_Fields.SLED_COMMODITY_ID,_Fields.ZONE_ID,_Fields.TIME_SPANS,_Fields.TIME_SYSTEM,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADE_SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeSessionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ZONE_ID, new org.apache.thrift.meta_data.FieldMetaData("zoneId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_SPANS, new org.apache.thrift.meta_data.FieldMetaData("timeSpans", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SledTradingSessionTimeSpan.class))));
    tmpMap.put(_Fields.TIME_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("timeSystem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TimeSystem.class)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SledTradingSession.class, metaDataMap);
  }

  public SledTradingSession() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SledTradingSession(SledTradingSession other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tradeSessionId = other.tradeSessionId;
    this.sledCommodityId = other.sledCommodityId;
    if (other.isSetZoneId()) {
      this.zoneId = other.zoneId;
    }
    if (other.isSetTimeSpans()) {
      List<SledTradingSessionTimeSpan> __this__timeSpans = new ArrayList<SledTradingSessionTimeSpan>(other.timeSpans.size());
      for (SledTradingSessionTimeSpan other_element : other.timeSpans) {
        __this__timeSpans.add(new SledTradingSessionTimeSpan(other_element));
      }
      this.timeSpans = __this__timeSpans;
    }
    if (other.isSetTimeSystem()) {
      this.timeSystem = other.timeSystem;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastModifyTimestamp = other.lastModifyTimestamp;
  }

  public SledTradingSession deepCopy() {
    return new SledTradingSession(this);
  }

  @Override
  public void clear() {
    setTradeSessionIdIsSet(false);
    this.tradeSessionId = 0;
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    this.zoneId = null;
    this.timeSpans = null;
    this.timeSystem = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModifyTimestampIsSet(false);
    this.lastModifyTimestamp = 0;
  }

  public long getTradeSessionId() {
    return this.tradeSessionId;
  }

  public SledTradingSession setTradeSessionId(long tradeSessionId) {
    this.tradeSessionId = tradeSessionId;
    setTradeSessionIdIsSet(true);
    return this;
  }

  public void unsetTradeSessionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADESESSIONID_ISSET_ID);
  }

  /** Returns true if field tradeSessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeSessionId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADESESSIONID_ISSET_ID);
  }

  public void setTradeSessionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADESESSIONID_ISSET_ID, value);
  }

  public int getSledCommodityId() {
    return this.sledCommodityId;
  }

  public SledTradingSession setSledCommodityId(int sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public String getZoneId() {
    return this.zoneId;
  }

  public SledTradingSession setZoneId(String zoneId) {
    this.zoneId = zoneId;
    return this;
  }

  public void unsetZoneId() {
    this.zoneId = null;
  }

  /** Returns true if field zoneId is set (has been assigned a value) and false otherwise */
  public boolean isSetZoneId() {
    return this.zoneId != null;
  }

  public void setZoneIdIsSet(boolean value) {
    if (!value) {
      this.zoneId = null;
    }
  }

  public int getTimeSpansSize() {
    return (this.timeSpans == null) ? 0 : this.timeSpans.size();
  }

  public java.util.Iterator<SledTradingSessionTimeSpan> getTimeSpansIterator() {
    return (this.timeSpans == null) ? null : this.timeSpans.iterator();
  }

  public void addToTimeSpans(SledTradingSessionTimeSpan elem) {
    if (this.timeSpans == null) {
      this.timeSpans = new ArrayList<SledTradingSessionTimeSpan>();
    }
    this.timeSpans.add(elem);
  }

  public List<SledTradingSessionTimeSpan> getTimeSpans() {
    return this.timeSpans;
  }

  public SledTradingSession setTimeSpans(List<SledTradingSessionTimeSpan> timeSpans) {
    this.timeSpans = timeSpans;
    return this;
  }

  public void unsetTimeSpans() {
    this.timeSpans = null;
  }

  /** Returns true if field timeSpans is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeSpans() {
    return this.timeSpans != null;
  }

  public void setTimeSpansIsSet(boolean value) {
    if (!value) {
      this.timeSpans = null;
    }
  }

  /**
   * 
   * @see TimeSystem
   */
  public TimeSystem getTimeSystem() {
    return this.timeSystem;
  }

  /**
   * 
   * @see TimeSystem
   */
  public SledTradingSession setTimeSystem(TimeSystem timeSystem) {
    this.timeSystem = timeSystem;
    return this;
  }

  public void unsetTimeSystem() {
    this.timeSystem = null;
  }

  /** Returns true if field timeSystem is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeSystem() {
    return this.timeSystem != null;
  }

  public void setTimeSystemIsSet(boolean value) {
    if (!value) {
      this.timeSystem = null;
    }
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public SledTradingSession setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModifyTimestamp() {
    return this.lastModifyTimestamp;
  }

  public SledTradingSession setLastModifyTimestamp(long lastModifyTimestamp) {
    this.lastModifyTimestamp = lastModifyTimestamp;
    setLastModifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastModifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADE_SESSION_ID:
      if (value == null) {
        unsetTradeSessionId();
      } else {
        setTradeSessionId((Long)value);
      }
      break;

    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Integer)value);
      }
      break;

    case ZONE_ID:
      if (value == null) {
        unsetZoneId();
      } else {
        setZoneId((String)value);
      }
      break;

    case TIME_SPANS:
      if (value == null) {
        unsetTimeSpans();
      } else {
        setTimeSpans((List<SledTradingSessionTimeSpan>)value);
      }
      break;

    case TIME_SYSTEM:
      if (value == null) {
        unsetTimeSystem();
      } else {
        setTimeSystem((TimeSystem)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastModifyTimestamp();
      } else {
        setLastModifyTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADE_SESSION_ID:
      return Long.valueOf(getTradeSessionId());

    case SLED_COMMODITY_ID:
      return Integer.valueOf(getSledCommodityId());

    case ZONE_ID:
      return getZoneId();

    case TIME_SPANS:
      return getTimeSpans();

    case TIME_SYSTEM:
      return getTimeSystem();

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODIFY_TIMESTAMP:
      return Long.valueOf(getLastModifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADE_SESSION_ID:
      return isSetTradeSessionId();
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case ZONE_ID:
      return isSetZoneId();
    case TIME_SPANS:
      return isSetTimeSpans();
    case TIME_SYSTEM:
      return isSetTimeSystem();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODIFY_TIMESTAMP:
      return isSetLastModifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SledTradingSession)
      return this.equals((SledTradingSession)that);
    return false;
  }

  public boolean equals(SledTradingSession that) {
    if (that == null)
      return false;

    boolean this_present_tradeSessionId = true && this.isSetTradeSessionId();
    boolean that_present_tradeSessionId = true && that.isSetTradeSessionId();
    if (this_present_tradeSessionId || that_present_tradeSessionId) {
      if (!(this_present_tradeSessionId && that_present_tradeSessionId))
        return false;
      if (this.tradeSessionId != that.tradeSessionId)
        return false;
    }

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_zoneId = true && this.isSetZoneId();
    boolean that_present_zoneId = true && that.isSetZoneId();
    if (this_present_zoneId || that_present_zoneId) {
      if (!(this_present_zoneId && that_present_zoneId))
        return false;
      if (!this.zoneId.equals(that.zoneId))
        return false;
    }

    boolean this_present_timeSpans = true && this.isSetTimeSpans();
    boolean that_present_timeSpans = true && that.isSetTimeSpans();
    if (this_present_timeSpans || that_present_timeSpans) {
      if (!(this_present_timeSpans && that_present_timeSpans))
        return false;
      if (!this.timeSpans.equals(that.timeSpans))
        return false;
    }

    boolean this_present_timeSystem = true && this.isSetTimeSystem();
    boolean that_present_timeSystem = true && that.isSetTimeSystem();
    if (this_present_timeSystem || that_present_timeSystem) {
      if (!(this_present_timeSystem && that_present_timeSystem))
        return false;
      if (!this.timeSystem.equals(that.timeSystem))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModifyTimestamp = true && this.isSetLastModifyTimestamp();
    boolean that_present_lastModifyTimestamp = true && that.isSetLastModifyTimestamp();
    if (this_present_lastModifyTimestamp || that_present_lastModifyTimestamp) {
      if (!(this_present_lastModifyTimestamp && that_present_lastModifyTimestamp))
        return false;
      if (this.lastModifyTimestamp != that.lastModifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SledTradingSession other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradeSessionId()).compareTo(other.isSetTradeSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeSessionId, other.tradeSessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZoneId()).compareTo(other.isSetZoneId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZoneId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoneId, other.zoneId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeSpans()).compareTo(other.isSetTimeSpans());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeSpans()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeSpans, other.timeSpans);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeSystem()).compareTo(other.isSetTimeSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeSystem, other.timeSystem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestamp()).compareTo(other.isSetLastModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestamp, other.lastModifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SledTradingSession(");
    boolean first = true;

    if (isSetTradeSessionId()) {
      sb.append("tradeSessionId:");
      sb.append(this.tradeSessionId);
      first = false;
    }
    if (isSetSledCommodityId()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetZoneId()) {
      if (!first) sb.append(", ");
      sb.append("zoneId:");
      if (this.zoneId == null) {
        sb.append("null");
      } else {
        sb.append(this.zoneId);
      }
      first = false;
    }
    if (isSetTimeSpans()) {
      if (!first) sb.append(", ");
      sb.append("timeSpans:");
      if (this.timeSpans == null) {
        sb.append("null");
      } else {
        sb.append(this.timeSpans);
      }
      first = false;
    }
    if (isSetTimeSystem()) {
      if (!first) sb.append(", ");
      sb.append("timeSystem:");
      if (this.timeSystem == null) {
        sb.append("null");
      } else {
        sb.append(this.timeSystem);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestamp:");
      sb.append(this.lastModifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SledTradingSessionStandardSchemeFactory implements SchemeFactory {
    public SledTradingSessionStandardScheme getScheme() {
      return new SledTradingSessionStandardScheme();
    }
  }

  private static class SledTradingSessionStandardScheme extends StandardScheme<SledTradingSession> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SledTradingSession struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADE_SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tradeSessionId = iprot.readI64();
              struct.setTradeSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledCommodityId = iprot.readI32();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ZONE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zoneId = iprot.readString();
              struct.setZoneIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME_SPANS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list280 = iprot.readListBegin();
                struct.timeSpans = new ArrayList<SledTradingSessionTimeSpan>(_list280.size);
                for (int _i281 = 0; _i281 < _list280.size; ++_i281)
                {
                  SledTradingSessionTimeSpan _elem282;
                  _elem282 = new SledTradingSessionTimeSpan();
                  _elem282.read(iprot);
                  struct.timeSpans.add(_elem282);
                }
                iprot.readListEnd();
              }
              struct.setTimeSpansIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIME_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeSystem = TimeSystem.findByValue(iprot.readI32());
              struct.setTimeSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LAST_MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestamp = iprot.readI64();
              struct.setLastModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SledTradingSession struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTradeSessionId()) {
        oprot.writeFieldBegin(TRADE_SESSION_ID_FIELD_DESC);
        oprot.writeI64(struct.tradeSessionId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI32(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.zoneId != null) {
        if (struct.isSetZoneId()) {
          oprot.writeFieldBegin(ZONE_ID_FIELD_DESC);
          oprot.writeString(struct.zoneId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.timeSpans != null) {
        if (struct.isSetTimeSpans()) {
          oprot.writeFieldBegin(TIME_SPANS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.timeSpans.size()));
            for (SledTradingSessionTimeSpan _iter283 : struct.timeSpans)
            {
              _iter283.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.timeSystem != null) {
        if (struct.isSetTimeSystem()) {
          oprot.writeFieldBegin(TIME_SYSTEM_FIELD_DESC);
          oprot.writeI32(struct.timeSystem.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SledTradingSessionTupleSchemeFactory implements SchemeFactory {
    public SledTradingSessionTupleScheme getScheme() {
      return new SledTradingSessionTupleScheme();
    }
  }

  private static class SledTradingSessionTupleScheme extends TupleScheme<SledTradingSession> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SledTradingSession struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradeSessionId()) {
        optionals.set(0);
      }
      if (struct.isSetSledCommodityId()) {
        optionals.set(1);
      }
      if (struct.isSetZoneId()) {
        optionals.set(2);
      }
      if (struct.isSetTimeSpans()) {
        optionals.set(3);
      }
      if (struct.isSetTimeSystem()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(5);
      }
      if (struct.isSetLastModifyTimestamp()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetTradeSessionId()) {
        oprot.writeI64(struct.tradeSessionId);
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeI32(struct.sledCommodityId);
      }
      if (struct.isSetZoneId()) {
        oprot.writeString(struct.zoneId);
      }
      if (struct.isSetTimeSpans()) {
        {
          oprot.writeI32(struct.timeSpans.size());
          for (SledTradingSessionTimeSpan _iter284 : struct.timeSpans)
          {
            _iter284.write(oprot);
          }
        }
      }
      if (struct.isSetTimeSystem()) {
        oprot.writeI32(struct.timeSystem.getValue());
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeI64(struct.lastModifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SledTradingSession struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.tradeSessionId = iprot.readI64();
        struct.setTradeSessionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledCommodityId = iprot.readI32();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.zoneId = iprot.readString();
        struct.setZoneIdIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list285 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.timeSpans = new ArrayList<SledTradingSessionTimeSpan>(_list285.size);
          for (int _i286 = 0; _i286 < _list285.size; ++_i286)
          {
            SledTradingSessionTimeSpan _elem287;
            _elem287 = new SledTradingSessionTimeSpan();
            _elem287.read(iprot);
            struct.timeSpans.add(_elem287);
          }
        }
        struct.setTimeSpansIsSet(true);
      }
      if (incoming.get(4)) {
        struct.timeSystem = TimeSystem.findByValue(iprot.readI32());
        struct.setTimeSystemIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastModifyTimestamp = iprot.readI64();
        struct.setLastModifyTimestampIsSet(true);
      }
    }
  }

}

