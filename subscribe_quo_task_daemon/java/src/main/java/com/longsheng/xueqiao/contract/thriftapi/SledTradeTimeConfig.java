/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SledTradeTimeConfig implements org.apache.thrift.TBase<SledTradeTimeConfig, SledTradeTimeConfig._Fields>, java.io.Serializable, Cloneable, Comparable<SledTradeTimeConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SledTradeTimeConfig");

  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STANDARD_WEEK_TRADE_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("standardWeekTradeTimes", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField ZONE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("zoneId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DST_WEEK_TRADE_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("dstWeekTradeTimes", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestamp", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField DST_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("dstExists", org.apache.thrift.protocol.TType.BOOL, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SledTradeTimeConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SledTradeTimeConfigTupleSchemeFactory());
  }

  public int sledCommodityId; // optional
  public Map<Days,DayTradeTime> standardWeekTradeTimes; // optional
  public String zoneId; // optional
  public Map<Days,DayTradeTime> dstWeekTradeTimes; // optional
  public long createTimestamp; // optional
  public long lastModifyTimestamp; // optional
  public boolean dstExists; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_COMMODITY_ID((short)1, "sledCommodityId"),
    STANDARD_WEEK_TRADE_TIMES((short)2, "standardWeekTradeTimes"),
    ZONE_ID((short)3, "zoneId"),
    DST_WEEK_TRADE_TIMES((short)4, "dstWeekTradeTimes"),
    CREATE_TIMESTAMP((short)7, "createTimestamp"),
    LAST_MODIFY_TIMESTAMP((short)8, "lastModifyTimestamp"),
    DST_EXISTS((short)9, "dstExists");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 2: // STANDARD_WEEK_TRADE_TIMES
          return STANDARD_WEEK_TRADE_TIMES;
        case 3: // ZONE_ID
          return ZONE_ID;
        case 4: // DST_WEEK_TRADE_TIMES
          return DST_WEEK_TRADE_TIMES;
        case 7: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 8: // LAST_MODIFY_TIMESTAMP
          return LAST_MODIFY_TIMESTAMP;
        case 9: // DST_EXISTS
          return DST_EXISTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDCOMMODITYID_ISSET_ID = 0;
  private static final int __CREATETIMESTAMP_ISSET_ID = 1;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 2;
  private static final int __DSTEXISTS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_COMMODITY_ID,_Fields.STANDARD_WEEK_TRADE_TIMES,_Fields.ZONE_ID,_Fields.DST_WEEK_TRADE_TIMES,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODIFY_TIMESTAMP,_Fields.DST_EXISTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STANDARD_WEEK_TRADE_TIMES, new org.apache.thrift.meta_data.FieldMetaData("standardWeekTradeTimes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Days.class), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DayTradeTime.class))));
    tmpMap.put(_Fields.ZONE_ID, new org.apache.thrift.meta_data.FieldMetaData("zoneId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DST_WEEK_TRADE_TIMES, new org.apache.thrift.meta_data.FieldMetaData("dstWeekTradeTimes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Days.class), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DayTradeTime.class))));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DST_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("dstExists", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SledTradeTimeConfig.class, metaDataMap);
  }

  public SledTradeTimeConfig() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SledTradeTimeConfig(SledTradeTimeConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sledCommodityId = other.sledCommodityId;
    if (other.isSetStandardWeekTradeTimes()) {
      Map<Days,DayTradeTime> __this__standardWeekTradeTimes = new HashMap<Days,DayTradeTime>(other.standardWeekTradeTimes.size());
      for (Map.Entry<Days, DayTradeTime> other_element : other.standardWeekTradeTimes.entrySet()) {

        Days other_element_key = other_element.getKey();
        DayTradeTime other_element_value = other_element.getValue();

        Days __this__standardWeekTradeTimes_copy_key = other_element_key;

        DayTradeTime __this__standardWeekTradeTimes_copy_value = new DayTradeTime(other_element_value);

        __this__standardWeekTradeTimes.put(__this__standardWeekTradeTimes_copy_key, __this__standardWeekTradeTimes_copy_value);
      }
      this.standardWeekTradeTimes = __this__standardWeekTradeTimes;
    }
    if (other.isSetZoneId()) {
      this.zoneId = other.zoneId;
    }
    if (other.isSetDstWeekTradeTimes()) {
      Map<Days,DayTradeTime> __this__dstWeekTradeTimes = new HashMap<Days,DayTradeTime>(other.dstWeekTradeTimes.size());
      for (Map.Entry<Days, DayTradeTime> other_element : other.dstWeekTradeTimes.entrySet()) {

        Days other_element_key = other_element.getKey();
        DayTradeTime other_element_value = other_element.getValue();

        Days __this__dstWeekTradeTimes_copy_key = other_element_key;

        DayTradeTime __this__dstWeekTradeTimes_copy_value = new DayTradeTime(other_element_value);

        __this__dstWeekTradeTimes.put(__this__dstWeekTradeTimes_copy_key, __this__dstWeekTradeTimes_copy_value);
      }
      this.dstWeekTradeTimes = __this__dstWeekTradeTimes;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastModifyTimestamp = other.lastModifyTimestamp;
    this.dstExists = other.dstExists;
  }

  public SledTradeTimeConfig deepCopy() {
    return new SledTradeTimeConfig(this);
  }

  @Override
  public void clear() {
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    this.standardWeekTradeTimes = null;
    this.zoneId = null;
    this.dstWeekTradeTimes = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModifyTimestampIsSet(false);
    this.lastModifyTimestamp = 0;
    setDstExistsIsSet(false);
    this.dstExists = false;
  }

  public int getSledCommodityId() {
    return this.sledCommodityId;
  }

  public SledTradeTimeConfig setSledCommodityId(int sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public int getStandardWeekTradeTimesSize() {
    return (this.standardWeekTradeTimes == null) ? 0 : this.standardWeekTradeTimes.size();
  }

  public void putToStandardWeekTradeTimes(Days key, DayTradeTime val) {
    if (this.standardWeekTradeTimes == null) {
      this.standardWeekTradeTimes = new HashMap<Days,DayTradeTime>();
    }
    this.standardWeekTradeTimes.put(key, val);
  }

  public Map<Days,DayTradeTime> getStandardWeekTradeTimes() {
    return this.standardWeekTradeTimes;
  }

  public SledTradeTimeConfig setStandardWeekTradeTimes(Map<Days,DayTradeTime> standardWeekTradeTimes) {
    this.standardWeekTradeTimes = standardWeekTradeTimes;
    return this;
  }

  public void unsetStandardWeekTradeTimes() {
    this.standardWeekTradeTimes = null;
  }

  /** Returns true if field standardWeekTradeTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetStandardWeekTradeTimes() {
    return this.standardWeekTradeTimes != null;
  }

  public void setStandardWeekTradeTimesIsSet(boolean value) {
    if (!value) {
      this.standardWeekTradeTimes = null;
    }
  }

  public String getZoneId() {
    return this.zoneId;
  }

  public SledTradeTimeConfig setZoneId(String zoneId) {
    this.zoneId = zoneId;
    return this;
  }

  public void unsetZoneId() {
    this.zoneId = null;
  }

  /** Returns true if field zoneId is set (has been assigned a value) and false otherwise */
  public boolean isSetZoneId() {
    return this.zoneId != null;
  }

  public void setZoneIdIsSet(boolean value) {
    if (!value) {
      this.zoneId = null;
    }
  }

  public int getDstWeekTradeTimesSize() {
    return (this.dstWeekTradeTimes == null) ? 0 : this.dstWeekTradeTimes.size();
  }

  public void putToDstWeekTradeTimes(Days key, DayTradeTime val) {
    if (this.dstWeekTradeTimes == null) {
      this.dstWeekTradeTimes = new HashMap<Days,DayTradeTime>();
    }
    this.dstWeekTradeTimes.put(key, val);
  }

  public Map<Days,DayTradeTime> getDstWeekTradeTimes() {
    return this.dstWeekTradeTimes;
  }

  public SledTradeTimeConfig setDstWeekTradeTimes(Map<Days,DayTradeTime> dstWeekTradeTimes) {
    this.dstWeekTradeTimes = dstWeekTradeTimes;
    return this;
  }

  public void unsetDstWeekTradeTimes() {
    this.dstWeekTradeTimes = null;
  }

  /** Returns true if field dstWeekTradeTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetDstWeekTradeTimes() {
    return this.dstWeekTradeTimes != null;
  }

  public void setDstWeekTradeTimesIsSet(boolean value) {
    if (!value) {
      this.dstWeekTradeTimes = null;
    }
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public SledTradeTimeConfig setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModifyTimestamp() {
    return this.lastModifyTimestamp;
  }

  public SledTradeTimeConfig setLastModifyTimestamp(long lastModifyTimestamp) {
    this.lastModifyTimestamp = lastModifyTimestamp;
    setLastModifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastModifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public boolean isDstExists() {
    return this.dstExists;
  }

  public SledTradeTimeConfig setDstExists(boolean dstExists) {
    this.dstExists = dstExists;
    setDstExistsIsSet(true);
    return this;
  }

  public void unsetDstExists() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DSTEXISTS_ISSET_ID);
  }

  /** Returns true if field dstExists is set (has been assigned a value) and false otherwise */
  public boolean isSetDstExists() {
    return EncodingUtils.testBit(__isset_bitfield, __DSTEXISTS_ISSET_ID);
  }

  public void setDstExistsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DSTEXISTS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Integer)value);
      }
      break;

    case STANDARD_WEEK_TRADE_TIMES:
      if (value == null) {
        unsetStandardWeekTradeTimes();
      } else {
        setStandardWeekTradeTimes((Map<Days,DayTradeTime>)value);
      }
      break;

    case ZONE_ID:
      if (value == null) {
        unsetZoneId();
      } else {
        setZoneId((String)value);
      }
      break;

    case DST_WEEK_TRADE_TIMES:
      if (value == null) {
        unsetDstWeekTradeTimes();
      } else {
        setDstWeekTradeTimes((Map<Days,DayTradeTime>)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastModifyTimestamp();
      } else {
        setLastModifyTimestamp((Long)value);
      }
      break;

    case DST_EXISTS:
      if (value == null) {
        unsetDstExists();
      } else {
        setDstExists((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_COMMODITY_ID:
      return Integer.valueOf(getSledCommodityId());

    case STANDARD_WEEK_TRADE_TIMES:
      return getStandardWeekTradeTimes();

    case ZONE_ID:
      return getZoneId();

    case DST_WEEK_TRADE_TIMES:
      return getDstWeekTradeTimes();

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODIFY_TIMESTAMP:
      return Long.valueOf(getLastModifyTimestamp());

    case DST_EXISTS:
      return Boolean.valueOf(isDstExists());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case STANDARD_WEEK_TRADE_TIMES:
      return isSetStandardWeekTradeTimes();
    case ZONE_ID:
      return isSetZoneId();
    case DST_WEEK_TRADE_TIMES:
      return isSetDstWeekTradeTimes();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODIFY_TIMESTAMP:
      return isSetLastModifyTimestamp();
    case DST_EXISTS:
      return isSetDstExists();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SledTradeTimeConfig)
      return this.equals((SledTradeTimeConfig)that);
    return false;
  }

  public boolean equals(SledTradeTimeConfig that) {
    if (that == null)
      return false;

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_standardWeekTradeTimes = true && this.isSetStandardWeekTradeTimes();
    boolean that_present_standardWeekTradeTimes = true && that.isSetStandardWeekTradeTimes();
    if (this_present_standardWeekTradeTimes || that_present_standardWeekTradeTimes) {
      if (!(this_present_standardWeekTradeTimes && that_present_standardWeekTradeTimes))
        return false;
      if (!this.standardWeekTradeTimes.equals(that.standardWeekTradeTimes))
        return false;
    }

    boolean this_present_zoneId = true && this.isSetZoneId();
    boolean that_present_zoneId = true && that.isSetZoneId();
    if (this_present_zoneId || that_present_zoneId) {
      if (!(this_present_zoneId && that_present_zoneId))
        return false;
      if (!this.zoneId.equals(that.zoneId))
        return false;
    }

    boolean this_present_dstWeekTradeTimes = true && this.isSetDstWeekTradeTimes();
    boolean that_present_dstWeekTradeTimes = true && that.isSetDstWeekTradeTimes();
    if (this_present_dstWeekTradeTimes || that_present_dstWeekTradeTimes) {
      if (!(this_present_dstWeekTradeTimes && that_present_dstWeekTradeTimes))
        return false;
      if (!this.dstWeekTradeTimes.equals(that.dstWeekTradeTimes))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModifyTimestamp = true && this.isSetLastModifyTimestamp();
    boolean that_present_lastModifyTimestamp = true && that.isSetLastModifyTimestamp();
    if (this_present_lastModifyTimestamp || that_present_lastModifyTimestamp) {
      if (!(this_present_lastModifyTimestamp && that_present_lastModifyTimestamp))
        return false;
      if (this.lastModifyTimestamp != that.lastModifyTimestamp)
        return false;
    }

    boolean this_present_dstExists = true && this.isSetDstExists();
    boolean that_present_dstExists = true && that.isSetDstExists();
    if (this_present_dstExists || that_present_dstExists) {
      if (!(this_present_dstExists && that_present_dstExists))
        return false;
      if (this.dstExists != that.dstExists)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SledTradeTimeConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStandardWeekTradeTimes()).compareTo(other.isSetStandardWeekTradeTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStandardWeekTradeTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.standardWeekTradeTimes, other.standardWeekTradeTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZoneId()).compareTo(other.isSetZoneId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZoneId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoneId, other.zoneId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDstWeekTradeTimes()).compareTo(other.isSetDstWeekTradeTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDstWeekTradeTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstWeekTradeTimes, other.dstWeekTradeTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestamp()).compareTo(other.isSetLastModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestamp, other.lastModifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDstExists()).compareTo(other.isSetDstExists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDstExists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstExists, other.dstExists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SledTradeTimeConfig(");
    boolean first = true;

    if (isSetSledCommodityId()) {
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetStandardWeekTradeTimes()) {
      if (!first) sb.append(", ");
      sb.append("standardWeekTradeTimes:");
      if (this.standardWeekTradeTimes == null) {
        sb.append("null");
      } else {
        sb.append(this.standardWeekTradeTimes);
      }
      first = false;
    }
    if (isSetZoneId()) {
      if (!first) sb.append(", ");
      sb.append("zoneId:");
      if (this.zoneId == null) {
        sb.append("null");
      } else {
        sb.append(this.zoneId);
      }
      first = false;
    }
    if (isSetDstWeekTradeTimes()) {
      if (!first) sb.append(", ");
      sb.append("dstWeekTradeTimes:");
      if (this.dstWeekTradeTimes == null) {
        sb.append("null");
      } else {
        sb.append(this.dstWeekTradeTimes);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestamp:");
      sb.append(this.lastModifyTimestamp);
      first = false;
    }
    if (isSetDstExists()) {
      if (!first) sb.append(", ");
      sb.append("dstExists:");
      sb.append(this.dstExists);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SledTradeTimeConfigStandardSchemeFactory implements SchemeFactory {
    public SledTradeTimeConfigStandardScheme getScheme() {
      return new SledTradeTimeConfigStandardScheme();
    }
  }

  private static class SledTradeTimeConfigStandardScheme extends StandardScheme<SledTradeTimeConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SledTradeTimeConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledCommodityId = iprot.readI32();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STANDARD_WEEK_TRADE_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map372 = iprot.readMapBegin();
                struct.standardWeekTradeTimes = new HashMap<Days,DayTradeTime>(2*_map372.size);
                for (int _i373 = 0; _i373 < _map372.size; ++_i373)
                {
                  Days _key374;
                  DayTradeTime _val375;
                  _key374 = Days.findByValue(iprot.readI32());
                  _val375 = new DayTradeTime();
                  _val375.read(iprot);
                  struct.standardWeekTradeTimes.put(_key374, _val375);
                }
                iprot.readMapEnd();
              }
              struct.setStandardWeekTradeTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ZONE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zoneId = iprot.readString();
              struct.setZoneIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DST_WEEK_TRADE_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map376 = iprot.readMapBegin();
                struct.dstWeekTradeTimes = new HashMap<Days,DayTradeTime>(2*_map376.size);
                for (int _i377 = 0; _i377 < _map376.size; ++_i377)
                {
                  Days _key378;
                  DayTradeTime _val379;
                  _key378 = Days.findByValue(iprot.readI32());
                  _val379 = new DayTradeTime();
                  _val379.read(iprot);
                  struct.dstWeekTradeTimes.put(_key378, _val379);
                }
                iprot.readMapEnd();
              }
              struct.setDstWeekTradeTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestamp = iprot.readI64();
              struct.setLastModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DST_EXISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.dstExists = iprot.readBool();
              struct.setDstExistsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SledTradeTimeConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI32(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.standardWeekTradeTimes != null) {
        if (struct.isSetStandardWeekTradeTimes()) {
          oprot.writeFieldBegin(STANDARD_WEEK_TRADE_TIMES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.standardWeekTradeTimes.size()));
            for (Map.Entry<Days, DayTradeTime> _iter380 : struct.standardWeekTradeTimes.entrySet())
            {
              oprot.writeI32(_iter380.getKey().getValue());
              _iter380.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.zoneId != null) {
        if (struct.isSetZoneId()) {
          oprot.writeFieldBegin(ZONE_ID_FIELD_DESC);
          oprot.writeString(struct.zoneId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dstWeekTradeTimes != null) {
        if (struct.isSetDstWeekTradeTimes()) {
          oprot.writeFieldBegin(DST_WEEK_TRADE_TIMES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.dstWeekTradeTimes.size()));
            for (Map.Entry<Days, DayTradeTime> _iter381 : struct.dstWeekTradeTimes.entrySet())
            {
              oprot.writeI32(_iter381.getKey().getValue());
              _iter381.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDstExists()) {
        oprot.writeFieldBegin(DST_EXISTS_FIELD_DESC);
        oprot.writeBool(struct.dstExists);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SledTradeTimeConfigTupleSchemeFactory implements SchemeFactory {
    public SledTradeTimeConfigTupleScheme getScheme() {
      return new SledTradeTimeConfigTupleScheme();
    }
  }

  private static class SledTradeTimeConfigTupleScheme extends TupleScheme<SledTradeTimeConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SledTradeTimeConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledCommodityId()) {
        optionals.set(0);
      }
      if (struct.isSetStandardWeekTradeTimes()) {
        optionals.set(1);
      }
      if (struct.isSetZoneId()) {
        optionals.set(2);
      }
      if (struct.isSetDstWeekTradeTimes()) {
        optionals.set(3);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(4);
      }
      if (struct.isSetLastModifyTimestamp()) {
        optionals.set(5);
      }
      if (struct.isSetDstExists()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetSledCommodityId()) {
        oprot.writeI32(struct.sledCommodityId);
      }
      if (struct.isSetStandardWeekTradeTimes()) {
        {
          oprot.writeI32(struct.standardWeekTradeTimes.size());
          for (Map.Entry<Days, DayTradeTime> _iter382 : struct.standardWeekTradeTimes.entrySet())
          {
            oprot.writeI32(_iter382.getKey().getValue());
            _iter382.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetZoneId()) {
        oprot.writeString(struct.zoneId);
      }
      if (struct.isSetDstWeekTradeTimes()) {
        {
          oprot.writeI32(struct.dstWeekTradeTimes.size());
          for (Map.Entry<Days, DayTradeTime> _iter383 : struct.dstWeekTradeTimes.entrySet())
          {
            oprot.writeI32(_iter383.getKey().getValue());
            _iter383.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeI64(struct.lastModifyTimestamp);
      }
      if (struct.isSetDstExists()) {
        oprot.writeBool(struct.dstExists);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SledTradeTimeConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.sledCommodityId = iprot.readI32();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map384 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.standardWeekTradeTimes = new HashMap<Days,DayTradeTime>(2*_map384.size);
          for (int _i385 = 0; _i385 < _map384.size; ++_i385)
          {
            Days _key386;
            DayTradeTime _val387;
            _key386 = Days.findByValue(iprot.readI32());
            _val387 = new DayTradeTime();
            _val387.read(iprot);
            struct.standardWeekTradeTimes.put(_key386, _val387);
          }
        }
        struct.setStandardWeekTradeTimesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.zoneId = iprot.readString();
        struct.setZoneIdIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map388 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dstWeekTradeTimes = new HashMap<Days,DayTradeTime>(2*_map388.size);
          for (int _i389 = 0; _i389 < _map388.size; ++_i389)
          {
            Days _key390;
            DayTradeTime _val391;
            _key390 = Days.findByValue(iprot.readI32());
            _val391 = new DayTradeTime();
            _val391.read(iprot);
            struct.dstWeekTradeTimes.put(_key390, _val391);
          }
        }
        struct.setDstWeekTradeTimesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(5)) {
        struct.lastModifyTimestamp = iprot.readI64();
        struct.setLastModifyTimestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.dstExists = iprot.readBool();
        struct.setDstExistsIsSet(true);
      }
    }
  }

}

