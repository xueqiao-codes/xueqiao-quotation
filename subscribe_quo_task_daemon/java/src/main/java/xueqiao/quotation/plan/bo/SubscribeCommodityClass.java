/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.quotation.plan.bo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 订阅商品订阅类， 订阅条目需要在每天具体实例化
 */
public class SubscribeCommodityClass implements org.apache.thrift.TBase<SubscribeCommodityClass, SubscribeCommodityClass._Fields>, java.io.Serializable, Cloneable, Comparable<SubscribeCommodityClass> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubscribeCommodityClass");

  private static final org.apache.thrift.protocol.TField CLASS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("classId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_EXCHANGE_MIC_FIELD_DESC = new org.apache.thrift.protocol.TField("sledExchangeMic", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityType", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityCode", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PLATFORM_ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("platformEnv", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ACTIVE_MONTHS_FIELD_DESC = new org.apache.thrift.protocol.TField("activeMonths", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField INACTIVE_MONTHS_FIELD_DESC = new org.apache.thrift.protocol.TField("inactiveMonths", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField ACTIVE_SUBSCRIBE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("activeSubscribeNum", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField IN_ACTIVE_SUBSCRIBE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("inActiveSubscribeNum", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField SUBSCRIBE_ACCOUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("subscribeAccounts", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestampMs", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField ACTIVE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("activeType", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField FIXED_CONTRACT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("fixedContractCode", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SubscribeCommodityClassStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SubscribeCommodityClassTupleSchemeFactory());
  }

  public long classId; // optional
  public String sledExchangeMic; // optional
  public long sledCommodityId; // optional
  public short sledCommodityType; // optional
  public String sledCommodityCode; // optional
  /**
   * 
   * @see xueqiao.quotation.account.thriftapi.QuotationPlatformEnv
   */
  public xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv; // optional
  public List<Integer> activeMonths; // optional
  public List<Integer> inactiveMonths; // optional
  public int activeSubscribeNum; // optional
  public int inActiveSubscribeNum; // optional
  public List<List<SubscribeAccountClass>> subscribeAccounts; // optional
  public long createTimestampMs; // optional
  /**
   * 
   * @see xueqiao.quotation.account.thriftapi.ContractActiveType
   */
  public xueqiao.quotation.account.thriftapi.ContractActiveType activeType; // optional
  public String fixedContractCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLASS_ID((short)1, "classId"),
    SLED_EXCHANGE_MIC((short)2, "sledExchangeMic"),
    SLED_COMMODITY_ID((short)3, "sledCommodityId"),
    SLED_COMMODITY_TYPE((short)4, "sledCommodityType"),
    SLED_COMMODITY_CODE((short)5, "sledCommodityCode"),
    /**
     * 
     * @see xueqiao.quotation.account.thriftapi.QuotationPlatformEnv
     */
    PLATFORM_ENV((short)6, "platformEnv"),
    ACTIVE_MONTHS((short)7, "activeMonths"),
    INACTIVE_MONTHS((short)8, "inactiveMonths"),
    ACTIVE_SUBSCRIBE_NUM((short)10, "activeSubscribeNum"),
    IN_ACTIVE_SUBSCRIBE_NUM((short)11, "inActiveSubscribeNum"),
    SUBSCRIBE_ACCOUNTS((short)13, "subscribeAccounts"),
    CREATE_TIMESTAMP_MS((short)15, "createTimestampMs"),
    /**
     * 
     * @see xueqiao.quotation.account.thriftapi.ContractActiveType
     */
    ACTIVE_TYPE((short)17, "activeType"),
    FIXED_CONTRACT_CODE((short)18, "fixedContractCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLASS_ID
          return CLASS_ID;
        case 2: // SLED_EXCHANGE_MIC
          return SLED_EXCHANGE_MIC;
        case 3: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 4: // SLED_COMMODITY_TYPE
          return SLED_COMMODITY_TYPE;
        case 5: // SLED_COMMODITY_CODE
          return SLED_COMMODITY_CODE;
        case 6: // PLATFORM_ENV
          return PLATFORM_ENV;
        case 7: // ACTIVE_MONTHS
          return ACTIVE_MONTHS;
        case 8: // INACTIVE_MONTHS
          return INACTIVE_MONTHS;
        case 10: // ACTIVE_SUBSCRIBE_NUM
          return ACTIVE_SUBSCRIBE_NUM;
        case 11: // IN_ACTIVE_SUBSCRIBE_NUM
          return IN_ACTIVE_SUBSCRIBE_NUM;
        case 13: // SUBSCRIBE_ACCOUNTS
          return SUBSCRIBE_ACCOUNTS;
        case 15: // CREATE_TIMESTAMP_MS
          return CREATE_TIMESTAMP_MS;
        case 17: // ACTIVE_TYPE
          return ACTIVE_TYPE;
        case 18: // FIXED_CONTRACT_CODE
          return FIXED_CONTRACT_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLASSID_ISSET_ID = 0;
  private static final int __SLEDCOMMODITYID_ISSET_ID = 1;
  private static final int __SLEDCOMMODITYTYPE_ISSET_ID = 2;
  private static final int __ACTIVESUBSCRIBENUM_ISSET_ID = 3;
  private static final int __INACTIVESUBSCRIBENUM_ISSET_ID = 4;
  private static final int __CREATETIMESTAMPMS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CLASS_ID,_Fields.SLED_EXCHANGE_MIC,_Fields.SLED_COMMODITY_ID,_Fields.SLED_COMMODITY_TYPE,_Fields.SLED_COMMODITY_CODE,_Fields.PLATFORM_ENV,_Fields.ACTIVE_MONTHS,_Fields.INACTIVE_MONTHS,_Fields.ACTIVE_SUBSCRIBE_NUM,_Fields.IN_ACTIVE_SUBSCRIBE_NUM,_Fields.SUBSCRIBE_ACCOUNTS,_Fields.CREATE_TIMESTAMP_MS,_Fields.ACTIVE_TYPE,_Fields.FIXED_CONTRACT_CODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLASS_ID, new org.apache.thrift.meta_data.FieldMetaData("classId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_EXCHANGE_MIC, new org.apache.thrift.meta_data.FieldMetaData("sledExchangeMic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SLED_COMMODITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATFORM_ENV, new org.apache.thrift.meta_data.FieldMetaData("platformEnv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.quotation.account.thriftapi.QuotationPlatformEnv.class)));
    tmpMap.put(_Fields.ACTIVE_MONTHS, new org.apache.thrift.meta_data.FieldMetaData("activeMonths", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.INACTIVE_MONTHS, new org.apache.thrift.meta_data.FieldMetaData("inactiveMonths", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ACTIVE_SUBSCRIBE_NUM, new org.apache.thrift.meta_data.FieldMetaData("activeSubscribeNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IN_ACTIVE_SUBSCRIBE_NUM, new org.apache.thrift.meta_data.FieldMetaData("inActiveSubscribeNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBSCRIBE_ACCOUNTS, new org.apache.thrift.meta_data.FieldMetaData("subscribeAccounts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubscribeAccountClass.class)))));
    tmpMap.put(_Fields.CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("createTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTIVE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("activeType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.quotation.account.thriftapi.ContractActiveType.class)));
    tmpMap.put(_Fields.FIXED_CONTRACT_CODE, new org.apache.thrift.meta_data.FieldMetaData("fixedContractCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubscribeCommodityClass.class, metaDataMap);
  }

  public SubscribeCommodityClass() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubscribeCommodityClass(SubscribeCommodityClass other) {
    __isset_bitfield = other.__isset_bitfield;
    this.classId = other.classId;
    if (other.isSetSledExchangeMic()) {
      this.sledExchangeMic = other.sledExchangeMic;
    }
    this.sledCommodityId = other.sledCommodityId;
    this.sledCommodityType = other.sledCommodityType;
    if (other.isSetSledCommodityCode()) {
      this.sledCommodityCode = other.sledCommodityCode;
    }
    if (other.isSetPlatformEnv()) {
      this.platformEnv = other.platformEnv;
    }
    if (other.isSetActiveMonths()) {
      List<Integer> __this__activeMonths = new ArrayList<Integer>(other.activeMonths);
      this.activeMonths = __this__activeMonths;
    }
    if (other.isSetInactiveMonths()) {
      List<Integer> __this__inactiveMonths = new ArrayList<Integer>(other.inactiveMonths);
      this.inactiveMonths = __this__inactiveMonths;
    }
    this.activeSubscribeNum = other.activeSubscribeNum;
    this.inActiveSubscribeNum = other.inActiveSubscribeNum;
    if (other.isSetSubscribeAccounts()) {
      List<List<SubscribeAccountClass>> __this__subscribeAccounts = new ArrayList<List<SubscribeAccountClass>>(other.subscribeAccounts.size());
      for (List<SubscribeAccountClass> other_element : other.subscribeAccounts) {
        List<SubscribeAccountClass> __this__subscribeAccounts_copy = new ArrayList<SubscribeAccountClass>(other_element.size());
        for (SubscribeAccountClass other_element_element : other_element) {
          __this__subscribeAccounts_copy.add(new SubscribeAccountClass(other_element_element));
        }
        __this__subscribeAccounts.add(__this__subscribeAccounts_copy);
      }
      this.subscribeAccounts = __this__subscribeAccounts;
    }
    this.createTimestampMs = other.createTimestampMs;
    if (other.isSetActiveType()) {
      this.activeType = other.activeType;
    }
    if (other.isSetFixedContractCode()) {
      this.fixedContractCode = other.fixedContractCode;
    }
  }

  public SubscribeCommodityClass deepCopy() {
    return new SubscribeCommodityClass(this);
  }

  @Override
  public void clear() {
    setClassIdIsSet(false);
    this.classId = 0;
    this.sledExchangeMic = null;
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    setSledCommodityTypeIsSet(false);
    this.sledCommodityType = 0;
    this.sledCommodityCode = null;
    this.platformEnv = null;
    this.activeMonths = null;
    this.inactiveMonths = null;
    setActiveSubscribeNumIsSet(false);
    this.activeSubscribeNum = 0;
    setInActiveSubscribeNumIsSet(false);
    this.inActiveSubscribeNum = 0;
    this.subscribeAccounts = null;
    setCreateTimestampMsIsSet(false);
    this.createTimestampMs = 0;
    this.activeType = null;
    this.fixedContractCode = null;
  }

  public long getClassId() {
    return this.classId;
  }

  public SubscribeCommodityClass setClassId(long classId) {
    this.classId = classId;
    setClassIdIsSet(true);
    return this;
  }

  public void unsetClassId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLASSID_ISSET_ID);
  }

  /** Returns true if field classId is set (has been assigned a value) and false otherwise */
  public boolean isSetClassId() {
    return EncodingUtils.testBit(__isset_bitfield, __CLASSID_ISSET_ID);
  }

  public void setClassIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLASSID_ISSET_ID, value);
  }

  public String getSledExchangeMic() {
    return this.sledExchangeMic;
  }

  public SubscribeCommodityClass setSledExchangeMic(String sledExchangeMic) {
    this.sledExchangeMic = sledExchangeMic;
    return this;
  }

  public void unsetSledExchangeMic() {
    this.sledExchangeMic = null;
  }

  /** Returns true if field sledExchangeMic is set (has been assigned a value) and false otherwise */
  public boolean isSetSledExchangeMic() {
    return this.sledExchangeMic != null;
  }

  public void setSledExchangeMicIsSet(boolean value) {
    if (!value) {
      this.sledExchangeMic = null;
    }
  }

  public long getSledCommodityId() {
    return this.sledCommodityId;
  }

  public SubscribeCommodityClass setSledCommodityId(long sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public short getSledCommodityType() {
    return this.sledCommodityType;
  }

  public SubscribeCommodityClass setSledCommodityType(short sledCommodityType) {
    this.sledCommodityType = sledCommodityType;
    setSledCommodityTypeIsSet(true);
    return this;
  }

  public void unsetSledCommodityType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID);
  }

  /** Returns true if field sledCommodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityType() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID);
  }

  public void setSledCommodityTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID, value);
  }

  public String getSledCommodityCode() {
    return this.sledCommodityCode;
  }

  public SubscribeCommodityClass setSledCommodityCode(String sledCommodityCode) {
    this.sledCommodityCode = sledCommodityCode;
    return this;
  }

  public void unsetSledCommodityCode() {
    this.sledCommodityCode = null;
  }

  /** Returns true if field sledCommodityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityCode() {
    return this.sledCommodityCode != null;
  }

  public void setSledCommodityCodeIsSet(boolean value) {
    if (!value) {
      this.sledCommodityCode = null;
    }
  }

  /**
   * 
   * @see xueqiao.quotation.account.thriftapi.QuotationPlatformEnv
   */
  public xueqiao.quotation.account.thriftapi.QuotationPlatformEnv getPlatformEnv() {
    return this.platformEnv;
  }

  /**
   * 
   * @see xueqiao.quotation.account.thriftapi.QuotationPlatformEnv
   */
  public SubscribeCommodityClass setPlatformEnv(xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv) {
    this.platformEnv = platformEnv;
    return this;
  }

  public void unsetPlatformEnv() {
    this.platformEnv = null;
  }

  /** Returns true if field platformEnv is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformEnv() {
    return this.platformEnv != null;
  }

  public void setPlatformEnvIsSet(boolean value) {
    if (!value) {
      this.platformEnv = null;
    }
  }

  public int getActiveMonthsSize() {
    return (this.activeMonths == null) ? 0 : this.activeMonths.size();
  }

  public java.util.Iterator<Integer> getActiveMonthsIterator() {
    return (this.activeMonths == null) ? null : this.activeMonths.iterator();
  }

  public void addToActiveMonths(int elem) {
    if (this.activeMonths == null) {
      this.activeMonths = new ArrayList<Integer>();
    }
    this.activeMonths.add(elem);
  }

  public List<Integer> getActiveMonths() {
    return this.activeMonths;
  }

  public SubscribeCommodityClass setActiveMonths(List<Integer> activeMonths) {
    this.activeMonths = activeMonths;
    return this;
  }

  public void unsetActiveMonths() {
    this.activeMonths = null;
  }

  /** Returns true if field activeMonths is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveMonths() {
    return this.activeMonths != null;
  }

  public void setActiveMonthsIsSet(boolean value) {
    if (!value) {
      this.activeMonths = null;
    }
  }

  public int getInactiveMonthsSize() {
    return (this.inactiveMonths == null) ? 0 : this.inactiveMonths.size();
  }

  public java.util.Iterator<Integer> getInactiveMonthsIterator() {
    return (this.inactiveMonths == null) ? null : this.inactiveMonths.iterator();
  }

  public void addToInactiveMonths(int elem) {
    if (this.inactiveMonths == null) {
      this.inactiveMonths = new ArrayList<Integer>();
    }
    this.inactiveMonths.add(elem);
  }

  public List<Integer> getInactiveMonths() {
    return this.inactiveMonths;
  }

  public SubscribeCommodityClass setInactiveMonths(List<Integer> inactiveMonths) {
    this.inactiveMonths = inactiveMonths;
    return this;
  }

  public void unsetInactiveMonths() {
    this.inactiveMonths = null;
  }

  /** Returns true if field inactiveMonths is set (has been assigned a value) and false otherwise */
  public boolean isSetInactiveMonths() {
    return this.inactiveMonths != null;
  }

  public void setInactiveMonthsIsSet(boolean value) {
    if (!value) {
      this.inactiveMonths = null;
    }
  }

  public int getActiveSubscribeNum() {
    return this.activeSubscribeNum;
  }

  public SubscribeCommodityClass setActiveSubscribeNum(int activeSubscribeNum) {
    this.activeSubscribeNum = activeSubscribeNum;
    setActiveSubscribeNumIsSet(true);
    return this;
  }

  public void unsetActiveSubscribeNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVESUBSCRIBENUM_ISSET_ID);
  }

  /** Returns true if field activeSubscribeNum is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveSubscribeNum() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVESUBSCRIBENUM_ISSET_ID);
  }

  public void setActiveSubscribeNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVESUBSCRIBENUM_ISSET_ID, value);
  }

  public int getInActiveSubscribeNum() {
    return this.inActiveSubscribeNum;
  }

  public SubscribeCommodityClass setInActiveSubscribeNum(int inActiveSubscribeNum) {
    this.inActiveSubscribeNum = inActiveSubscribeNum;
    setInActiveSubscribeNumIsSet(true);
    return this;
  }

  public void unsetInActiveSubscribeNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INACTIVESUBSCRIBENUM_ISSET_ID);
  }

  /** Returns true if field inActiveSubscribeNum is set (has been assigned a value) and false otherwise */
  public boolean isSetInActiveSubscribeNum() {
    return EncodingUtils.testBit(__isset_bitfield, __INACTIVESUBSCRIBENUM_ISSET_ID);
  }

  public void setInActiveSubscribeNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INACTIVESUBSCRIBENUM_ISSET_ID, value);
  }

  public int getSubscribeAccountsSize() {
    return (this.subscribeAccounts == null) ? 0 : this.subscribeAccounts.size();
  }

  public java.util.Iterator<List<SubscribeAccountClass>> getSubscribeAccountsIterator() {
    return (this.subscribeAccounts == null) ? null : this.subscribeAccounts.iterator();
  }

  public void addToSubscribeAccounts(List<SubscribeAccountClass> elem) {
    if (this.subscribeAccounts == null) {
      this.subscribeAccounts = new ArrayList<List<SubscribeAccountClass>>();
    }
    this.subscribeAccounts.add(elem);
  }

  public List<List<SubscribeAccountClass>> getSubscribeAccounts() {
    return this.subscribeAccounts;
  }

  public SubscribeCommodityClass setSubscribeAccounts(List<List<SubscribeAccountClass>> subscribeAccounts) {
    this.subscribeAccounts = subscribeAccounts;
    return this;
  }

  public void unsetSubscribeAccounts() {
    this.subscribeAccounts = null;
  }

  /** Returns true if field subscribeAccounts is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscribeAccounts() {
    return this.subscribeAccounts != null;
  }

  public void setSubscribeAccountsIsSet(boolean value) {
    if (!value) {
      this.subscribeAccounts = null;
    }
  }

  public long getCreateTimestampMs() {
    return this.createTimestampMs;
  }

  public SubscribeCommodityClass setCreateTimestampMs(long createTimestampMs) {
    this.createTimestampMs = createTimestampMs;
    setCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field createTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  public void setCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID, value);
  }

  /**
   * 
   * @see xueqiao.quotation.account.thriftapi.ContractActiveType
   */
  public xueqiao.quotation.account.thriftapi.ContractActiveType getActiveType() {
    return this.activeType;
  }

  /**
   * 
   * @see xueqiao.quotation.account.thriftapi.ContractActiveType
   */
  public SubscribeCommodityClass setActiveType(xueqiao.quotation.account.thriftapi.ContractActiveType activeType) {
    this.activeType = activeType;
    return this;
  }

  public void unsetActiveType() {
    this.activeType = null;
  }

  /** Returns true if field activeType is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveType() {
    return this.activeType != null;
  }

  public void setActiveTypeIsSet(boolean value) {
    if (!value) {
      this.activeType = null;
    }
  }

  public String getFixedContractCode() {
    return this.fixedContractCode;
  }

  public SubscribeCommodityClass setFixedContractCode(String fixedContractCode) {
    this.fixedContractCode = fixedContractCode;
    return this;
  }

  public void unsetFixedContractCode() {
    this.fixedContractCode = null;
  }

  /** Returns true if field fixedContractCode is set (has been assigned a value) and false otherwise */
  public boolean isSetFixedContractCode() {
    return this.fixedContractCode != null;
  }

  public void setFixedContractCodeIsSet(boolean value) {
    if (!value) {
      this.fixedContractCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLASS_ID:
      if (value == null) {
        unsetClassId();
      } else {
        setClassId((Long)value);
      }
      break;

    case SLED_EXCHANGE_MIC:
      if (value == null) {
        unsetSledExchangeMic();
      } else {
        setSledExchangeMic((String)value);
      }
      break;

    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Long)value);
      }
      break;

    case SLED_COMMODITY_TYPE:
      if (value == null) {
        unsetSledCommodityType();
      } else {
        setSledCommodityType((Short)value);
      }
      break;

    case SLED_COMMODITY_CODE:
      if (value == null) {
        unsetSledCommodityCode();
      } else {
        setSledCommodityCode((String)value);
      }
      break;

    case PLATFORM_ENV:
      if (value == null) {
        unsetPlatformEnv();
      } else {
        setPlatformEnv((xueqiao.quotation.account.thriftapi.QuotationPlatformEnv)value);
      }
      break;

    case ACTIVE_MONTHS:
      if (value == null) {
        unsetActiveMonths();
      } else {
        setActiveMonths((List<Integer>)value);
      }
      break;

    case INACTIVE_MONTHS:
      if (value == null) {
        unsetInactiveMonths();
      } else {
        setInactiveMonths((List<Integer>)value);
      }
      break;

    case ACTIVE_SUBSCRIBE_NUM:
      if (value == null) {
        unsetActiveSubscribeNum();
      } else {
        setActiveSubscribeNum((Integer)value);
      }
      break;

    case IN_ACTIVE_SUBSCRIBE_NUM:
      if (value == null) {
        unsetInActiveSubscribeNum();
      } else {
        setInActiveSubscribeNum((Integer)value);
      }
      break;

    case SUBSCRIBE_ACCOUNTS:
      if (value == null) {
        unsetSubscribeAccounts();
      } else {
        setSubscribeAccounts((List<List<SubscribeAccountClass>>)value);
      }
      break;

    case CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetCreateTimestampMs();
      } else {
        setCreateTimestampMs((Long)value);
      }
      break;

    case ACTIVE_TYPE:
      if (value == null) {
        unsetActiveType();
      } else {
        setActiveType((xueqiao.quotation.account.thriftapi.ContractActiveType)value);
      }
      break;

    case FIXED_CONTRACT_CODE:
      if (value == null) {
        unsetFixedContractCode();
      } else {
        setFixedContractCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLASS_ID:
      return Long.valueOf(getClassId());

    case SLED_EXCHANGE_MIC:
      return getSledExchangeMic();

    case SLED_COMMODITY_ID:
      return Long.valueOf(getSledCommodityId());

    case SLED_COMMODITY_TYPE:
      return Short.valueOf(getSledCommodityType());

    case SLED_COMMODITY_CODE:
      return getSledCommodityCode();

    case PLATFORM_ENV:
      return getPlatformEnv();

    case ACTIVE_MONTHS:
      return getActiveMonths();

    case INACTIVE_MONTHS:
      return getInactiveMonths();

    case ACTIVE_SUBSCRIBE_NUM:
      return Integer.valueOf(getActiveSubscribeNum());

    case IN_ACTIVE_SUBSCRIBE_NUM:
      return Integer.valueOf(getInActiveSubscribeNum());

    case SUBSCRIBE_ACCOUNTS:
      return getSubscribeAccounts();

    case CREATE_TIMESTAMP_MS:
      return Long.valueOf(getCreateTimestampMs());

    case ACTIVE_TYPE:
      return getActiveType();

    case FIXED_CONTRACT_CODE:
      return getFixedContractCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLASS_ID:
      return isSetClassId();
    case SLED_EXCHANGE_MIC:
      return isSetSledExchangeMic();
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case SLED_COMMODITY_TYPE:
      return isSetSledCommodityType();
    case SLED_COMMODITY_CODE:
      return isSetSledCommodityCode();
    case PLATFORM_ENV:
      return isSetPlatformEnv();
    case ACTIVE_MONTHS:
      return isSetActiveMonths();
    case INACTIVE_MONTHS:
      return isSetInactiveMonths();
    case ACTIVE_SUBSCRIBE_NUM:
      return isSetActiveSubscribeNum();
    case IN_ACTIVE_SUBSCRIBE_NUM:
      return isSetInActiveSubscribeNum();
    case SUBSCRIBE_ACCOUNTS:
      return isSetSubscribeAccounts();
    case CREATE_TIMESTAMP_MS:
      return isSetCreateTimestampMs();
    case ACTIVE_TYPE:
      return isSetActiveType();
    case FIXED_CONTRACT_CODE:
      return isSetFixedContractCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubscribeCommodityClass)
      return this.equals((SubscribeCommodityClass)that);
    return false;
  }

  public boolean equals(SubscribeCommodityClass that) {
    if (that == null)
      return false;

    boolean this_present_classId = true && this.isSetClassId();
    boolean that_present_classId = true && that.isSetClassId();
    if (this_present_classId || that_present_classId) {
      if (!(this_present_classId && that_present_classId))
        return false;
      if (this.classId != that.classId)
        return false;
    }

    boolean this_present_sledExchangeMic = true && this.isSetSledExchangeMic();
    boolean that_present_sledExchangeMic = true && that.isSetSledExchangeMic();
    if (this_present_sledExchangeMic || that_present_sledExchangeMic) {
      if (!(this_present_sledExchangeMic && that_present_sledExchangeMic))
        return false;
      if (!this.sledExchangeMic.equals(that.sledExchangeMic))
        return false;
    }

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_sledCommodityType = true && this.isSetSledCommodityType();
    boolean that_present_sledCommodityType = true && that.isSetSledCommodityType();
    if (this_present_sledCommodityType || that_present_sledCommodityType) {
      if (!(this_present_sledCommodityType && that_present_sledCommodityType))
        return false;
      if (this.sledCommodityType != that.sledCommodityType)
        return false;
    }

    boolean this_present_sledCommodityCode = true && this.isSetSledCommodityCode();
    boolean that_present_sledCommodityCode = true && that.isSetSledCommodityCode();
    if (this_present_sledCommodityCode || that_present_sledCommodityCode) {
      if (!(this_present_sledCommodityCode && that_present_sledCommodityCode))
        return false;
      if (!this.sledCommodityCode.equals(that.sledCommodityCode))
        return false;
    }

    boolean this_present_platformEnv = true && this.isSetPlatformEnv();
    boolean that_present_platformEnv = true && that.isSetPlatformEnv();
    if (this_present_platformEnv || that_present_platformEnv) {
      if (!(this_present_platformEnv && that_present_platformEnv))
        return false;
      if (!this.platformEnv.equals(that.platformEnv))
        return false;
    }

    boolean this_present_activeMonths = true && this.isSetActiveMonths();
    boolean that_present_activeMonths = true && that.isSetActiveMonths();
    if (this_present_activeMonths || that_present_activeMonths) {
      if (!(this_present_activeMonths && that_present_activeMonths))
        return false;
      if (!this.activeMonths.equals(that.activeMonths))
        return false;
    }

    boolean this_present_inactiveMonths = true && this.isSetInactiveMonths();
    boolean that_present_inactiveMonths = true && that.isSetInactiveMonths();
    if (this_present_inactiveMonths || that_present_inactiveMonths) {
      if (!(this_present_inactiveMonths && that_present_inactiveMonths))
        return false;
      if (!this.inactiveMonths.equals(that.inactiveMonths))
        return false;
    }

    boolean this_present_activeSubscribeNum = true && this.isSetActiveSubscribeNum();
    boolean that_present_activeSubscribeNum = true && that.isSetActiveSubscribeNum();
    if (this_present_activeSubscribeNum || that_present_activeSubscribeNum) {
      if (!(this_present_activeSubscribeNum && that_present_activeSubscribeNum))
        return false;
      if (this.activeSubscribeNum != that.activeSubscribeNum)
        return false;
    }

    boolean this_present_inActiveSubscribeNum = true && this.isSetInActiveSubscribeNum();
    boolean that_present_inActiveSubscribeNum = true && that.isSetInActiveSubscribeNum();
    if (this_present_inActiveSubscribeNum || that_present_inActiveSubscribeNum) {
      if (!(this_present_inActiveSubscribeNum && that_present_inActiveSubscribeNum))
        return false;
      if (this.inActiveSubscribeNum != that.inActiveSubscribeNum)
        return false;
    }

    boolean this_present_subscribeAccounts = true && this.isSetSubscribeAccounts();
    boolean that_present_subscribeAccounts = true && that.isSetSubscribeAccounts();
    if (this_present_subscribeAccounts || that_present_subscribeAccounts) {
      if (!(this_present_subscribeAccounts && that_present_subscribeAccounts))
        return false;
      if (!this.subscribeAccounts.equals(that.subscribeAccounts))
        return false;
    }

    boolean this_present_createTimestampMs = true && this.isSetCreateTimestampMs();
    boolean that_present_createTimestampMs = true && that.isSetCreateTimestampMs();
    if (this_present_createTimestampMs || that_present_createTimestampMs) {
      if (!(this_present_createTimestampMs && that_present_createTimestampMs))
        return false;
      if (this.createTimestampMs != that.createTimestampMs)
        return false;
    }

    boolean this_present_activeType = true && this.isSetActiveType();
    boolean that_present_activeType = true && that.isSetActiveType();
    if (this_present_activeType || that_present_activeType) {
      if (!(this_present_activeType && that_present_activeType))
        return false;
      if (!this.activeType.equals(that.activeType))
        return false;
    }

    boolean this_present_fixedContractCode = true && this.isSetFixedContractCode();
    boolean that_present_fixedContractCode = true && that.isSetFixedContractCode();
    if (this_present_fixedContractCode || that_present_fixedContractCode) {
      if (!(this_present_fixedContractCode && that_present_fixedContractCode))
        return false;
      if (!this.fixedContractCode.equals(that.fixedContractCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SubscribeCommodityClass other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClassId()).compareTo(other.isSetClassId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classId, other.classId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledExchangeMic()).compareTo(other.isSetSledExchangeMic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledExchangeMic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledExchangeMic, other.sledExchangeMic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityType()).compareTo(other.isSetSledCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityType, other.sledCommodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityCode()).compareTo(other.isSetSledCommodityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityCode, other.sledCommodityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatformEnv()).compareTo(other.isSetPlatformEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformEnv, other.platformEnv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveMonths()).compareTo(other.isSetActiveMonths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveMonths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeMonths, other.activeMonths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInactiveMonths()).compareTo(other.isSetInactiveMonths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInactiveMonths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inactiveMonths, other.inactiveMonths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveSubscribeNum()).compareTo(other.isSetActiveSubscribeNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveSubscribeNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeSubscribeNum, other.activeSubscribeNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInActiveSubscribeNum()).compareTo(other.isSetInActiveSubscribeNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInActiveSubscribeNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inActiveSubscribeNum, other.inActiveSubscribeNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscribeAccounts()).compareTo(other.isSetSubscribeAccounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscribeAccounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscribeAccounts, other.subscribeAccounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestampMs()).compareTo(other.isSetCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestampMs, other.createTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveType()).compareTo(other.isSetActiveType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeType, other.activeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFixedContractCode()).compareTo(other.isSetFixedContractCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixedContractCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixedContractCode, other.fixedContractCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubscribeCommodityClass(");
    boolean first = true;

    if (isSetClassId()) {
      sb.append("classId:");
      sb.append(this.classId);
      first = false;
    }
    if (isSetSledExchangeMic()) {
      if (!first) sb.append(", ");
      sb.append("sledExchangeMic:");
      if (this.sledExchangeMic == null) {
        sb.append("null");
      } else {
        sb.append(this.sledExchangeMic);
      }
      first = false;
    }
    if (isSetSledCommodityId()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetSledCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityType:");
      sb.append(this.sledCommodityType);
      first = false;
    }
    if (isSetSledCommodityCode()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityCode:");
      if (this.sledCommodityCode == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityCode);
      }
      first = false;
    }
    if (isSetPlatformEnv()) {
      if (!first) sb.append(", ");
      sb.append("platformEnv:");
      if (this.platformEnv == null) {
        sb.append("null");
      } else {
        sb.append(this.platformEnv);
      }
      first = false;
    }
    if (isSetActiveMonths()) {
      if (!first) sb.append(", ");
      sb.append("activeMonths:");
      if (this.activeMonths == null) {
        sb.append("null");
      } else {
        sb.append(this.activeMonths);
      }
      first = false;
    }
    if (isSetInactiveMonths()) {
      if (!first) sb.append(", ");
      sb.append("inactiveMonths:");
      if (this.inactiveMonths == null) {
        sb.append("null");
      } else {
        sb.append(this.inactiveMonths);
      }
      first = false;
    }
    if (isSetActiveSubscribeNum()) {
      if (!first) sb.append(", ");
      sb.append("activeSubscribeNum:");
      sb.append(this.activeSubscribeNum);
      first = false;
    }
    if (isSetInActiveSubscribeNum()) {
      if (!first) sb.append(", ");
      sb.append("inActiveSubscribeNum:");
      sb.append(this.inActiveSubscribeNum);
      first = false;
    }
    if (isSetSubscribeAccounts()) {
      if (!first) sb.append(", ");
      sb.append("subscribeAccounts:");
      if (this.subscribeAccounts == null) {
        sb.append("null");
      } else {
        sb.append(this.subscribeAccounts);
      }
      first = false;
    }
    if (isSetCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("createTimestampMs:");
      sb.append(this.createTimestampMs);
      first = false;
    }
    if (isSetActiveType()) {
      if (!first) sb.append(", ");
      sb.append("activeType:");
      if (this.activeType == null) {
        sb.append("null");
      } else {
        sb.append(this.activeType);
      }
      first = false;
    }
    if (isSetFixedContractCode()) {
      if (!first) sb.append(", ");
      sb.append("fixedContractCode:");
      if (this.fixedContractCode == null) {
        sb.append("null");
      } else {
        sb.append(this.fixedContractCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SubscribeCommodityClassStandardSchemeFactory implements SchemeFactory {
    public SubscribeCommodityClassStandardScheme getScheme() {
      return new SubscribeCommodityClassStandardScheme();
    }
  }

  private static class SubscribeCommodityClassStandardScheme extends StandardScheme<SubscribeCommodityClass> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SubscribeCommodityClass struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLASS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.classId = iprot.readI64();
              struct.setClassIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_EXCHANGE_MIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledExchangeMic = iprot.readString();
              struct.setSledExchangeMicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledCommodityId = iprot.readI64();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SLED_COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.sledCommodityType = iprot.readI16();
              struct.setSledCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SLED_COMMODITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledCommodityCode = iprot.readString();
              struct.setSledCommodityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PLATFORM_ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platformEnv = xueqiao.quotation.account.thriftapi.QuotationPlatformEnv.findByValue(iprot.readI32());
              struct.setPlatformEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACTIVE_MONTHS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.activeMonths = new ArrayList<Integer>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  int _elem34;
                  _elem34 = iprot.readI32();
                  struct.activeMonths.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setActiveMonthsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INACTIVE_MONTHS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.inactiveMonths = new ArrayList<Integer>(_list35.size);
                for (int _i36 = 0; _i36 < _list35.size; ++_i36)
                {
                  int _elem37;
                  _elem37 = iprot.readI32();
                  struct.inactiveMonths.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setInactiveMonthsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACTIVE_SUBSCRIBE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activeSubscribeNum = iprot.readI32();
              struct.setActiveSubscribeNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IN_ACTIVE_SUBSCRIBE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.inActiveSubscribeNum = iprot.readI32();
              struct.setInActiveSubscribeNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SUBSCRIBE_ACCOUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.subscribeAccounts = new ArrayList<List<SubscribeAccountClass>>(_list38.size);
                for (int _i39 = 0; _i39 < _list38.size; ++_i39)
                {
                  List<SubscribeAccountClass> _elem40;
                  {
                    org.apache.thrift.protocol.TList _list41 = iprot.readListBegin();
                    _elem40 = new ArrayList<SubscribeAccountClass>(_list41.size);
                    for (int _i42 = 0; _i42 < _list41.size; ++_i42)
                    {
                      SubscribeAccountClass _elem43;
                      _elem43 = new SubscribeAccountClass();
                      _elem43.read(iprot);
                      _elem40.add(_elem43);
                    }
                    iprot.readListEnd();
                  }
                  struct.subscribeAccounts.add(_elem40);
                }
                iprot.readListEnd();
              }
              struct.setSubscribeAccountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestampMs = iprot.readI64();
              struct.setCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ACTIVE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activeType = xueqiao.quotation.account.thriftapi.ContractActiveType.findByValue(iprot.readI32());
              struct.setActiveTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FIXED_CONTRACT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fixedContractCode = iprot.readString();
              struct.setFixedContractCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SubscribeCommodityClass struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetClassId()) {
        oprot.writeFieldBegin(CLASS_ID_FIELD_DESC);
        oprot.writeI64(struct.classId);
        oprot.writeFieldEnd();
      }
      if (struct.sledExchangeMic != null) {
        if (struct.isSetSledExchangeMic()) {
          oprot.writeFieldBegin(SLED_EXCHANGE_MIC_FIELD_DESC);
          oprot.writeString(struct.sledExchangeMic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI64(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledCommodityType()) {
        oprot.writeFieldBegin(SLED_COMMODITY_TYPE_FIELD_DESC);
        oprot.writeI16(struct.sledCommodityType);
        oprot.writeFieldEnd();
      }
      if (struct.sledCommodityCode != null) {
        if (struct.isSetSledCommodityCode()) {
          oprot.writeFieldBegin(SLED_COMMODITY_CODE_FIELD_DESC);
          oprot.writeString(struct.sledCommodityCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.platformEnv != null) {
        if (struct.isSetPlatformEnv()) {
          oprot.writeFieldBegin(PLATFORM_ENV_FIELD_DESC);
          oprot.writeI32(struct.platformEnv.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.activeMonths != null) {
        if (struct.isSetActiveMonths()) {
          oprot.writeFieldBegin(ACTIVE_MONTHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.activeMonths.size()));
            for (int _iter44 : struct.activeMonths)
            {
              oprot.writeI32(_iter44);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.inactiveMonths != null) {
        if (struct.isSetInactiveMonths()) {
          oprot.writeFieldBegin(INACTIVE_MONTHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.inactiveMonths.size()));
            for (int _iter45 : struct.inactiveMonths)
            {
              oprot.writeI32(_iter45);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetActiveSubscribeNum()) {
        oprot.writeFieldBegin(ACTIVE_SUBSCRIBE_NUM_FIELD_DESC);
        oprot.writeI32(struct.activeSubscribeNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInActiveSubscribeNum()) {
        oprot.writeFieldBegin(IN_ACTIVE_SUBSCRIBE_NUM_FIELD_DESC);
        oprot.writeI32(struct.inActiveSubscribeNum);
        oprot.writeFieldEnd();
      }
      if (struct.subscribeAccounts != null) {
        if (struct.isSetSubscribeAccounts()) {
          oprot.writeFieldBegin(SUBSCRIBE_ACCOUNTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.subscribeAccounts.size()));
            for (List<SubscribeAccountClass> _iter46 : struct.subscribeAccounts)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter46.size()));
                for (SubscribeAccountClass _iter47 : _iter46)
                {
                  _iter47.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.createTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.activeType != null) {
        if (struct.isSetActiveType()) {
          oprot.writeFieldBegin(ACTIVE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.activeType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.fixedContractCode != null) {
        if (struct.isSetFixedContractCode()) {
          oprot.writeFieldBegin(FIXED_CONTRACT_CODE_FIELD_DESC);
          oprot.writeString(struct.fixedContractCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SubscribeCommodityClassTupleSchemeFactory implements SchemeFactory {
    public SubscribeCommodityClassTupleScheme getScheme() {
      return new SubscribeCommodityClassTupleScheme();
    }
  }

  private static class SubscribeCommodityClassTupleScheme extends TupleScheme<SubscribeCommodityClass> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SubscribeCommodityClass struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClassId()) {
        optionals.set(0);
      }
      if (struct.isSetSledExchangeMic()) {
        optionals.set(1);
      }
      if (struct.isSetSledCommodityId()) {
        optionals.set(2);
      }
      if (struct.isSetSledCommodityType()) {
        optionals.set(3);
      }
      if (struct.isSetSledCommodityCode()) {
        optionals.set(4);
      }
      if (struct.isSetPlatformEnv()) {
        optionals.set(5);
      }
      if (struct.isSetActiveMonths()) {
        optionals.set(6);
      }
      if (struct.isSetInactiveMonths()) {
        optionals.set(7);
      }
      if (struct.isSetActiveSubscribeNum()) {
        optionals.set(8);
      }
      if (struct.isSetInActiveSubscribeNum()) {
        optionals.set(9);
      }
      if (struct.isSetSubscribeAccounts()) {
        optionals.set(10);
      }
      if (struct.isSetCreateTimestampMs()) {
        optionals.set(11);
      }
      if (struct.isSetActiveType()) {
        optionals.set(12);
      }
      if (struct.isSetFixedContractCode()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetClassId()) {
        oprot.writeI64(struct.classId);
      }
      if (struct.isSetSledExchangeMic()) {
        oprot.writeString(struct.sledExchangeMic);
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeI64(struct.sledCommodityId);
      }
      if (struct.isSetSledCommodityType()) {
        oprot.writeI16(struct.sledCommodityType);
      }
      if (struct.isSetSledCommodityCode()) {
        oprot.writeString(struct.sledCommodityCode);
      }
      if (struct.isSetPlatformEnv()) {
        oprot.writeI32(struct.platformEnv.getValue());
      }
      if (struct.isSetActiveMonths()) {
        {
          oprot.writeI32(struct.activeMonths.size());
          for (int _iter48 : struct.activeMonths)
          {
            oprot.writeI32(_iter48);
          }
        }
      }
      if (struct.isSetInactiveMonths()) {
        {
          oprot.writeI32(struct.inactiveMonths.size());
          for (int _iter49 : struct.inactiveMonths)
          {
            oprot.writeI32(_iter49);
          }
        }
      }
      if (struct.isSetActiveSubscribeNum()) {
        oprot.writeI32(struct.activeSubscribeNum);
      }
      if (struct.isSetInActiveSubscribeNum()) {
        oprot.writeI32(struct.inActiveSubscribeNum);
      }
      if (struct.isSetSubscribeAccounts()) {
        {
          oprot.writeI32(struct.subscribeAccounts.size());
          for (List<SubscribeAccountClass> _iter50 : struct.subscribeAccounts)
          {
            {
              oprot.writeI32(_iter50.size());
              for (SubscribeAccountClass _iter51 : _iter50)
              {
                _iter51.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeI64(struct.createTimestampMs);
      }
      if (struct.isSetActiveType()) {
        oprot.writeI32(struct.activeType.getValue());
      }
      if (struct.isSetFixedContractCode()) {
        oprot.writeString(struct.fixedContractCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SubscribeCommodityClass struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.classId = iprot.readI64();
        struct.setClassIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledExchangeMic = iprot.readString();
        struct.setSledExchangeMicIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sledCommodityId = iprot.readI64();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sledCommodityType = iprot.readI16();
        struct.setSledCommodityTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sledCommodityCode = iprot.readString();
        struct.setSledCommodityCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.platformEnv = xueqiao.quotation.account.thriftapi.QuotationPlatformEnv.findByValue(iprot.readI32());
        struct.setPlatformEnvIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.activeMonths = new ArrayList<Integer>(_list52.size);
          for (int _i53 = 0; _i53 < _list52.size; ++_i53)
          {
            int _elem54;
            _elem54 = iprot.readI32();
            struct.activeMonths.add(_elem54);
          }
        }
        struct.setActiveMonthsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.inactiveMonths = new ArrayList<Integer>(_list55.size);
          for (int _i56 = 0; _i56 < _list55.size; ++_i56)
          {
            int _elem57;
            _elem57 = iprot.readI32();
            struct.inactiveMonths.add(_elem57);
          }
        }
        struct.setInactiveMonthsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.activeSubscribeNum = iprot.readI32();
        struct.setActiveSubscribeNumIsSet(true);
      }
      if (incoming.get(9)) {
        struct.inActiveSubscribeNum = iprot.readI32();
        struct.setInActiveSubscribeNumIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.subscribeAccounts = new ArrayList<List<SubscribeAccountClass>>(_list58.size);
          for (int _i59 = 0; _i59 < _list58.size; ++_i59)
          {
            List<SubscribeAccountClass> _elem60;
            {
              org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _elem60 = new ArrayList<SubscribeAccountClass>(_list61.size);
              for (int _i62 = 0; _i62 < _list61.size; ++_i62)
              {
                SubscribeAccountClass _elem63;
                _elem63 = new SubscribeAccountClass();
                _elem63.read(iprot);
                _elem60.add(_elem63);
              }
            }
            struct.subscribeAccounts.add(_elem60);
          }
        }
        struct.setSubscribeAccountsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createTimestampMs = iprot.readI64();
        struct.setCreateTimestampMsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.activeType = xueqiao.quotation.account.thriftapi.ContractActiveType.findByValue(iprot.readI32());
        struct.setActiveTypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.fixedContractCode = iprot.readString();
        struct.setFixedContractCodeIsSet(true);
      }
    }
  }

}

