/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.quotation.plan.bo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 实际每天产生的订阅条目
 */
public class SubscribeContractItem implements org.apache.thrift.TBase<SubscribeContractItem, SubscribeContractItem._Fields>, java.io.Serializable, Cloneable, Comparable<SubscribeContractItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubscribeContractItem");

  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLASS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("classId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SLED_EXCHANGE_MIC_FIELD_DESC = new org.apache.thrift.protocol.TField("sledExchangeMic", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityType", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityCode", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractCode", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField PLATFORM_ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("platformEnv", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField QUOTATION_DEPLOY_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("quotationDeploySet", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField QUOTATION_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("quotationAccountId", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField IS_FOR_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("isForActive", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestampMs", org.apache.thrift.protocol.TType.I64, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SubscribeContractItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SubscribeContractItemTupleSchemeFactory());
  }

  public long itemId; // optional
  public long classId; // optional
  public String sledExchangeMic; // optional
  public long sledCommodityId; // optional
  public short sledCommodityType; // optional
  public String sledCommodityCode; // optional
  public String sledContractCode; // optional
  public long sledContractId; // optional
  /**
   * 
   * @see xueqiao.quotation.account.thriftapi.QuotationPlatformEnv
   */
  public xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv; // optional
  /**
   * 
   * @see xueqiao.quotation.account.thriftapi.DeploySet
   */
  public xueqiao.quotation.account.thriftapi.DeploySet quotationDeploySet; // optional
  public long quotationAccountId; // optional
  public boolean isForActive; // optional
  public long createTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ITEM_ID((short)1, "itemId"),
    CLASS_ID((short)2, "classId"),
    SLED_EXCHANGE_MIC((short)3, "sledExchangeMic"),
    SLED_COMMODITY_ID((short)4, "sledCommodityId"),
    SLED_COMMODITY_TYPE((short)5, "sledCommodityType"),
    SLED_COMMODITY_CODE((short)6, "sledCommodityCode"),
    SLED_CONTRACT_CODE((short)7, "sledContractCode"),
    SLED_CONTRACT_ID((short)8, "sledContractId"),
    /**
     * 
     * @see xueqiao.quotation.account.thriftapi.QuotationPlatformEnv
     */
    PLATFORM_ENV((short)9, "platformEnv"),
    /**
     * 
     * @see xueqiao.quotation.account.thriftapi.DeploySet
     */
    QUOTATION_DEPLOY_SET((short)11, "quotationDeploySet"),
    QUOTATION_ACCOUNT_ID((short)12, "quotationAccountId"),
    IS_FOR_ACTIVE((short)13, "isForActive"),
    CREATE_TIMESTAMP_MS((short)14, "createTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEM_ID
          return ITEM_ID;
        case 2: // CLASS_ID
          return CLASS_ID;
        case 3: // SLED_EXCHANGE_MIC
          return SLED_EXCHANGE_MIC;
        case 4: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 5: // SLED_COMMODITY_TYPE
          return SLED_COMMODITY_TYPE;
        case 6: // SLED_COMMODITY_CODE
          return SLED_COMMODITY_CODE;
        case 7: // SLED_CONTRACT_CODE
          return SLED_CONTRACT_CODE;
        case 8: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        case 9: // PLATFORM_ENV
          return PLATFORM_ENV;
        case 11: // QUOTATION_DEPLOY_SET
          return QUOTATION_DEPLOY_SET;
        case 12: // QUOTATION_ACCOUNT_ID
          return QUOTATION_ACCOUNT_ID;
        case 13: // IS_FOR_ACTIVE
          return IS_FOR_ACTIVE;
        case 14: // CREATE_TIMESTAMP_MS
          return CREATE_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ITEMID_ISSET_ID = 0;
  private static final int __CLASSID_ISSET_ID = 1;
  private static final int __SLEDCOMMODITYID_ISSET_ID = 2;
  private static final int __SLEDCOMMODITYTYPE_ISSET_ID = 3;
  private static final int __SLEDCONTRACTID_ISSET_ID = 4;
  private static final int __QUOTATIONACCOUNTID_ISSET_ID = 5;
  private static final int __ISFORACTIVE_ISSET_ID = 6;
  private static final int __CREATETIMESTAMPMS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ITEM_ID,_Fields.CLASS_ID,_Fields.SLED_EXCHANGE_MIC,_Fields.SLED_COMMODITY_ID,_Fields.SLED_COMMODITY_TYPE,_Fields.SLED_COMMODITY_CODE,_Fields.SLED_CONTRACT_CODE,_Fields.SLED_CONTRACT_ID,_Fields.PLATFORM_ENV,_Fields.QUOTATION_DEPLOY_SET,_Fields.QUOTATION_ACCOUNT_ID,_Fields.IS_FOR_ACTIVE,_Fields.CREATE_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLASS_ID, new org.apache.thrift.meta_data.FieldMetaData("classId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_EXCHANGE_MIC, new org.apache.thrift.meta_data.FieldMetaData("sledExchangeMic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SLED_COMMODITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_CONTRACT_CODE, new org.apache.thrift.meta_data.FieldMetaData("sledContractCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PLATFORM_ENV, new org.apache.thrift.meta_data.FieldMetaData("platformEnv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.quotation.account.thriftapi.QuotationPlatformEnv.class)));
    tmpMap.put(_Fields.QUOTATION_DEPLOY_SET, new org.apache.thrift.meta_data.FieldMetaData("quotationDeploySet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.quotation.account.thriftapi.DeploySet.class)));
    tmpMap.put(_Fields.QUOTATION_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("quotationAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_FOR_ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("isForActive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("createTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubscribeContractItem.class, metaDataMap);
  }

  public SubscribeContractItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubscribeContractItem(SubscribeContractItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.itemId = other.itemId;
    this.classId = other.classId;
    if (other.isSetSledExchangeMic()) {
      this.sledExchangeMic = other.sledExchangeMic;
    }
    this.sledCommodityId = other.sledCommodityId;
    this.sledCommodityType = other.sledCommodityType;
    if (other.isSetSledCommodityCode()) {
      this.sledCommodityCode = other.sledCommodityCode;
    }
    if (other.isSetSledContractCode()) {
      this.sledContractCode = other.sledContractCode;
    }
    this.sledContractId = other.sledContractId;
    if (other.isSetPlatformEnv()) {
      this.platformEnv = other.platformEnv;
    }
    if (other.isSetQuotationDeploySet()) {
      this.quotationDeploySet = other.quotationDeploySet;
    }
    this.quotationAccountId = other.quotationAccountId;
    this.isForActive = other.isForActive;
    this.createTimestampMs = other.createTimestampMs;
  }

  public SubscribeContractItem deepCopy() {
    return new SubscribeContractItem(this);
  }

  @Override
  public void clear() {
    setItemIdIsSet(false);
    this.itemId = 0;
    setClassIdIsSet(false);
    this.classId = 0;
    this.sledExchangeMic = null;
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    setSledCommodityTypeIsSet(false);
    this.sledCommodityType = 0;
    this.sledCommodityCode = null;
    this.sledContractCode = null;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
    this.platformEnv = null;
    this.quotationDeploySet = null;
    setQuotationAccountIdIsSet(false);
    this.quotationAccountId = 0;
    setIsForActiveIsSet(false);
    this.isForActive = false;
    setCreateTimestampMsIsSet(false);
    this.createTimestampMs = 0;
  }

  public long getItemId() {
    return this.itemId;
  }

  public SubscribeContractItem setItemId(long itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public long getClassId() {
    return this.classId;
  }

  public SubscribeContractItem setClassId(long classId) {
    this.classId = classId;
    setClassIdIsSet(true);
    return this;
  }

  public void unsetClassId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLASSID_ISSET_ID);
  }

  /** Returns true if field classId is set (has been assigned a value) and false otherwise */
  public boolean isSetClassId() {
    return EncodingUtils.testBit(__isset_bitfield, __CLASSID_ISSET_ID);
  }

  public void setClassIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLASSID_ISSET_ID, value);
  }

  public String getSledExchangeMic() {
    return this.sledExchangeMic;
  }

  public SubscribeContractItem setSledExchangeMic(String sledExchangeMic) {
    this.sledExchangeMic = sledExchangeMic;
    return this;
  }

  public void unsetSledExchangeMic() {
    this.sledExchangeMic = null;
  }

  /** Returns true if field sledExchangeMic is set (has been assigned a value) and false otherwise */
  public boolean isSetSledExchangeMic() {
    return this.sledExchangeMic != null;
  }

  public void setSledExchangeMicIsSet(boolean value) {
    if (!value) {
      this.sledExchangeMic = null;
    }
  }

  public long getSledCommodityId() {
    return this.sledCommodityId;
  }

  public SubscribeContractItem setSledCommodityId(long sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public short getSledCommodityType() {
    return this.sledCommodityType;
  }

  public SubscribeContractItem setSledCommodityType(short sledCommodityType) {
    this.sledCommodityType = sledCommodityType;
    setSledCommodityTypeIsSet(true);
    return this;
  }

  public void unsetSledCommodityType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID);
  }

  /** Returns true if field sledCommodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityType() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID);
  }

  public void setSledCommodityTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID, value);
  }

  public String getSledCommodityCode() {
    return this.sledCommodityCode;
  }

  public SubscribeContractItem setSledCommodityCode(String sledCommodityCode) {
    this.sledCommodityCode = sledCommodityCode;
    return this;
  }

  public void unsetSledCommodityCode() {
    this.sledCommodityCode = null;
  }

  /** Returns true if field sledCommodityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityCode() {
    return this.sledCommodityCode != null;
  }

  public void setSledCommodityCodeIsSet(boolean value) {
    if (!value) {
      this.sledCommodityCode = null;
    }
  }

  public String getSledContractCode() {
    return this.sledContractCode;
  }

  public SubscribeContractItem setSledContractCode(String sledContractCode) {
    this.sledContractCode = sledContractCode;
    return this;
  }

  public void unsetSledContractCode() {
    this.sledContractCode = null;
  }

  /** Returns true if field sledContractCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractCode() {
    return this.sledContractCode != null;
  }

  public void setSledContractCodeIsSet(boolean value) {
    if (!value) {
      this.sledContractCode = null;
    }
  }

  public long getSledContractId() {
    return this.sledContractId;
  }

  public SubscribeContractItem setSledContractId(long sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  /**
   * 
   * @see xueqiao.quotation.account.thriftapi.QuotationPlatformEnv
   */
  public xueqiao.quotation.account.thriftapi.QuotationPlatformEnv getPlatformEnv() {
    return this.platformEnv;
  }

  /**
   * 
   * @see xueqiao.quotation.account.thriftapi.QuotationPlatformEnv
   */
  public SubscribeContractItem setPlatformEnv(xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv) {
    this.platformEnv = platformEnv;
    return this;
  }

  public void unsetPlatformEnv() {
    this.platformEnv = null;
  }

  /** Returns true if field platformEnv is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformEnv() {
    return this.platformEnv != null;
  }

  public void setPlatformEnvIsSet(boolean value) {
    if (!value) {
      this.platformEnv = null;
    }
  }

  /**
   * 
   * @see xueqiao.quotation.account.thriftapi.DeploySet
   */
  public xueqiao.quotation.account.thriftapi.DeploySet getQuotationDeploySet() {
    return this.quotationDeploySet;
  }

  /**
   * 
   * @see xueqiao.quotation.account.thriftapi.DeploySet
   */
  public SubscribeContractItem setQuotationDeploySet(xueqiao.quotation.account.thriftapi.DeploySet quotationDeploySet) {
    this.quotationDeploySet = quotationDeploySet;
    return this;
  }

  public void unsetQuotationDeploySet() {
    this.quotationDeploySet = null;
  }

  /** Returns true if field quotationDeploySet is set (has been assigned a value) and false otherwise */
  public boolean isSetQuotationDeploySet() {
    return this.quotationDeploySet != null;
  }

  public void setQuotationDeploySetIsSet(boolean value) {
    if (!value) {
      this.quotationDeploySet = null;
    }
  }

  public long getQuotationAccountId() {
    return this.quotationAccountId;
  }

  public SubscribeContractItem setQuotationAccountId(long quotationAccountId) {
    this.quotationAccountId = quotationAccountId;
    setQuotationAccountIdIsSet(true);
    return this;
  }

  public void unsetQuotationAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUOTATIONACCOUNTID_ISSET_ID);
  }

  /** Returns true if field quotationAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetQuotationAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __QUOTATIONACCOUNTID_ISSET_ID);
  }

  public void setQuotationAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUOTATIONACCOUNTID_ISSET_ID, value);
  }

  public boolean isIsForActive() {
    return this.isForActive;
  }

  public SubscribeContractItem setIsForActive(boolean isForActive) {
    this.isForActive = isForActive;
    setIsForActiveIsSet(true);
    return this;
  }

  public void unsetIsForActive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFORACTIVE_ISSET_ID);
  }

  /** Returns true if field isForActive is set (has been assigned a value) and false otherwise */
  public boolean isSetIsForActive() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFORACTIVE_ISSET_ID);
  }

  public void setIsForActiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFORACTIVE_ISSET_ID, value);
  }

  public long getCreateTimestampMs() {
    return this.createTimestampMs;
  }

  public SubscribeContractItem setCreateTimestampMs(long createTimestampMs) {
    this.createTimestampMs = createTimestampMs;
    setCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field createTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  public void setCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Long)value);
      }
      break;

    case CLASS_ID:
      if (value == null) {
        unsetClassId();
      } else {
        setClassId((Long)value);
      }
      break;

    case SLED_EXCHANGE_MIC:
      if (value == null) {
        unsetSledExchangeMic();
      } else {
        setSledExchangeMic((String)value);
      }
      break;

    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Long)value);
      }
      break;

    case SLED_COMMODITY_TYPE:
      if (value == null) {
        unsetSledCommodityType();
      } else {
        setSledCommodityType((Short)value);
      }
      break;

    case SLED_COMMODITY_CODE:
      if (value == null) {
        unsetSledCommodityCode();
      } else {
        setSledCommodityCode((String)value);
      }
      break;

    case SLED_CONTRACT_CODE:
      if (value == null) {
        unsetSledContractCode();
      } else {
        setSledContractCode((String)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Long)value);
      }
      break;

    case PLATFORM_ENV:
      if (value == null) {
        unsetPlatformEnv();
      } else {
        setPlatformEnv((xueqiao.quotation.account.thriftapi.QuotationPlatformEnv)value);
      }
      break;

    case QUOTATION_DEPLOY_SET:
      if (value == null) {
        unsetQuotationDeploySet();
      } else {
        setQuotationDeploySet((xueqiao.quotation.account.thriftapi.DeploySet)value);
      }
      break;

    case QUOTATION_ACCOUNT_ID:
      if (value == null) {
        unsetQuotationAccountId();
      } else {
        setQuotationAccountId((Long)value);
      }
      break;

    case IS_FOR_ACTIVE:
      if (value == null) {
        unsetIsForActive();
      } else {
        setIsForActive((Boolean)value);
      }
      break;

    case CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetCreateTimestampMs();
      } else {
        setCreateTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEM_ID:
      return Long.valueOf(getItemId());

    case CLASS_ID:
      return Long.valueOf(getClassId());

    case SLED_EXCHANGE_MIC:
      return getSledExchangeMic();

    case SLED_COMMODITY_ID:
      return Long.valueOf(getSledCommodityId());

    case SLED_COMMODITY_TYPE:
      return Short.valueOf(getSledCommodityType());

    case SLED_COMMODITY_CODE:
      return getSledCommodityCode();

    case SLED_CONTRACT_CODE:
      return getSledContractCode();

    case SLED_CONTRACT_ID:
      return Long.valueOf(getSledContractId());

    case PLATFORM_ENV:
      return getPlatformEnv();

    case QUOTATION_DEPLOY_SET:
      return getQuotationDeploySet();

    case QUOTATION_ACCOUNT_ID:
      return Long.valueOf(getQuotationAccountId());

    case IS_FOR_ACTIVE:
      return Boolean.valueOf(isIsForActive());

    case CREATE_TIMESTAMP_MS:
      return Long.valueOf(getCreateTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ITEM_ID:
      return isSetItemId();
    case CLASS_ID:
      return isSetClassId();
    case SLED_EXCHANGE_MIC:
      return isSetSledExchangeMic();
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case SLED_COMMODITY_TYPE:
      return isSetSledCommodityType();
    case SLED_COMMODITY_CODE:
      return isSetSledCommodityCode();
    case SLED_CONTRACT_CODE:
      return isSetSledContractCode();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    case PLATFORM_ENV:
      return isSetPlatformEnv();
    case QUOTATION_DEPLOY_SET:
      return isSetQuotationDeploySet();
    case QUOTATION_ACCOUNT_ID:
      return isSetQuotationAccountId();
    case IS_FOR_ACTIVE:
      return isSetIsForActive();
    case CREATE_TIMESTAMP_MS:
      return isSetCreateTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubscribeContractItem)
      return this.equals((SubscribeContractItem)that);
    return false;
  }

  public boolean equals(SubscribeContractItem that) {
    if (that == null)
      return false;

    boolean this_present_itemId = true && this.isSetItemId();
    boolean that_present_itemId = true && that.isSetItemId();
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_classId = true && this.isSetClassId();
    boolean that_present_classId = true && that.isSetClassId();
    if (this_present_classId || that_present_classId) {
      if (!(this_present_classId && that_present_classId))
        return false;
      if (this.classId != that.classId)
        return false;
    }

    boolean this_present_sledExchangeMic = true && this.isSetSledExchangeMic();
    boolean that_present_sledExchangeMic = true && that.isSetSledExchangeMic();
    if (this_present_sledExchangeMic || that_present_sledExchangeMic) {
      if (!(this_present_sledExchangeMic && that_present_sledExchangeMic))
        return false;
      if (!this.sledExchangeMic.equals(that.sledExchangeMic))
        return false;
    }

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_sledCommodityType = true && this.isSetSledCommodityType();
    boolean that_present_sledCommodityType = true && that.isSetSledCommodityType();
    if (this_present_sledCommodityType || that_present_sledCommodityType) {
      if (!(this_present_sledCommodityType && that_present_sledCommodityType))
        return false;
      if (this.sledCommodityType != that.sledCommodityType)
        return false;
    }

    boolean this_present_sledCommodityCode = true && this.isSetSledCommodityCode();
    boolean that_present_sledCommodityCode = true && that.isSetSledCommodityCode();
    if (this_present_sledCommodityCode || that_present_sledCommodityCode) {
      if (!(this_present_sledCommodityCode && that_present_sledCommodityCode))
        return false;
      if (!this.sledCommodityCode.equals(that.sledCommodityCode))
        return false;
    }

    boolean this_present_sledContractCode = true && this.isSetSledContractCode();
    boolean that_present_sledContractCode = true && that.isSetSledContractCode();
    if (this_present_sledContractCode || that_present_sledContractCode) {
      if (!(this_present_sledContractCode && that_present_sledContractCode))
        return false;
      if (!this.sledContractCode.equals(that.sledContractCode))
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    boolean this_present_platformEnv = true && this.isSetPlatformEnv();
    boolean that_present_platformEnv = true && that.isSetPlatformEnv();
    if (this_present_platformEnv || that_present_platformEnv) {
      if (!(this_present_platformEnv && that_present_platformEnv))
        return false;
      if (!this.platformEnv.equals(that.platformEnv))
        return false;
    }

    boolean this_present_quotationDeploySet = true && this.isSetQuotationDeploySet();
    boolean that_present_quotationDeploySet = true && that.isSetQuotationDeploySet();
    if (this_present_quotationDeploySet || that_present_quotationDeploySet) {
      if (!(this_present_quotationDeploySet && that_present_quotationDeploySet))
        return false;
      if (!this.quotationDeploySet.equals(that.quotationDeploySet))
        return false;
    }

    boolean this_present_quotationAccountId = true && this.isSetQuotationAccountId();
    boolean that_present_quotationAccountId = true && that.isSetQuotationAccountId();
    if (this_present_quotationAccountId || that_present_quotationAccountId) {
      if (!(this_present_quotationAccountId && that_present_quotationAccountId))
        return false;
      if (this.quotationAccountId != that.quotationAccountId)
        return false;
    }

    boolean this_present_isForActive = true && this.isSetIsForActive();
    boolean that_present_isForActive = true && that.isSetIsForActive();
    if (this_present_isForActive || that_present_isForActive) {
      if (!(this_present_isForActive && that_present_isForActive))
        return false;
      if (this.isForActive != that.isForActive)
        return false;
    }

    boolean this_present_createTimestampMs = true && this.isSetCreateTimestampMs();
    boolean that_present_createTimestampMs = true && that.isSetCreateTimestampMs();
    if (this_present_createTimestampMs || that_present_createTimestampMs) {
      if (!(this_present_createTimestampMs && that_present_createTimestampMs))
        return false;
      if (this.createTimestampMs != that.createTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SubscribeContractItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(other.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, other.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClassId()).compareTo(other.isSetClassId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classId, other.classId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledExchangeMic()).compareTo(other.isSetSledExchangeMic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledExchangeMic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledExchangeMic, other.sledExchangeMic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityType()).compareTo(other.isSetSledCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityType, other.sledCommodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityCode()).compareTo(other.isSetSledCommodityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityCode, other.sledCommodityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractCode()).compareTo(other.isSetSledContractCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractCode, other.sledContractCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatformEnv()).compareTo(other.isSetPlatformEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformEnv, other.platformEnv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuotationDeploySet()).compareTo(other.isSetQuotationDeploySet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuotationDeploySet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quotationDeploySet, other.quotationDeploySet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuotationAccountId()).compareTo(other.isSetQuotationAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuotationAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quotationAccountId, other.quotationAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsForActive()).compareTo(other.isSetIsForActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsForActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isForActive, other.isForActive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestampMs()).compareTo(other.isSetCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestampMs, other.createTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubscribeContractItem(");
    boolean first = true;

    if (isSetItemId()) {
      sb.append("itemId:");
      sb.append(this.itemId);
      first = false;
    }
    if (isSetClassId()) {
      if (!first) sb.append(", ");
      sb.append("classId:");
      sb.append(this.classId);
      first = false;
    }
    if (isSetSledExchangeMic()) {
      if (!first) sb.append(", ");
      sb.append("sledExchangeMic:");
      if (this.sledExchangeMic == null) {
        sb.append("null");
      } else {
        sb.append(this.sledExchangeMic);
      }
      first = false;
    }
    if (isSetSledCommodityId()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetSledCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityType:");
      sb.append(this.sledCommodityType);
      first = false;
    }
    if (isSetSledCommodityCode()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityCode:");
      if (this.sledCommodityCode == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityCode);
      }
      first = false;
    }
    if (isSetSledContractCode()) {
      if (!first) sb.append(", ");
      sb.append("sledContractCode:");
      if (this.sledContractCode == null) {
        sb.append("null");
      } else {
        sb.append(this.sledContractCode);
      }
      first = false;
    }
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    if (isSetPlatformEnv()) {
      if (!first) sb.append(", ");
      sb.append("platformEnv:");
      if (this.platformEnv == null) {
        sb.append("null");
      } else {
        sb.append(this.platformEnv);
      }
      first = false;
    }
    if (isSetQuotationDeploySet()) {
      if (!first) sb.append(", ");
      sb.append("quotationDeploySet:");
      if (this.quotationDeploySet == null) {
        sb.append("null");
      } else {
        sb.append(this.quotationDeploySet);
      }
      first = false;
    }
    if (isSetQuotationAccountId()) {
      if (!first) sb.append(", ");
      sb.append("quotationAccountId:");
      sb.append(this.quotationAccountId);
      first = false;
    }
    if (isSetIsForActive()) {
      if (!first) sb.append(", ");
      sb.append("isForActive:");
      sb.append(this.isForActive);
      first = false;
    }
    if (isSetCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("createTimestampMs:");
      sb.append(this.createTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SubscribeContractItemStandardSchemeFactory implements SchemeFactory {
    public SubscribeContractItemStandardScheme getScheme() {
      return new SubscribeContractItemStandardScheme();
    }
  }

  private static class SubscribeContractItemStandardScheme extends StandardScheme<SubscribeContractItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SubscribeContractItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.itemId = iprot.readI64();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLASS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.classId = iprot.readI64();
              struct.setClassIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLED_EXCHANGE_MIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledExchangeMic = iprot.readString();
              struct.setSledExchangeMicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledCommodityId = iprot.readI64();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SLED_COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.sledCommodityType = iprot.readI16();
              struct.setSledCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SLED_COMMODITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledCommodityCode = iprot.readString();
              struct.setSledCommodityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SLED_CONTRACT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledContractCode = iprot.readString();
              struct.setSledContractCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledContractId = iprot.readI64();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PLATFORM_ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platformEnv = xueqiao.quotation.account.thriftapi.QuotationPlatformEnv.findByValue(iprot.readI32());
              struct.setPlatformEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // QUOTATION_DEPLOY_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quotationDeploySet = xueqiao.quotation.account.thriftapi.DeploySet.findByValue(iprot.readI32());
              struct.setQuotationDeploySetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // QUOTATION_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.quotationAccountId = iprot.readI64();
              struct.setQuotationAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_FOR_ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isForActive = iprot.readBool();
              struct.setIsForActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestampMs = iprot.readI64();
              struct.setCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SubscribeContractItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetItemId()) {
        oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
        oprot.writeI64(struct.itemId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClassId()) {
        oprot.writeFieldBegin(CLASS_ID_FIELD_DESC);
        oprot.writeI64(struct.classId);
        oprot.writeFieldEnd();
      }
      if (struct.sledExchangeMic != null) {
        if (struct.isSetSledExchangeMic()) {
          oprot.writeFieldBegin(SLED_EXCHANGE_MIC_FIELD_DESC);
          oprot.writeString(struct.sledExchangeMic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI64(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledCommodityType()) {
        oprot.writeFieldBegin(SLED_COMMODITY_TYPE_FIELD_DESC);
        oprot.writeI16(struct.sledCommodityType);
        oprot.writeFieldEnd();
      }
      if (struct.sledCommodityCode != null) {
        if (struct.isSetSledCommodityCode()) {
          oprot.writeFieldBegin(SLED_COMMODITY_CODE_FIELD_DESC);
          oprot.writeString(struct.sledCommodityCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledContractCode != null) {
        if (struct.isSetSledContractCode()) {
          oprot.writeFieldBegin(SLED_CONTRACT_CODE_FIELD_DESC);
          oprot.writeString(struct.sledContractCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI64(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      if (struct.platformEnv != null) {
        if (struct.isSetPlatformEnv()) {
          oprot.writeFieldBegin(PLATFORM_ENV_FIELD_DESC);
          oprot.writeI32(struct.platformEnv.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.quotationDeploySet != null) {
        if (struct.isSetQuotationDeploySet()) {
          oprot.writeFieldBegin(QUOTATION_DEPLOY_SET_FIELD_DESC);
          oprot.writeI32(struct.quotationDeploySet.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetQuotationAccountId()) {
        oprot.writeFieldBegin(QUOTATION_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.quotationAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsForActive()) {
        oprot.writeFieldBegin(IS_FOR_ACTIVE_FIELD_DESC);
        oprot.writeBool(struct.isForActive);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.createTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SubscribeContractItemTupleSchemeFactory implements SchemeFactory {
    public SubscribeContractItemTupleScheme getScheme() {
      return new SubscribeContractItemTupleScheme();
    }
  }

  private static class SubscribeContractItemTupleScheme extends TupleScheme<SubscribeContractItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SubscribeContractItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetItemId()) {
        optionals.set(0);
      }
      if (struct.isSetClassId()) {
        optionals.set(1);
      }
      if (struct.isSetSledExchangeMic()) {
        optionals.set(2);
      }
      if (struct.isSetSledCommodityId()) {
        optionals.set(3);
      }
      if (struct.isSetSledCommodityType()) {
        optionals.set(4);
      }
      if (struct.isSetSledCommodityCode()) {
        optionals.set(5);
      }
      if (struct.isSetSledContractCode()) {
        optionals.set(6);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(7);
      }
      if (struct.isSetPlatformEnv()) {
        optionals.set(8);
      }
      if (struct.isSetQuotationDeploySet()) {
        optionals.set(9);
      }
      if (struct.isSetQuotationAccountId()) {
        optionals.set(10);
      }
      if (struct.isSetIsForActive()) {
        optionals.set(11);
      }
      if (struct.isSetCreateTimestampMs()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetItemId()) {
        oprot.writeI64(struct.itemId);
      }
      if (struct.isSetClassId()) {
        oprot.writeI64(struct.classId);
      }
      if (struct.isSetSledExchangeMic()) {
        oprot.writeString(struct.sledExchangeMic);
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeI64(struct.sledCommodityId);
      }
      if (struct.isSetSledCommodityType()) {
        oprot.writeI16(struct.sledCommodityType);
      }
      if (struct.isSetSledCommodityCode()) {
        oprot.writeString(struct.sledCommodityCode);
      }
      if (struct.isSetSledContractCode()) {
        oprot.writeString(struct.sledContractCode);
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI64(struct.sledContractId);
      }
      if (struct.isSetPlatformEnv()) {
        oprot.writeI32(struct.platformEnv.getValue());
      }
      if (struct.isSetQuotationDeploySet()) {
        oprot.writeI32(struct.quotationDeploySet.getValue());
      }
      if (struct.isSetQuotationAccountId()) {
        oprot.writeI64(struct.quotationAccountId);
      }
      if (struct.isSetIsForActive()) {
        oprot.writeBool(struct.isForActive);
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeI64(struct.createTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SubscribeContractItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.itemId = iprot.readI64();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.classId = iprot.readI64();
        struct.setClassIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sledExchangeMic = iprot.readString();
        struct.setSledExchangeMicIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sledCommodityId = iprot.readI64();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sledCommodityType = iprot.readI16();
        struct.setSledCommodityTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sledCommodityCode = iprot.readString();
        struct.setSledCommodityCodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sledContractCode = iprot.readString();
        struct.setSledContractCodeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sledContractId = iprot.readI64();
        struct.setSledContractIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.platformEnv = xueqiao.quotation.account.thriftapi.QuotationPlatformEnv.findByValue(iprot.readI32());
        struct.setPlatformEnvIsSet(true);
      }
      if (incoming.get(9)) {
        struct.quotationDeploySet = xueqiao.quotation.account.thriftapi.DeploySet.findByValue(iprot.readI32());
        struct.setQuotationDeploySetIsSet(true);
      }
      if (incoming.get(10)) {
        struct.quotationAccountId = iprot.readI64();
        struct.setQuotationAccountIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isForActive = iprot.readBool();
        struct.setIsForActiveIsSet(true);
      }
      if (incoming.get(12)) {
        struct.createTimestampMs = iprot.readI64();
        struct.setCreateTimestampMsIsSet(true);
      }
    }
  }

}

