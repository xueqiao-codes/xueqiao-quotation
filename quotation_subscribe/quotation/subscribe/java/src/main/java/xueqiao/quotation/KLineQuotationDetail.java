/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.quotation;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class KLineQuotationDetail implements org.apache.thrift.TBase<KLineQuotationDetail, KLineQuotationDetail._Fields>, java.io.Serializable, Cloneable, Comparable<KLineQuotationDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KLineQuotationDetail");

  private static final org.apache.thrift.protocol.TField K_LINE_OPEN_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("kLineOpenPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField K_LINE_HIGH_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("kLineHighPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField K_LINE_LOW_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("kLineLowPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField K_LINE_CLOSE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("kLineClosePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField K_LINE_QTY_FIELD_DESC = new org.apache.thrift.protocol.TField("kLineQty", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField K_LINE_SETTLEMENT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("kLineSettlementPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField K_LINE_OPEN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("kLineOpenInterest", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new KLineQuotationDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new KLineQuotationDetailTupleSchemeFactory());
  }

  public double kLineOpenPrice; // optional
  public double kLineHighPrice; // optional
  public double kLineLowPrice; // optional
  public double kLineClosePrice; // optional
  public long kLineQty; // optional
  public double kLineSettlementPrice; // optional
  public long kLineOpenInterest; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    K_LINE_OPEN_PRICE((short)1, "kLineOpenPrice"),
    K_LINE_HIGH_PRICE((short)2, "kLineHighPrice"),
    K_LINE_LOW_PRICE((short)3, "kLineLowPrice"),
    K_LINE_CLOSE_PRICE((short)4, "kLineClosePrice"),
    K_LINE_QTY((short)5, "kLineQty"),
    K_LINE_SETTLEMENT_PRICE((short)6, "kLineSettlementPrice"),
    K_LINE_OPEN_INTEREST((short)7, "kLineOpenInterest");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // K_LINE_OPEN_PRICE
          return K_LINE_OPEN_PRICE;
        case 2: // K_LINE_HIGH_PRICE
          return K_LINE_HIGH_PRICE;
        case 3: // K_LINE_LOW_PRICE
          return K_LINE_LOW_PRICE;
        case 4: // K_LINE_CLOSE_PRICE
          return K_LINE_CLOSE_PRICE;
        case 5: // K_LINE_QTY
          return K_LINE_QTY;
        case 6: // K_LINE_SETTLEMENT_PRICE
          return K_LINE_SETTLEMENT_PRICE;
        case 7: // K_LINE_OPEN_INTEREST
          return K_LINE_OPEN_INTEREST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __KLINEOPENPRICE_ISSET_ID = 0;
  private static final int __KLINEHIGHPRICE_ISSET_ID = 1;
  private static final int __KLINELOWPRICE_ISSET_ID = 2;
  private static final int __KLINECLOSEPRICE_ISSET_ID = 3;
  private static final int __KLINEQTY_ISSET_ID = 4;
  private static final int __KLINESETTLEMENTPRICE_ISSET_ID = 5;
  private static final int __KLINEOPENINTEREST_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.K_LINE_OPEN_PRICE,_Fields.K_LINE_HIGH_PRICE,_Fields.K_LINE_LOW_PRICE,_Fields.K_LINE_CLOSE_PRICE,_Fields.K_LINE_QTY,_Fields.K_LINE_SETTLEMENT_PRICE,_Fields.K_LINE_OPEN_INTEREST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.K_LINE_OPEN_PRICE, new org.apache.thrift.meta_data.FieldMetaData("kLineOpenPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.K_LINE_HIGH_PRICE, new org.apache.thrift.meta_data.FieldMetaData("kLineHighPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.K_LINE_LOW_PRICE, new org.apache.thrift.meta_data.FieldMetaData("kLineLowPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.K_LINE_CLOSE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("kLineClosePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.K_LINE_QTY, new org.apache.thrift.meta_data.FieldMetaData("kLineQty", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.K_LINE_SETTLEMENT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("kLineSettlementPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.K_LINE_OPEN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("kLineOpenInterest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KLineQuotationDetail.class, metaDataMap);
  }

  public KLineQuotationDetail() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KLineQuotationDetail(KLineQuotationDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    this.kLineOpenPrice = other.kLineOpenPrice;
    this.kLineHighPrice = other.kLineHighPrice;
    this.kLineLowPrice = other.kLineLowPrice;
    this.kLineClosePrice = other.kLineClosePrice;
    this.kLineQty = other.kLineQty;
    this.kLineSettlementPrice = other.kLineSettlementPrice;
    this.kLineOpenInterest = other.kLineOpenInterest;
  }

  public KLineQuotationDetail deepCopy() {
    return new KLineQuotationDetail(this);
  }

  @Override
  public void clear() {
    setKLineOpenPriceIsSet(false);
    this.kLineOpenPrice = 0.0;
    setKLineHighPriceIsSet(false);
    this.kLineHighPrice = 0.0;
    setKLineLowPriceIsSet(false);
    this.kLineLowPrice = 0.0;
    setKLineClosePriceIsSet(false);
    this.kLineClosePrice = 0.0;
    setKLineQtyIsSet(false);
    this.kLineQty = 0;
    setKLineSettlementPriceIsSet(false);
    this.kLineSettlementPrice = 0.0;
    setKLineOpenInterestIsSet(false);
    this.kLineOpenInterest = 0;
  }

  public double getKLineOpenPrice() {
    return this.kLineOpenPrice;
  }

  public KLineQuotationDetail setKLineOpenPrice(double kLineOpenPrice) {
    this.kLineOpenPrice = kLineOpenPrice;
    setKLineOpenPriceIsSet(true);
    return this;
  }

  public void unsetKLineOpenPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KLINEOPENPRICE_ISSET_ID);
  }

  /** Returns true if field kLineOpenPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetKLineOpenPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __KLINEOPENPRICE_ISSET_ID);
  }

  public void setKLineOpenPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KLINEOPENPRICE_ISSET_ID, value);
  }

  public double getKLineHighPrice() {
    return this.kLineHighPrice;
  }

  public KLineQuotationDetail setKLineHighPrice(double kLineHighPrice) {
    this.kLineHighPrice = kLineHighPrice;
    setKLineHighPriceIsSet(true);
    return this;
  }

  public void unsetKLineHighPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KLINEHIGHPRICE_ISSET_ID);
  }

  /** Returns true if field kLineHighPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetKLineHighPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __KLINEHIGHPRICE_ISSET_ID);
  }

  public void setKLineHighPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KLINEHIGHPRICE_ISSET_ID, value);
  }

  public double getKLineLowPrice() {
    return this.kLineLowPrice;
  }

  public KLineQuotationDetail setKLineLowPrice(double kLineLowPrice) {
    this.kLineLowPrice = kLineLowPrice;
    setKLineLowPriceIsSet(true);
    return this;
  }

  public void unsetKLineLowPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KLINELOWPRICE_ISSET_ID);
  }

  /** Returns true if field kLineLowPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetKLineLowPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __KLINELOWPRICE_ISSET_ID);
  }

  public void setKLineLowPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KLINELOWPRICE_ISSET_ID, value);
  }

  public double getKLineClosePrice() {
    return this.kLineClosePrice;
  }

  public KLineQuotationDetail setKLineClosePrice(double kLineClosePrice) {
    this.kLineClosePrice = kLineClosePrice;
    setKLineClosePriceIsSet(true);
    return this;
  }

  public void unsetKLineClosePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KLINECLOSEPRICE_ISSET_ID);
  }

  /** Returns true if field kLineClosePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetKLineClosePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __KLINECLOSEPRICE_ISSET_ID);
  }

  public void setKLineClosePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KLINECLOSEPRICE_ISSET_ID, value);
  }

  public long getKLineQty() {
    return this.kLineQty;
  }

  public KLineQuotationDetail setKLineQty(long kLineQty) {
    this.kLineQty = kLineQty;
    setKLineQtyIsSet(true);
    return this;
  }

  public void unsetKLineQty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KLINEQTY_ISSET_ID);
  }

  /** Returns true if field kLineQty is set (has been assigned a value) and false otherwise */
  public boolean isSetKLineQty() {
    return EncodingUtils.testBit(__isset_bitfield, __KLINEQTY_ISSET_ID);
  }

  public void setKLineQtyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KLINEQTY_ISSET_ID, value);
  }

  public double getKLineSettlementPrice() {
    return this.kLineSettlementPrice;
  }

  public KLineQuotationDetail setKLineSettlementPrice(double kLineSettlementPrice) {
    this.kLineSettlementPrice = kLineSettlementPrice;
    setKLineSettlementPriceIsSet(true);
    return this;
  }

  public void unsetKLineSettlementPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KLINESETTLEMENTPRICE_ISSET_ID);
  }

  /** Returns true if field kLineSettlementPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetKLineSettlementPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __KLINESETTLEMENTPRICE_ISSET_ID);
  }

  public void setKLineSettlementPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KLINESETTLEMENTPRICE_ISSET_ID, value);
  }

  public long getKLineOpenInterest() {
    return this.kLineOpenInterest;
  }

  public KLineQuotationDetail setKLineOpenInterest(long kLineOpenInterest) {
    this.kLineOpenInterest = kLineOpenInterest;
    setKLineOpenInterestIsSet(true);
    return this;
  }

  public void unsetKLineOpenInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KLINEOPENINTEREST_ISSET_ID);
  }

  /** Returns true if field kLineOpenInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetKLineOpenInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __KLINEOPENINTEREST_ISSET_ID);
  }

  public void setKLineOpenInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KLINEOPENINTEREST_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case K_LINE_OPEN_PRICE:
      if (value == null) {
        unsetKLineOpenPrice();
      } else {
        setKLineOpenPrice((Double)value);
      }
      break;

    case K_LINE_HIGH_PRICE:
      if (value == null) {
        unsetKLineHighPrice();
      } else {
        setKLineHighPrice((Double)value);
      }
      break;

    case K_LINE_LOW_PRICE:
      if (value == null) {
        unsetKLineLowPrice();
      } else {
        setKLineLowPrice((Double)value);
      }
      break;

    case K_LINE_CLOSE_PRICE:
      if (value == null) {
        unsetKLineClosePrice();
      } else {
        setKLineClosePrice((Double)value);
      }
      break;

    case K_LINE_QTY:
      if (value == null) {
        unsetKLineQty();
      } else {
        setKLineQty((Long)value);
      }
      break;

    case K_LINE_SETTLEMENT_PRICE:
      if (value == null) {
        unsetKLineSettlementPrice();
      } else {
        setKLineSettlementPrice((Double)value);
      }
      break;

    case K_LINE_OPEN_INTEREST:
      if (value == null) {
        unsetKLineOpenInterest();
      } else {
        setKLineOpenInterest((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case K_LINE_OPEN_PRICE:
      return Double.valueOf(getKLineOpenPrice());

    case K_LINE_HIGH_PRICE:
      return Double.valueOf(getKLineHighPrice());

    case K_LINE_LOW_PRICE:
      return Double.valueOf(getKLineLowPrice());

    case K_LINE_CLOSE_PRICE:
      return Double.valueOf(getKLineClosePrice());

    case K_LINE_QTY:
      return Long.valueOf(getKLineQty());

    case K_LINE_SETTLEMENT_PRICE:
      return Double.valueOf(getKLineSettlementPrice());

    case K_LINE_OPEN_INTEREST:
      return Long.valueOf(getKLineOpenInterest());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case K_LINE_OPEN_PRICE:
      return isSetKLineOpenPrice();
    case K_LINE_HIGH_PRICE:
      return isSetKLineHighPrice();
    case K_LINE_LOW_PRICE:
      return isSetKLineLowPrice();
    case K_LINE_CLOSE_PRICE:
      return isSetKLineClosePrice();
    case K_LINE_QTY:
      return isSetKLineQty();
    case K_LINE_SETTLEMENT_PRICE:
      return isSetKLineSettlementPrice();
    case K_LINE_OPEN_INTEREST:
      return isSetKLineOpenInterest();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KLineQuotationDetail)
      return this.equals((KLineQuotationDetail)that);
    return false;
  }

  public boolean equals(KLineQuotationDetail that) {
    if (that == null)
      return false;

    boolean this_present_kLineOpenPrice = true && this.isSetKLineOpenPrice();
    boolean that_present_kLineOpenPrice = true && that.isSetKLineOpenPrice();
    if (this_present_kLineOpenPrice || that_present_kLineOpenPrice) {
      if (!(this_present_kLineOpenPrice && that_present_kLineOpenPrice))
        return false;
      if (this.kLineOpenPrice != that.kLineOpenPrice)
        return false;
    }

    boolean this_present_kLineHighPrice = true && this.isSetKLineHighPrice();
    boolean that_present_kLineHighPrice = true && that.isSetKLineHighPrice();
    if (this_present_kLineHighPrice || that_present_kLineHighPrice) {
      if (!(this_present_kLineHighPrice && that_present_kLineHighPrice))
        return false;
      if (this.kLineHighPrice != that.kLineHighPrice)
        return false;
    }

    boolean this_present_kLineLowPrice = true && this.isSetKLineLowPrice();
    boolean that_present_kLineLowPrice = true && that.isSetKLineLowPrice();
    if (this_present_kLineLowPrice || that_present_kLineLowPrice) {
      if (!(this_present_kLineLowPrice && that_present_kLineLowPrice))
        return false;
      if (this.kLineLowPrice != that.kLineLowPrice)
        return false;
    }

    boolean this_present_kLineClosePrice = true && this.isSetKLineClosePrice();
    boolean that_present_kLineClosePrice = true && that.isSetKLineClosePrice();
    if (this_present_kLineClosePrice || that_present_kLineClosePrice) {
      if (!(this_present_kLineClosePrice && that_present_kLineClosePrice))
        return false;
      if (this.kLineClosePrice != that.kLineClosePrice)
        return false;
    }

    boolean this_present_kLineQty = true && this.isSetKLineQty();
    boolean that_present_kLineQty = true && that.isSetKLineQty();
    if (this_present_kLineQty || that_present_kLineQty) {
      if (!(this_present_kLineQty && that_present_kLineQty))
        return false;
      if (this.kLineQty != that.kLineQty)
        return false;
    }

    boolean this_present_kLineSettlementPrice = true && this.isSetKLineSettlementPrice();
    boolean that_present_kLineSettlementPrice = true && that.isSetKLineSettlementPrice();
    if (this_present_kLineSettlementPrice || that_present_kLineSettlementPrice) {
      if (!(this_present_kLineSettlementPrice && that_present_kLineSettlementPrice))
        return false;
      if (this.kLineSettlementPrice != that.kLineSettlementPrice)
        return false;
    }

    boolean this_present_kLineOpenInterest = true && this.isSetKLineOpenInterest();
    boolean that_present_kLineOpenInterest = true && that.isSetKLineOpenInterest();
    if (this_present_kLineOpenInterest || that_present_kLineOpenInterest) {
      if (!(this_present_kLineOpenInterest && that_present_kLineOpenInterest))
        return false;
      if (this.kLineOpenInterest != that.kLineOpenInterest)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(KLineQuotationDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKLineOpenPrice()).compareTo(other.isSetKLineOpenPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKLineOpenPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kLineOpenPrice, other.kLineOpenPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKLineHighPrice()).compareTo(other.isSetKLineHighPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKLineHighPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kLineHighPrice, other.kLineHighPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKLineLowPrice()).compareTo(other.isSetKLineLowPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKLineLowPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kLineLowPrice, other.kLineLowPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKLineClosePrice()).compareTo(other.isSetKLineClosePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKLineClosePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kLineClosePrice, other.kLineClosePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKLineQty()).compareTo(other.isSetKLineQty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKLineQty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kLineQty, other.kLineQty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKLineSettlementPrice()).compareTo(other.isSetKLineSettlementPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKLineSettlementPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kLineSettlementPrice, other.kLineSettlementPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKLineOpenInterest()).compareTo(other.isSetKLineOpenInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKLineOpenInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kLineOpenInterest, other.kLineOpenInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KLineQuotationDetail(");
    boolean first = true;

    if (isSetKLineOpenPrice()) {
      sb.append("kLineOpenPrice:");
      sb.append(this.kLineOpenPrice);
      first = false;
    }
    if (isSetKLineHighPrice()) {
      if (!first) sb.append(", ");
      sb.append("kLineHighPrice:");
      sb.append(this.kLineHighPrice);
      first = false;
    }
    if (isSetKLineLowPrice()) {
      if (!first) sb.append(", ");
      sb.append("kLineLowPrice:");
      sb.append(this.kLineLowPrice);
      first = false;
    }
    if (isSetKLineClosePrice()) {
      if (!first) sb.append(", ");
      sb.append("kLineClosePrice:");
      sb.append(this.kLineClosePrice);
      first = false;
    }
    if (isSetKLineQty()) {
      if (!first) sb.append(", ");
      sb.append("kLineQty:");
      sb.append(this.kLineQty);
      first = false;
    }
    if (isSetKLineSettlementPrice()) {
      if (!first) sb.append(", ");
      sb.append("kLineSettlementPrice:");
      sb.append(this.kLineSettlementPrice);
      first = false;
    }
    if (isSetKLineOpenInterest()) {
      if (!first) sb.append(", ");
      sb.append("kLineOpenInterest:");
      sb.append(this.kLineOpenInterest);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KLineQuotationDetailStandardSchemeFactory implements SchemeFactory {
    public KLineQuotationDetailStandardScheme getScheme() {
      return new KLineQuotationDetailStandardScheme();
    }
  }

  private static class KLineQuotationDetailStandardScheme extends StandardScheme<KLineQuotationDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KLineQuotationDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // K_LINE_OPEN_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.kLineOpenPrice = iprot.readDouble();
              struct.setKLineOpenPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // K_LINE_HIGH_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.kLineHighPrice = iprot.readDouble();
              struct.setKLineHighPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // K_LINE_LOW_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.kLineLowPrice = iprot.readDouble();
              struct.setKLineLowPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // K_LINE_CLOSE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.kLineClosePrice = iprot.readDouble();
              struct.setKLineClosePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // K_LINE_QTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.kLineQty = iprot.readI64();
              struct.setKLineQtyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // K_LINE_SETTLEMENT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.kLineSettlementPrice = iprot.readDouble();
              struct.setKLineSettlementPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // K_LINE_OPEN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.kLineOpenInterest = iprot.readI64();
              struct.setKLineOpenInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KLineQuotationDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetKLineOpenPrice()) {
        oprot.writeFieldBegin(K_LINE_OPEN_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.kLineOpenPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetKLineHighPrice()) {
        oprot.writeFieldBegin(K_LINE_HIGH_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.kLineHighPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetKLineLowPrice()) {
        oprot.writeFieldBegin(K_LINE_LOW_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.kLineLowPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetKLineClosePrice()) {
        oprot.writeFieldBegin(K_LINE_CLOSE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.kLineClosePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetKLineQty()) {
        oprot.writeFieldBegin(K_LINE_QTY_FIELD_DESC);
        oprot.writeI64(struct.kLineQty);
        oprot.writeFieldEnd();
      }
      if (struct.isSetKLineSettlementPrice()) {
        oprot.writeFieldBegin(K_LINE_SETTLEMENT_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.kLineSettlementPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetKLineOpenInterest()) {
        oprot.writeFieldBegin(K_LINE_OPEN_INTEREST_FIELD_DESC);
        oprot.writeI64(struct.kLineOpenInterest);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KLineQuotationDetailTupleSchemeFactory implements SchemeFactory {
    public KLineQuotationDetailTupleScheme getScheme() {
      return new KLineQuotationDetailTupleScheme();
    }
  }

  private static class KLineQuotationDetailTupleScheme extends TupleScheme<KLineQuotationDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KLineQuotationDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetKLineOpenPrice()) {
        optionals.set(0);
      }
      if (struct.isSetKLineHighPrice()) {
        optionals.set(1);
      }
      if (struct.isSetKLineLowPrice()) {
        optionals.set(2);
      }
      if (struct.isSetKLineClosePrice()) {
        optionals.set(3);
      }
      if (struct.isSetKLineQty()) {
        optionals.set(4);
      }
      if (struct.isSetKLineSettlementPrice()) {
        optionals.set(5);
      }
      if (struct.isSetKLineOpenInterest()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetKLineOpenPrice()) {
        oprot.writeDouble(struct.kLineOpenPrice);
      }
      if (struct.isSetKLineHighPrice()) {
        oprot.writeDouble(struct.kLineHighPrice);
      }
      if (struct.isSetKLineLowPrice()) {
        oprot.writeDouble(struct.kLineLowPrice);
      }
      if (struct.isSetKLineClosePrice()) {
        oprot.writeDouble(struct.kLineClosePrice);
      }
      if (struct.isSetKLineQty()) {
        oprot.writeI64(struct.kLineQty);
      }
      if (struct.isSetKLineSettlementPrice()) {
        oprot.writeDouble(struct.kLineSettlementPrice);
      }
      if (struct.isSetKLineOpenInterest()) {
        oprot.writeI64(struct.kLineOpenInterest);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KLineQuotationDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.kLineOpenPrice = iprot.readDouble();
        struct.setKLineOpenPriceIsSet(true);
      }
      if (incoming.get(1)) {
        struct.kLineHighPrice = iprot.readDouble();
        struct.setKLineHighPriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.kLineLowPrice = iprot.readDouble();
        struct.setKLineLowPriceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.kLineClosePrice = iprot.readDouble();
        struct.setKLineClosePriceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.kLineQty = iprot.readI64();
        struct.setKLineQtyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.kLineSettlementPrice = iprot.readDouble();
        struct.setKLineSettlementPriceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.kLineOpenInterest = iprot.readI64();
        struct.setKLineOpenInterestIsSet(true);
      }
    }
  }

}

