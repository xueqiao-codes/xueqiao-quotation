#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes
import page.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class QuotationTechPlatform:
  NONE = 0
  CTP = 1
  ESUNNY = 2

  _VALUES_TO_NAMES = {
    0: "NONE",
    1: "CTP",
    2: "ESUNNY",
  }

  _NAMES_TO_VALUES = {
    "NONE": 0,
    "CTP": 1,
    "ESUNNY": 2,
  }

class QuotationPlatformEnv:
  NONE = 0
  REAL = 1
  SIM = 2

  _VALUES_TO_NAMES = {
    0: "NONE",
    1: "REAL",
    2: "SIM",
  }

  _NAMES_TO_VALUES = {
    "NONE": 0,
    "REAL": 1,
    "SIM": 2,
  }

class QuotationAccountState:
  """
  账号本身的状态
  """
  ACCOUNT_DISABLED = 0
  ACCOUNT_ENABLED = 1

  _VALUES_TO_NAMES = {
    0: "ACCOUNT_DISABLED",
    1: "ACCOUNT_ENABLED",
  }

  _NAMES_TO_VALUES = {
    "ACCOUNT_DISABLED": 0,
    "ACCOUNT_ENABLED": 1,
  }

class QuotationAccountAccessState:
  """
  账号接入的状态
  """
  ACCOUNT_NOT_ACCESS = 0
  ACCOUNT_ACTIVE = 1
  ACCOUNT_INVALID = 2

  _VALUES_TO_NAMES = {
    0: "ACCOUNT_NOT_ACCESS",
    1: "ACCOUNT_ACTIVE",
    2: "ACCOUNT_INVALID",
  }

  _NAMES_TO_VALUES = {
    "ACCOUNT_NOT_ACCESS": 0,
    "ACCOUNT_ACTIVE": 1,
    "ACCOUNT_INVALID": 2,
  }

class SupportType:
  SET = 0
  ALL = 1

  _VALUES_TO_NAMES = {
    0: "SET",
    1: "ALL",
  }

  _NAMES_TO_VALUES = {
    "SET": 0,
    "ALL": 1,
  }

class QuotationAccountOrderBy:
  ACCOUNT_ID = 0
  CREATE_TIMESTAMP = 1

  _VALUES_TO_NAMES = {
    0: "ACCOUNT_ID",
    1: "CREATE_TIMESTAMP",
  }

  _NAMES_TO_VALUES = {
    "ACCOUNT_ID": 0,
    "CREATE_TIMESTAMP": 1,
  }


class ContractActiveRule:
  """
  商品活跃合约规则

  Attributes:
   - sledCommodityId
   - activeMonthMap
   - createTimestamp
   - lastModityTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sledCommodityId', None, None, ), # 1
    (2, TType.MAP, 'activeMonthMap', (TType.I32,None,TType.BOOL,None), None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    (6, TType.I64, 'createTimestamp', None, None, ), # 6
    (7, TType.I64, 'lastModityTimestamp', None, None, ), # 7
  )

  def __init__(self, sledCommodityId=None, activeMonthMap=None, createTimestamp=None, lastModityTimestamp=None,):
    self.sledCommodityId = sledCommodityId
    self.activeMonthMap = activeMonthMap
    self.createTimestamp = createTimestamp
    self.lastModityTimestamp = lastModityTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sledCommodityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.activeMonthMap = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readI32();
            _val6 = iprot.readBool();
            self.activeMonthMap[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.createTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.lastModityTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ContractActiveRule')
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I32, 1)
      oprot.writeI32(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.activeMonthMap is not None:
      oprot.writeFieldBegin('activeMonthMap', TType.MAP, 2)
      oprot.writeMapBegin(TType.I32, TType.BOOL, len(self.activeMonthMap))
      for kiter7,viter8 in self.activeMonthMap.items():
        oprot.writeI32(kiter7)
        oprot.writeBool(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I64, 6)
      oprot.writeI64(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastModityTimestamp is not None:
      oprot.writeFieldBegin('lastModityTimestamp', TType.I64, 7)
      oprot.writeI64(self.lastModityTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ContractRegisterRule:
  """
  合约订阅规则

  Attributes:
   - sledCommodityId
   - registerPriority
   - activeShowCount
   - inactiveShowCount
   - platformEnv
   - createTimestamp
   - lastModityTimestamp
   - orderIndex
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sledCommodityId', None, None, ), # 1
    (2, TType.I32, 'registerPriority', None, None, ), # 2
    (3, TType.I32, 'activeShowCount', None, None, ), # 3
    (4, TType.I32, 'inactiveShowCount', None, None, ), # 4
    (5, TType.I32, 'platformEnv', None, None, ), # 5
    (6, TType.I64, 'createTimestamp', None, None, ), # 6
    (7, TType.I64, 'lastModityTimestamp', None, None, ), # 7
    (8, TType.I32, 'orderIndex', None, None, ), # 8
  )

  def __init__(self, sledCommodityId=None, registerPriority=None, activeShowCount=None, inactiveShowCount=None, platformEnv=None, createTimestamp=None, lastModityTimestamp=None, orderIndex=None,):
    self.sledCommodityId = sledCommodityId
    self.registerPriority = registerPriority
    self.activeShowCount = activeShowCount
    self.inactiveShowCount = inactiveShowCount
    self.platformEnv = platformEnv
    self.createTimestamp = createTimestamp
    self.lastModityTimestamp = lastModityTimestamp
    self.orderIndex = orderIndex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sledCommodityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.registerPriority = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.activeShowCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.inactiveShowCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.platformEnv = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.createTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.lastModityTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.orderIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ContractRegisterRule')
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I32, 1)
      oprot.writeI32(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.registerPriority is not None:
      oprot.writeFieldBegin('registerPriority', TType.I32, 2)
      oprot.writeI32(self.registerPriority)
      oprot.writeFieldEnd()
    if self.activeShowCount is not None:
      oprot.writeFieldBegin('activeShowCount', TType.I32, 3)
      oprot.writeI32(self.activeShowCount)
      oprot.writeFieldEnd()
    if self.inactiveShowCount is not None:
      oprot.writeFieldBegin('inactiveShowCount', TType.I32, 4)
      oprot.writeI32(self.inactiveShowCount)
      oprot.writeFieldEnd()
    if self.platformEnv is not None:
      oprot.writeFieldBegin('platformEnv', TType.I32, 5)
      oprot.writeI32(self.platformEnv)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I64, 6)
      oprot.writeI64(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastModityTimestamp is not None:
      oprot.writeFieldBegin('lastModityTimestamp', TType.I64, 7)
      oprot.writeI64(self.lastModityTimestamp)
      oprot.writeFieldEnd()
    if self.orderIndex is not None:
      oprot.writeFieldBegin('orderIndex', TType.I32, 8)
      oprot.writeI32(self.orderIndex)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommodityRegisterOrder:
  """
  Attributes:
   - sledCommodityId
   - platformEnv
   - orderIndex
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sledCommodityId', None, None, ), # 1
    (2, TType.I32, 'platformEnv', None, None, ), # 2
    (3, TType.I32, 'orderIndex', None, None, ), # 3
  )

  def __init__(self, sledCommodityId=None, platformEnv=None, orderIndex=None,):
    self.sledCommodityId = sledCommodityId
    self.platformEnv = platformEnv
    self.orderIndex = orderIndex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sledCommodityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.platformEnv = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.orderIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommodityRegisterOrder')
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I32, 1)
      oprot.writeI32(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.platformEnv is not None:
      oprot.writeFieldBegin('platformEnv', TType.I32, 2)
      oprot.writeI32(self.platformEnv)
      oprot.writeFieldEnd()
    if self.orderIndex is not None:
      oprot.writeFieldBegin('orderIndex', TType.I32, 3)
      oprot.writeI32(self.orderIndex)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuotationAccount:
  """
  行情账号信息

  Attributes:
   - accountId
   - accountName
   - accountpwd
   - nickName
   - platform
   - brokerId
   - brokerAccessId
   - accountProperties
   - accountState
   - accessState
   - invalidReason
   - invalidErrorCode
   - apiRetCode
   - maxRegisterCount
   - createTimestamp
   - lastModifyTimestamp
   - platformEnv
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'accountId', None, None, ), # 1
    (2, TType.STRING, 'accountName', None, None, ), # 2
    (3, TType.STRING, 'accountpwd', None, None, ), # 3
    (4, TType.STRING, 'nickName', None, None, ), # 4
    (5, TType.I32, 'platform', None, None, ), # 5
    (6, TType.I32, 'brokerId', None, None, ), # 6
    (7, TType.I32, 'brokerAccessId', None, None, ), # 7
    (8, TType.MAP, 'accountProperties', (TType.STRING,None,TType.STRING,None), None, ), # 8
    (9, TType.I32, 'accountState', None, None, ), # 9
    (10, TType.I32, 'accessState', None, None, ), # 10
    (11, TType.STRING, 'invalidReason', None, None, ), # 11
    (12, TType.I32, 'invalidErrorCode', None, None, ), # 12
    (13, TType.I32, 'apiRetCode', None, None, ), # 13
    (14, TType.I32, 'maxRegisterCount', None, None, ), # 14
    (15, TType.I64, 'createTimestamp', None, None, ), # 15
    (16, TType.I64, 'lastModifyTimestamp', None, None, ), # 16
    (17, TType.I32, 'platformEnv', None, None, ), # 17
  )

  def __init__(self, accountId=None, accountName=None, accountpwd=None, nickName=None, platform=None, brokerId=None, brokerAccessId=None, accountProperties=None, accountState=None, accessState=None, invalidReason=None, invalidErrorCode=None, apiRetCode=None, maxRegisterCount=None, createTimestamp=None, lastModifyTimestamp=None, platformEnv=None,):
    self.accountId = accountId
    self.accountName = accountName
    self.accountpwd = accountpwd
    self.nickName = nickName
    self.platform = platform
    self.brokerId = brokerId
    self.brokerAccessId = brokerAccessId
    self.accountProperties = accountProperties
    self.accountState = accountState
    self.accessState = accessState
    self.invalidReason = invalidReason
    self.invalidErrorCode = invalidErrorCode
    self.apiRetCode = apiRetCode
    self.maxRegisterCount = maxRegisterCount
    self.createTimestamp = createTimestamp
    self.lastModifyTimestamp = lastModifyTimestamp
    self.platformEnv = platformEnv

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.accountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.accountName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.accountpwd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.nickName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.platform = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.brokerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.brokerAccessId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.accountProperties = {}
          (_ktype10, _vtype11, _size9 ) = iprot.readMapBegin()
          for _i13 in xrange(_size9):
            _key14 = iprot.readString();
            _val15 = iprot.readString();
            self.accountProperties[_key14] = _val15
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.accountState = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.accessState = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.invalidReason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.invalidErrorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.apiRetCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.maxRegisterCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.createTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          self.lastModifyTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.platformEnv = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuotationAccount')
    if self.accountId is not None:
      oprot.writeFieldBegin('accountId', TType.I64, 1)
      oprot.writeI64(self.accountId)
      oprot.writeFieldEnd()
    if self.accountName is not None:
      oprot.writeFieldBegin('accountName', TType.STRING, 2)
      oprot.writeString(self.accountName)
      oprot.writeFieldEnd()
    if self.accountpwd is not None:
      oprot.writeFieldBegin('accountpwd', TType.STRING, 3)
      oprot.writeString(self.accountpwd)
      oprot.writeFieldEnd()
    if self.nickName is not None:
      oprot.writeFieldBegin('nickName', TType.STRING, 4)
      oprot.writeString(self.nickName)
      oprot.writeFieldEnd()
    if self.platform is not None:
      oprot.writeFieldBegin('platform', TType.I32, 5)
      oprot.writeI32(self.platform)
      oprot.writeFieldEnd()
    if self.brokerId is not None:
      oprot.writeFieldBegin('brokerId', TType.I32, 6)
      oprot.writeI32(self.brokerId)
      oprot.writeFieldEnd()
    if self.brokerAccessId is not None:
      oprot.writeFieldBegin('brokerAccessId', TType.I32, 7)
      oprot.writeI32(self.brokerAccessId)
      oprot.writeFieldEnd()
    if self.accountProperties is not None:
      oprot.writeFieldBegin('accountProperties', TType.MAP, 8)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.accountProperties))
      for kiter16,viter17 in self.accountProperties.items():
        oprot.writeString(kiter16)
        oprot.writeString(viter17)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.accountState is not None:
      oprot.writeFieldBegin('accountState', TType.I32, 9)
      oprot.writeI32(self.accountState)
      oprot.writeFieldEnd()
    if self.accessState is not None:
      oprot.writeFieldBegin('accessState', TType.I32, 10)
      oprot.writeI32(self.accessState)
      oprot.writeFieldEnd()
    if self.invalidReason is not None:
      oprot.writeFieldBegin('invalidReason', TType.STRING, 11)
      oprot.writeString(self.invalidReason)
      oprot.writeFieldEnd()
    if self.invalidErrorCode is not None:
      oprot.writeFieldBegin('invalidErrorCode', TType.I32, 12)
      oprot.writeI32(self.invalidErrorCode)
      oprot.writeFieldEnd()
    if self.apiRetCode is not None:
      oprot.writeFieldBegin('apiRetCode', TType.I32, 13)
      oprot.writeI32(self.apiRetCode)
      oprot.writeFieldEnd()
    if self.maxRegisterCount is not None:
      oprot.writeFieldBegin('maxRegisterCount', TType.I32, 14)
      oprot.writeI32(self.maxRegisterCount)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I64, 15)
      oprot.writeI64(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastModifyTimestamp is not None:
      oprot.writeFieldBegin('lastModifyTimestamp', TType.I64, 16)
      oprot.writeI64(self.lastModifyTimestamp)
      oprot.writeFieldEnd()
    if self.platformEnv is not None:
      oprot.writeFieldBegin('platformEnv', TType.I32, 17)
      oprot.writeI32(self.platformEnv)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MicSupportCommodity:
  """
  Attributes:
   - supportType
   - supportCommodityIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'supportType', None, None, ), # 1
    (2, TType.SET, 'supportCommodityIds', (TType.I32,None), None, ), # 2
  )

  def __init__(self, supportType=None, supportCommodityIds=None,):
    self.supportType = supportType
    self.supportCommodityIds = supportCommodityIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.supportType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.SET:
          self.supportCommodityIds = set()
          (_etype21, _size18) = iprot.readSetBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readI32();
            self.supportCommodityIds.add(_elem23)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MicSupportCommodity')
    if self.supportType is not None:
      oprot.writeFieldBegin('supportType', TType.I32, 1)
      oprot.writeI32(self.supportType)
      oprot.writeFieldEnd()
    if self.supportCommodityIds is not None:
      oprot.writeFieldBegin('supportCommodityIds', TType.SET, 2)
      oprot.writeSetBegin(TType.I32, len(self.supportCommodityIds))
      for iter24 in self.supportCommodityIds:
        oprot.writeI32(iter24)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuotationAccountSupport:
  """
  Attributes:
   - accountId
   - micSupport
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'accountId', None, None, ), # 1
    (2, TType.MAP, 'micSupport', (TType.STRING,None,TType.STRUCT,(MicSupportCommodity, MicSupportCommodity.thrift_spec)), None, ), # 2
  )

  def __init__(self, accountId=None, micSupport=None,):
    self.accountId = accountId
    self.micSupport = micSupport

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.accountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.micSupport = {}
          (_ktype26, _vtype27, _size25 ) = iprot.readMapBegin()
          for _i29 in xrange(_size25):
            _key30 = iprot.readString();
            _val31 = MicSupportCommodity()
            _val31.read(iprot)
            self.micSupport[_key30] = _val31
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuotationAccountSupport')
    if self.accountId is not None:
      oprot.writeFieldBegin('accountId', TType.I64, 1)
      oprot.writeI64(self.accountId)
      oprot.writeFieldEnd()
    if self.micSupport is not None:
      oprot.writeFieldBegin('micSupport', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.micSupport))
      for kiter32,viter33 in self.micSupport.items():
        oprot.writeString(kiter32)
        viter33.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqQuotationAccountSupportOption:
  """
  Attributes:
   - accountIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.SET, 'accountIds', (TType.I64,None), None, ), # 1
  )

  def __init__(self, accountIds=None,):
    self.accountIds = accountIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.accountIds = set()
          (_etype37, _size34) = iprot.readSetBegin()
          for _i38 in xrange(_size34):
            _elem39 = iprot.readI64();
            self.accountIds.add(_elem39)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqQuotationAccountSupportOption')
    if self.accountIds is not None:
      oprot.writeFieldBegin('accountIds', TType.SET, 1)
      oprot.writeSetBegin(TType.I64, len(self.accountIds))
      for iter40 in self.accountIds:
        oprot.writeI64(iter40)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuotationAccountSupportPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(QuotationAccountSupport, QuotationAccountSupport.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype44, _size41) = iprot.readListBegin()
          for _i45 in xrange(_size41):
            _elem46 = QuotationAccountSupport()
            _elem46.read(iprot)
            self.page.append(_elem46)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuotationAccountSupportPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter47 in self.page:
        iter47.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountCommodityRegisterAbility:
  """
  Attributes:
   - registerAbilityId
   - accountId
   - sledExchangeId
   - exchangeMic
   - supportType
   - sledCommodityId
   - createTimestamp
   - lastModifyTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'registerAbilityId', None, None, ), # 1
    (2, TType.I64, 'accountId', None, None, ), # 2
    (3, TType.I32, 'sledExchangeId', None, None, ), # 3
    (4, TType.STRING, 'exchangeMic', None, None, ), # 4
    (5, TType.I32, 'supportType', None, None, ), # 5
    (6, TType.I32, 'sledCommodityId', None, None, ), # 6
    (7, TType.I64, 'createTimestamp', None, None, ), # 7
    (8, TType.I64, 'lastModifyTimestamp', None, None, ), # 8
  )

  def __init__(self, registerAbilityId=None, accountId=None, sledExchangeId=None, exchangeMic=None, supportType=None, sledCommodityId=None, createTimestamp=None, lastModifyTimestamp=None,):
    self.registerAbilityId = registerAbilityId
    self.accountId = accountId
    self.sledExchangeId = sledExchangeId
    self.exchangeMic = exchangeMic
    self.supportType = supportType
    self.sledCommodityId = sledCommodityId
    self.createTimestamp = createTimestamp
    self.lastModifyTimestamp = lastModifyTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.registerAbilityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.accountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sledExchangeId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.exchangeMic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.supportType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.sledCommodityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.createTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.lastModifyTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountCommodityRegisterAbility')
    if self.registerAbilityId is not None:
      oprot.writeFieldBegin('registerAbilityId', TType.I64, 1)
      oprot.writeI64(self.registerAbilityId)
      oprot.writeFieldEnd()
    if self.accountId is not None:
      oprot.writeFieldBegin('accountId', TType.I64, 2)
      oprot.writeI64(self.accountId)
      oprot.writeFieldEnd()
    if self.sledExchangeId is not None:
      oprot.writeFieldBegin('sledExchangeId', TType.I32, 3)
      oprot.writeI32(self.sledExchangeId)
      oprot.writeFieldEnd()
    if self.exchangeMic is not None:
      oprot.writeFieldBegin('exchangeMic', TType.STRING, 4)
      oprot.writeString(self.exchangeMic)
      oprot.writeFieldEnd()
    if self.supportType is not None:
      oprot.writeFieldBegin('supportType', TType.I32, 5)
      oprot.writeI32(self.supportType)
      oprot.writeFieldEnd()
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I32, 6)
      oprot.writeI32(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I64, 7)
      oprot.writeI64(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastModifyTimestamp is not None:
      oprot.writeFieldBegin('lastModifyTimestamp', TType.I64, 8)
      oprot.writeI64(self.lastModifyTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountCommodityRegisterAbilityPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(AccountCommodityRegisterAbility, AccountCommodityRegisterAbility.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype51, _size48) = iprot.readListBegin()
          for _i52 in xrange(_size48):
            _elem53 = AccountCommodityRegisterAbility()
            _elem53.read(iprot)
            self.page.append(_elem53)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountCommodityRegisterAbilityPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter54 in self.page:
        iter54.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqAccountCommodityRegisterAbilityOption:
  """
  Attributes:
   - registerAbilityId
   - accountId
   - sledCommodityIds
   - sledExchangeIds
   - supportType
   - exchangeMics
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'registerAbilityId', None, None, ), # 1
    (2, TType.I64, 'accountId', None, None, ), # 2
    (3, TType.SET, 'sledCommodityIds', (TType.I32,None), None, ), # 3
    (4, TType.SET, 'sledExchangeIds', (TType.I32,None), None, ), # 4
    (5, TType.I32, 'supportType', None, None, ), # 5
    (6, TType.SET, 'exchangeMics', (TType.STRING,None), None, ), # 6
  )

  def __init__(self, registerAbilityId=None, accountId=None, sledCommodityIds=None, sledExchangeIds=None, supportType=None, exchangeMics=None,):
    self.registerAbilityId = registerAbilityId
    self.accountId = accountId
    self.sledCommodityIds = sledCommodityIds
    self.sledExchangeIds = sledExchangeIds
    self.supportType = supportType
    self.exchangeMics = exchangeMics

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.registerAbilityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.accountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.sledCommodityIds = set()
          (_etype58, _size55) = iprot.readSetBegin()
          for _i59 in xrange(_size55):
            _elem60 = iprot.readI32();
            self.sledCommodityIds.add(_elem60)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.SET:
          self.sledExchangeIds = set()
          (_etype64, _size61) = iprot.readSetBegin()
          for _i65 in xrange(_size61):
            _elem66 = iprot.readI32();
            self.sledExchangeIds.add(_elem66)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.supportType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.SET:
          self.exchangeMics = set()
          (_etype70, _size67) = iprot.readSetBegin()
          for _i71 in xrange(_size67):
            _elem72 = iprot.readString();
            self.exchangeMics.add(_elem72)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqAccountCommodityRegisterAbilityOption')
    if self.registerAbilityId is not None:
      oprot.writeFieldBegin('registerAbilityId', TType.I64, 1)
      oprot.writeI64(self.registerAbilityId)
      oprot.writeFieldEnd()
    if self.accountId is not None:
      oprot.writeFieldBegin('accountId', TType.I64, 2)
      oprot.writeI64(self.accountId)
      oprot.writeFieldEnd()
    if self.sledCommodityIds is not None:
      oprot.writeFieldBegin('sledCommodityIds', TType.SET, 3)
      oprot.writeSetBegin(TType.I32, len(self.sledCommodityIds))
      for iter73 in self.sledCommodityIds:
        oprot.writeI32(iter73)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.sledExchangeIds is not None:
      oprot.writeFieldBegin('sledExchangeIds', TType.SET, 4)
      oprot.writeSetBegin(TType.I32, len(self.sledExchangeIds))
      for iter74 in self.sledExchangeIds:
        oprot.writeI32(iter74)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.supportType is not None:
      oprot.writeFieldBegin('supportType', TType.I32, 5)
      oprot.writeI32(self.supportType)
      oprot.writeFieldEnd()
    if self.exchangeMics is not None:
      oprot.writeFieldBegin('exchangeMics', TType.SET, 6)
      oprot.writeSetBegin(TType.STRING, len(self.exchangeMics))
      for iter75 in self.exchangeMics:
        oprot.writeString(iter75)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuotationAccountPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(QuotationAccount, QuotationAccount.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype79, _size76) = iprot.readListBegin()
          for _i80 in xrange(_size76):
            _elem81 = QuotationAccount()
            _elem81.read(iprot)
            self.page.append(_elem81)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuotationAccountPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter82 in self.page:
        iter82.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ContractActiveRulePage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(ContractActiveRule, ContractActiveRule.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype86, _size83) = iprot.readListBegin()
          for _i87 in xrange(_size83):
            _elem88 = ContractActiveRule()
            _elem88.read(iprot)
            self.page.append(_elem88)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ContractActiveRulePage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter89 in self.page:
        iter89.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ContractRegisterRulePage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(ContractRegisterRule, ContractRegisterRule.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype93, _size90) = iprot.readListBegin()
          for _i94 in xrange(_size90):
            _elem95 = ContractRegisterRule()
            _elem95.read(iprot)
            self.page.append(_elem95)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ContractRegisterRulePage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter96 in self.page:
        iter96.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqContractActiveRuleOption:
  """
  Attributes:
   - commodityIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.SET, 'commodityIds', (TType.I32,None), None, ), # 1
  )

  def __init__(self, commodityIds=None,):
    self.commodityIds = commodityIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.commodityIds = set()
          (_etype100, _size97) = iprot.readSetBegin()
          for _i101 in xrange(_size97):
            _elem102 = iprot.readI32();
            self.commodityIds.add(_elem102)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqContractActiveRuleOption')
    if self.commodityIds is not None:
      oprot.writeFieldBegin('commodityIds', TType.SET, 1)
      oprot.writeSetBegin(TType.I32, len(self.commodityIds))
      for iter103 in self.commodityIds:
        oprot.writeI32(iter103)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqContractRegisterRuleOption:
  """
  Attributes:
   - commodityIds
   - platformEnv
  """

  thrift_spec = (
    None, # 0
    (1, TType.SET, 'commodityIds', (TType.I32,None), None, ), # 1
    (2, TType.I32, 'platformEnv', None, None, ), # 2
  )

  def __init__(self, commodityIds=None, platformEnv=None,):
    self.commodityIds = commodityIds
    self.platformEnv = platformEnv

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.commodityIds = set()
          (_etype107, _size104) = iprot.readSetBegin()
          for _i108 in xrange(_size104):
            _elem109 = iprot.readI32();
            self.commodityIds.add(_elem109)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.platformEnv = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqContractRegisterRuleOption')
    if self.commodityIds is not None:
      oprot.writeFieldBegin('commodityIds', TType.SET, 1)
      oprot.writeSetBegin(TType.I32, len(self.commodityIds))
      for iter110 in self.commodityIds:
        oprot.writeI32(iter110)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.platformEnv is not None:
      oprot.writeFieldBegin('platformEnv', TType.I32, 2)
      oprot.writeI32(self.platformEnv)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqQuotationAccountOption:
  """
  Attributes:
   - accountIds
   - platform
   - platformEnv
   - supportCommodityIds
   - brokerIds
   - accountNamePartical
   - nickNamePartical
   - orderBy
  """

  thrift_spec = (
    None, # 0
    (1, TType.SET, 'accountIds', (TType.I64,None), None, ), # 1
    (2, TType.I32, 'platform', None, None, ), # 2
    (3, TType.I32, 'platformEnv', None, None, ), # 3
    (4, TType.SET, 'supportCommodityIds', (TType.I32,None), None, ), # 4
    (5, TType.SET, 'brokerIds', (TType.I32,None), None, ), # 5
    (6, TType.STRING, 'accountNamePartical', None, None, ), # 6
    (7, TType.STRING, 'nickNamePartical', None, None, ), # 7
    (8, TType.I32, 'orderBy', None, None, ), # 8
  )

  def __init__(self, accountIds=None, platform=None, platformEnv=None, supportCommodityIds=None, brokerIds=None, accountNamePartical=None, nickNamePartical=None, orderBy=None,):
    self.accountIds = accountIds
    self.platform = platform
    self.platformEnv = platformEnv
    self.supportCommodityIds = supportCommodityIds
    self.brokerIds = brokerIds
    self.accountNamePartical = accountNamePartical
    self.nickNamePartical = nickNamePartical
    self.orderBy = orderBy

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.accountIds = set()
          (_etype114, _size111) = iprot.readSetBegin()
          for _i115 in xrange(_size111):
            _elem116 = iprot.readI64();
            self.accountIds.add(_elem116)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.platform = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.platformEnv = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.SET:
          self.supportCommodityIds = set()
          (_etype120, _size117) = iprot.readSetBegin()
          for _i121 in xrange(_size117):
            _elem122 = iprot.readI32();
            self.supportCommodityIds.add(_elem122)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.SET:
          self.brokerIds = set()
          (_etype126, _size123) = iprot.readSetBegin()
          for _i127 in xrange(_size123):
            _elem128 = iprot.readI32();
            self.brokerIds.add(_elem128)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.accountNamePartical = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.nickNamePartical = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.orderBy = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqQuotationAccountOption')
    if self.accountIds is not None:
      oprot.writeFieldBegin('accountIds', TType.SET, 1)
      oprot.writeSetBegin(TType.I64, len(self.accountIds))
      for iter129 in self.accountIds:
        oprot.writeI64(iter129)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.platform is not None:
      oprot.writeFieldBegin('platform', TType.I32, 2)
      oprot.writeI32(self.platform)
      oprot.writeFieldEnd()
    if self.platformEnv is not None:
      oprot.writeFieldBegin('platformEnv', TType.I32, 3)
      oprot.writeI32(self.platformEnv)
      oprot.writeFieldEnd()
    if self.supportCommodityIds is not None:
      oprot.writeFieldBegin('supportCommodityIds', TType.SET, 4)
      oprot.writeSetBegin(TType.I32, len(self.supportCommodityIds))
      for iter130 in self.supportCommodityIds:
        oprot.writeI32(iter130)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.brokerIds is not None:
      oprot.writeFieldBegin('brokerIds', TType.SET, 5)
      oprot.writeSetBegin(TType.I32, len(self.brokerIds))
      for iter131 in self.brokerIds:
        oprot.writeI32(iter131)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.accountNamePartical is not None:
      oprot.writeFieldBegin('accountNamePartical', TType.STRING, 6)
      oprot.writeString(self.accountNamePartical)
      oprot.writeFieldEnd()
    if self.nickNamePartical is not None:
      oprot.writeFieldBegin('nickNamePartical', TType.STRING, 7)
      oprot.writeString(self.nickNamePartical)
      oprot.writeFieldEnd()
    if self.orderBy is not None:
      oprot.writeFieldBegin('orderBy', TType.I32, 8)
      oprot.writeI32(self.orderBy)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
