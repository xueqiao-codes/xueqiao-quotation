#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import socket
from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TCompactProtocol
from thrift.transport.TTransport import TTransportException
from comm.ttypes import *
from page.ttypes import *
from xueqiao.quotation.account.thriftapi.ttypes import *
from xueqiao.quotation.account.thriftapi.dao.ttypes import *
from xueqiao.quotation.account.thriftapi.dao import QuotationAccountDao

PYTHON_SUPPORT_DIR='/usr/local/soldier/route_agent'
if not (PYTHON_SUPPORT_DIR in sys.path):
  sys.path.append(PYTHON_SUPPORT_DIR)
from route_finder_python import *

class QuotationAccountDaoStub:
  def __init__(self):
    self.__peerAddr = None

  def setPeerAddr(self, peerAddr):
    self.__peerAddr = peerAddr

  def __getServiceAddr(self, methodName='', routeKey=0):
    if self.__peerAddr != None and self.__peerAddr !='':
      return self.__peerAddr
    return route_finder.GetRouteIp(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, methodName, routeKey)

  def reqContractActiveRule(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqContractActiveRule', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationAccountDao.QuotationAccountDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationAccountDao.Client(protocol)
    try:
      transport.open()
      result = client.reqContractActiveRule(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'reqContractActiveRule', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'reqContractActiveRule', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def reqContractRegisterRule(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqContractRegisterRule', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationAccountDao.QuotationAccountDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationAccountDao.Client(protocol)
    try:
      transport.open()
      result = client.reqContractRegisterRule(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'reqContractRegisterRule', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'reqContractRegisterRule', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def reqQuotationAccount(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqQuotationAccount', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationAccountDao.QuotationAccountDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationAccountDao.Client(protocol)
    try:
      transport.open()
      result = client.reqQuotationAccount(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'reqQuotationAccount', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'reqQuotationAccount', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def addContractActiveRule(self, routeKey, timeout, rule,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('addContractActiveRule', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationAccountDao.QuotationAccountDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationAccountDao.Client(protocol)
    try:
      transport.open()
      result = client.addContractActiveRule(platformArgs,rule,)
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'addContractActiveRule', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'addContractActiveRule', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def addContractRegisterRule(self, routeKey, timeout, rule,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('addContractRegisterRule', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationAccountDao.QuotationAccountDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationAccountDao.Client(protocol)
    try:
      transport.open()
      result = client.addContractRegisterRule(platformArgs,rule,)
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'addContractRegisterRule', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'addContractRegisterRule', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def addQuotationAccount(self, routeKey, timeout, account,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('addQuotationAccount', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationAccountDao.QuotationAccountDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationAccountDao.Client(protocol)
    try:
      transport.open()
      result = client.addQuotationAccount(platformArgs,account,)
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'addQuotationAccount', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'addQuotationAccount', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def updateContractActiveRule(self, routeKey, timeout, rule,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('updateContractActiveRule', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationAccountDao.QuotationAccountDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationAccountDao.Client(protocol)
    try:
      transport.open()
      result = client.updateContractActiveRule(platformArgs,rule,)
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'updateContractActiveRule', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'updateContractActiveRule', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def updateContractRegisterRule(self, routeKey, timeout, rule,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('updateContractRegisterRule', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationAccountDao.QuotationAccountDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationAccountDao.Client(protocol)
    try:
      transport.open()
      result = client.updateContractRegisterRule(platformArgs,rule,)
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'updateContractRegisterRule', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'updateContractRegisterRule', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def updateQuotationAccount(self, routeKey, timeout, account,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('updateQuotationAccount', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationAccountDao.QuotationAccountDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationAccountDao.Client(protocol)
    try:
      transport.open()
      result = client.updateQuotationAccount(platformArgs,account,)
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'updateQuotationAccount', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'updateQuotationAccount', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def removeContractActiveRule(self, routeKey, timeout, sledCommodityId,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('removeContractActiveRule', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationAccountDao.QuotationAccountDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationAccountDao.Client(protocol)
    try:
      transport.open()
      result = client.removeContractActiveRule(platformArgs,sledCommodityId,)
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'removeContractActiveRule', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'removeContractActiveRule', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def removeContractRegisterRule(self, routeKey, timeout, sledCommodityId,platformEnv,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('removeContractRegisterRule', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationAccountDao.QuotationAccountDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationAccountDao.Client(protocol)
    try:
      transport.open()
      result = client.removeContractRegisterRule(platformArgs,sledCommodityId,platformEnv,)
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'removeContractRegisterRule', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'removeContractRegisterRule', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def removeQuotationAccount(self, routeKey, timeout, accountId,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('removeQuotationAccount', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationAccountDao.QuotationAccountDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationAccountDao.Client(protocol)
    try:
      transport.open()
      result = client.removeQuotationAccount(platformArgs,accountId,)
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'removeQuotationAccount', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'removeQuotationAccount', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def reqAccountCommodityRegisterAbility(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqAccountCommodityRegisterAbility', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationAccountDao.QuotationAccountDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationAccountDao.Client(protocol)
    try:
      transport.open()
      result = client.reqAccountCommodityRegisterAbility(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'reqAccountCommodityRegisterAbility', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'reqAccountCommodityRegisterAbility', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def addAccountCommodityRegisterAbility(self, routeKey, timeout, ability,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('addAccountCommodityRegisterAbility', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationAccountDao.QuotationAccountDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationAccountDao.Client(protocol)
    try:
      transport.open()
      result = client.addAccountCommodityRegisterAbility(platformArgs,ability,)
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'addAccountCommodityRegisterAbility', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'addAccountCommodityRegisterAbility', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def removeAccountCommodityRegisterAbility(self, routeKey, timeout, supportAbilityId,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('removeAccountCommodityRegisterAbility', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationAccountDao.QuotationAccountDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationAccountDao.Client(protocol)
    try:
      transport.open()
      result = client.removeAccountCommodityRegisterAbility(platformArgs,supportAbilityId,)
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'removeAccountCommodityRegisterAbility', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'removeAccountCommodityRegisterAbility', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def reqQuotationAccountSupport(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqQuotationAccountSupport', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationAccountDao.QuotationAccountDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationAccountDao.Client(protocol)
    try:
      transport.open()
      result = client.reqQuotationAccountSupport(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'reqQuotationAccountSupport', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'reqQuotationAccountSupport', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def setCommodityRegisterOrderIndex(self, routeKey, timeout, sledCommodityId,platformEnv,orderIndex,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('setCommodityRegisterOrderIndex', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + QuotationAccountDao.QuotationAccountDao_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=QuotationAccountDao.Client(protocol)
    try:
      transport.open()
      result = client.setCommodityRegisterOrderIndex(platformArgs,sledCommodityId,platformEnv,orderIndex,)
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'setCommodityRegisterOrderIndex', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(QuotationAccountDao.QuotationAccountDao_SERVICE_KEY, 'setCommodityRegisterOrderIndex', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

