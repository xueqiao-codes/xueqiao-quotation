/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.quotation.account.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqContractRegisterRuleOption implements org.apache.thrift.TBase<ReqContractRegisterRuleOption, ReqContractRegisterRuleOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqContractRegisterRuleOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqContractRegisterRuleOption");

  private static final org.apache.thrift.protocol.TField COMMODITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityIds", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField PLATFORM_ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("platformEnv", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqContractRegisterRuleOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqContractRegisterRuleOptionTupleSchemeFactory());
  }

  public Set<Integer> commodityIds; // optional
  /**
   * 
   * @see QuotationPlatformEnv
   */
  public QuotationPlatformEnv platformEnv; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMODITY_IDS((short)1, "commodityIds"),
    /**
     * 
     * @see QuotationPlatformEnv
     */
    PLATFORM_ENV((short)2, "platformEnv");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMODITY_IDS
          return COMMODITY_IDS;
        case 2: // PLATFORM_ENV
          return PLATFORM_ENV;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.COMMODITY_IDS,_Fields.PLATFORM_ENV};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMODITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("commodityIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PLATFORM_ENV, new org.apache.thrift.meta_data.FieldMetaData("platformEnv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, QuotationPlatformEnv.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqContractRegisterRuleOption.class, metaDataMap);
  }

  public ReqContractRegisterRuleOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqContractRegisterRuleOption(ReqContractRegisterRuleOption other) {
    if (other.isSetCommodityIds()) {
      Set<Integer> __this__commodityIds = new HashSet<Integer>(other.commodityIds);
      this.commodityIds = __this__commodityIds;
    }
    if (other.isSetPlatformEnv()) {
      this.platformEnv = other.platformEnv;
    }
  }

  public ReqContractRegisterRuleOption deepCopy() {
    return new ReqContractRegisterRuleOption(this);
  }

  @Override
  public void clear() {
    this.commodityIds = null;
    this.platformEnv = null;
  }

  public int getCommodityIdsSize() {
    return (this.commodityIds == null) ? 0 : this.commodityIds.size();
  }

  public java.util.Iterator<Integer> getCommodityIdsIterator() {
    return (this.commodityIds == null) ? null : this.commodityIds.iterator();
  }

  public void addToCommodityIds(int elem) {
    if (this.commodityIds == null) {
      this.commodityIds = new HashSet<Integer>();
    }
    this.commodityIds.add(elem);
  }

  public Set<Integer> getCommodityIds() {
    return this.commodityIds;
  }

  public ReqContractRegisterRuleOption setCommodityIds(Set<Integer> commodityIds) {
    this.commodityIds = commodityIds;
    return this;
  }

  public void unsetCommodityIds() {
    this.commodityIds = null;
  }

  /** Returns true if field commodityIds is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityIds() {
    return this.commodityIds != null;
  }

  public void setCommodityIdsIsSet(boolean value) {
    if (!value) {
      this.commodityIds = null;
    }
  }

  /**
   * 
   * @see QuotationPlatformEnv
   */
  public QuotationPlatformEnv getPlatformEnv() {
    return this.platformEnv;
  }

  /**
   * 
   * @see QuotationPlatformEnv
   */
  public ReqContractRegisterRuleOption setPlatformEnv(QuotationPlatformEnv platformEnv) {
    this.platformEnv = platformEnv;
    return this;
  }

  public void unsetPlatformEnv() {
    this.platformEnv = null;
  }

  /** Returns true if field platformEnv is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformEnv() {
    return this.platformEnv != null;
  }

  public void setPlatformEnvIsSet(boolean value) {
    if (!value) {
      this.platformEnv = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMODITY_IDS:
      if (value == null) {
        unsetCommodityIds();
      } else {
        setCommodityIds((Set<Integer>)value);
      }
      break;

    case PLATFORM_ENV:
      if (value == null) {
        unsetPlatformEnv();
      } else {
        setPlatformEnv((QuotationPlatformEnv)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMODITY_IDS:
      return getCommodityIds();

    case PLATFORM_ENV:
      return getPlatformEnv();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMODITY_IDS:
      return isSetCommodityIds();
    case PLATFORM_ENV:
      return isSetPlatformEnv();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqContractRegisterRuleOption)
      return this.equals((ReqContractRegisterRuleOption)that);
    return false;
  }

  public boolean equals(ReqContractRegisterRuleOption that) {
    if (that == null)
      return false;

    boolean this_present_commodityIds = true && this.isSetCommodityIds();
    boolean that_present_commodityIds = true && that.isSetCommodityIds();
    if (this_present_commodityIds || that_present_commodityIds) {
      if (!(this_present_commodityIds && that_present_commodityIds))
        return false;
      if (!this.commodityIds.equals(that.commodityIds))
        return false;
    }

    boolean this_present_platformEnv = true && this.isSetPlatformEnv();
    boolean that_present_platformEnv = true && that.isSetPlatformEnv();
    if (this_present_platformEnv || that_present_platformEnv) {
      if (!(this_present_platformEnv && that_present_platformEnv))
        return false;
      if (!this.platformEnv.equals(that.platformEnv))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqContractRegisterRuleOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCommodityIds()).compareTo(other.isSetCommodityIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityIds, other.commodityIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatformEnv()).compareTo(other.isSetPlatformEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformEnv, other.platformEnv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqContractRegisterRuleOption(");
    boolean first = true;

    if (isSetCommodityIds()) {
      sb.append("commodityIds:");
      if (this.commodityIds == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityIds);
      }
      first = false;
    }
    if (isSetPlatformEnv()) {
      if (!first) sb.append(", ");
      sb.append("platformEnv:");
      if (this.platformEnv == null) {
        sb.append("null");
      } else {
        sb.append(this.platformEnv);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqContractRegisterRuleOptionStandardSchemeFactory implements SchemeFactory {
    public ReqContractRegisterRuleOptionStandardScheme getScheme() {
      return new ReqContractRegisterRuleOptionStandardScheme();
    }
  }

  private static class ReqContractRegisterRuleOptionStandardScheme extends StandardScheme<ReqContractRegisterRuleOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqContractRegisterRuleOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMODITY_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set244 = iprot.readSetBegin();
                struct.commodityIds = new HashSet<Integer>(2*_set244.size);
                for (int _i245 = 0; _i245 < _set244.size; ++_i245)
                {
                  int _elem246;
                  _elem246 = iprot.readI32();
                  struct.commodityIds.add(_elem246);
                }
                iprot.readSetEnd();
              }
              struct.setCommodityIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLATFORM_ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platformEnv = QuotationPlatformEnv.findByValue(iprot.readI32());
              struct.setPlatformEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqContractRegisterRuleOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.commodityIds != null) {
        if (struct.isSetCommodityIds()) {
          oprot.writeFieldBegin(COMMODITY_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.commodityIds.size()));
            for (int _iter247 : struct.commodityIds)
            {
              oprot.writeI32(_iter247);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.platformEnv != null) {
        if (struct.isSetPlatformEnv()) {
          oprot.writeFieldBegin(PLATFORM_ENV_FIELD_DESC);
          oprot.writeI32(struct.platformEnv.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqContractRegisterRuleOptionTupleSchemeFactory implements SchemeFactory {
    public ReqContractRegisterRuleOptionTupleScheme getScheme() {
      return new ReqContractRegisterRuleOptionTupleScheme();
    }
  }

  private static class ReqContractRegisterRuleOptionTupleScheme extends TupleScheme<ReqContractRegisterRuleOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqContractRegisterRuleOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCommodityIds()) {
        optionals.set(0);
      }
      if (struct.isSetPlatformEnv()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCommodityIds()) {
        {
          oprot.writeI32(struct.commodityIds.size());
          for (int _iter248 : struct.commodityIds)
          {
            oprot.writeI32(_iter248);
          }
        }
      }
      if (struct.isSetPlatformEnv()) {
        oprot.writeI32(struct.platformEnv.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqContractRegisterRuleOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set249 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.commodityIds = new HashSet<Integer>(2*_set249.size);
          for (int _i250 = 0; _i250 < _set249.size; ++_i250)
          {
            int _elem251;
            _elem251 = iprot.readI32();
            struct.commodityIds.add(_elem251);
          }
        }
        struct.setCommodityIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.platformEnv = QuotationPlatformEnv.findByValue(iprot.readI32());
        struct.setPlatformEnvIsSet(true);
      }
    }
  }

}

