/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.quotation.account.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 合约订阅规则
 */
public class ContractRegisterRule implements org.apache.thrift.TBase<ContractRegisterRule, ContractRegisterRule._Fields>, java.io.Serializable, Cloneable, Comparable<ContractRegisterRule> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContractRegisterRule");

  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REGISTER_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("registerPriority", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ACTIVE_SHOW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("activeShowCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField INACTIVE_SHOW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("inactiveShowCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PLATFORM_ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("platformEnv", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField LAST_MODITY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModityTimestamp", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField ORDER_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("orderIndex", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContractRegisterRuleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContractRegisterRuleTupleSchemeFactory());
  }

  public int sledCommodityId; // optional
  public int registerPriority; // optional
  public int activeShowCount; // optional
  public int inactiveShowCount; // optional
  /**
   * 
   * @see QuotationPlatformEnv
   */
  public QuotationPlatformEnv platformEnv; // optional
  public long createTimestamp; // optional
  public long lastModityTimestamp; // optional
  public int orderIndex; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_COMMODITY_ID((short)1, "sledCommodityId"),
    REGISTER_PRIORITY((short)2, "registerPriority"),
    ACTIVE_SHOW_COUNT((short)3, "activeShowCount"),
    INACTIVE_SHOW_COUNT((short)4, "inactiveShowCount"),
    /**
     * 
     * @see QuotationPlatformEnv
     */
    PLATFORM_ENV((short)5, "platformEnv"),
    CREATE_TIMESTAMP((short)6, "createTimestamp"),
    LAST_MODITY_TIMESTAMP((short)7, "lastModityTimestamp"),
    ORDER_INDEX((short)8, "orderIndex");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 2: // REGISTER_PRIORITY
          return REGISTER_PRIORITY;
        case 3: // ACTIVE_SHOW_COUNT
          return ACTIVE_SHOW_COUNT;
        case 4: // INACTIVE_SHOW_COUNT
          return INACTIVE_SHOW_COUNT;
        case 5: // PLATFORM_ENV
          return PLATFORM_ENV;
        case 6: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 7: // LAST_MODITY_TIMESTAMP
          return LAST_MODITY_TIMESTAMP;
        case 8: // ORDER_INDEX
          return ORDER_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDCOMMODITYID_ISSET_ID = 0;
  private static final int __REGISTERPRIORITY_ISSET_ID = 1;
  private static final int __ACTIVESHOWCOUNT_ISSET_ID = 2;
  private static final int __INACTIVESHOWCOUNT_ISSET_ID = 3;
  private static final int __CREATETIMESTAMP_ISSET_ID = 4;
  private static final int __LASTMODITYTIMESTAMP_ISSET_ID = 5;
  private static final int __ORDERINDEX_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_COMMODITY_ID,_Fields.REGISTER_PRIORITY,_Fields.ACTIVE_SHOW_COUNT,_Fields.INACTIVE_SHOW_COUNT,_Fields.PLATFORM_ENV,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODITY_TIMESTAMP,_Fields.ORDER_INDEX};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGISTER_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("registerPriority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVE_SHOW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("activeShowCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INACTIVE_SHOW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("inactiveShowCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLATFORM_ENV, new org.apache.thrift.meta_data.FieldMetaData("platformEnv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, QuotationPlatformEnv.class)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODITY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModityTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_INDEX, new org.apache.thrift.meta_data.FieldMetaData("orderIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContractRegisterRule.class, metaDataMap);
  }

  public ContractRegisterRule() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContractRegisterRule(ContractRegisterRule other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sledCommodityId = other.sledCommodityId;
    this.registerPriority = other.registerPriority;
    this.activeShowCount = other.activeShowCount;
    this.inactiveShowCount = other.inactiveShowCount;
    if (other.isSetPlatformEnv()) {
      this.platformEnv = other.platformEnv;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastModityTimestamp = other.lastModityTimestamp;
    this.orderIndex = other.orderIndex;
  }

  public ContractRegisterRule deepCopy() {
    return new ContractRegisterRule(this);
  }

  @Override
  public void clear() {
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    setRegisterPriorityIsSet(false);
    this.registerPriority = 0;
    setActiveShowCountIsSet(false);
    this.activeShowCount = 0;
    setInactiveShowCountIsSet(false);
    this.inactiveShowCount = 0;
    this.platformEnv = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModityTimestampIsSet(false);
    this.lastModityTimestamp = 0;
    setOrderIndexIsSet(false);
    this.orderIndex = 0;
  }

  public int getSledCommodityId() {
    return this.sledCommodityId;
  }

  public ContractRegisterRule setSledCommodityId(int sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public int getRegisterPriority() {
    return this.registerPriority;
  }

  public ContractRegisterRule setRegisterPriority(int registerPriority) {
    this.registerPriority = registerPriority;
    setRegisterPriorityIsSet(true);
    return this;
  }

  public void unsetRegisterPriority() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTERPRIORITY_ISSET_ID);
  }

  /** Returns true if field registerPriority is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisterPriority() {
    return EncodingUtils.testBit(__isset_bitfield, __REGISTERPRIORITY_ISSET_ID);
  }

  public void setRegisterPriorityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTERPRIORITY_ISSET_ID, value);
  }

  public int getActiveShowCount() {
    return this.activeShowCount;
  }

  public ContractRegisterRule setActiveShowCount(int activeShowCount) {
    this.activeShowCount = activeShowCount;
    setActiveShowCountIsSet(true);
    return this;
  }

  public void unsetActiveShowCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVESHOWCOUNT_ISSET_ID);
  }

  /** Returns true if field activeShowCount is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveShowCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVESHOWCOUNT_ISSET_ID);
  }

  public void setActiveShowCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVESHOWCOUNT_ISSET_ID, value);
  }

  public int getInactiveShowCount() {
    return this.inactiveShowCount;
  }

  public ContractRegisterRule setInactiveShowCount(int inactiveShowCount) {
    this.inactiveShowCount = inactiveShowCount;
    setInactiveShowCountIsSet(true);
    return this;
  }

  public void unsetInactiveShowCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INACTIVESHOWCOUNT_ISSET_ID);
  }

  /** Returns true if field inactiveShowCount is set (has been assigned a value) and false otherwise */
  public boolean isSetInactiveShowCount() {
    return EncodingUtils.testBit(__isset_bitfield, __INACTIVESHOWCOUNT_ISSET_ID);
  }

  public void setInactiveShowCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INACTIVESHOWCOUNT_ISSET_ID, value);
  }

  /**
   * 
   * @see QuotationPlatformEnv
   */
  public QuotationPlatformEnv getPlatformEnv() {
    return this.platformEnv;
  }

  /**
   * 
   * @see QuotationPlatformEnv
   */
  public ContractRegisterRule setPlatformEnv(QuotationPlatformEnv platformEnv) {
    this.platformEnv = platformEnv;
    return this;
  }

  public void unsetPlatformEnv() {
    this.platformEnv = null;
  }

  /** Returns true if field platformEnv is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformEnv() {
    return this.platformEnv != null;
  }

  public void setPlatformEnvIsSet(boolean value) {
    if (!value) {
      this.platformEnv = null;
    }
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public ContractRegisterRule setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModityTimestamp() {
    return this.lastModityTimestamp;
  }

  public ContractRegisterRule setLastModityTimestamp(long lastModityTimestamp) {
    this.lastModityTimestamp = lastModityTimestamp;
    setLastModityTimestampIsSet(true);
    return this;
  }

  public void unsetLastModityTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModityTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModityTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  public void setLastModityTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID, value);
  }

  public int getOrderIndex() {
    return this.orderIndex;
  }

  public ContractRegisterRule setOrderIndex(int orderIndex) {
    this.orderIndex = orderIndex;
    setOrderIndexIsSet(true);
    return this;
  }

  public void unsetOrderIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERINDEX_ISSET_ID);
  }

  /** Returns true if field orderIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERINDEX_ISSET_ID);
  }

  public void setOrderIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERINDEX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Integer)value);
      }
      break;

    case REGISTER_PRIORITY:
      if (value == null) {
        unsetRegisterPriority();
      } else {
        setRegisterPriority((Integer)value);
      }
      break;

    case ACTIVE_SHOW_COUNT:
      if (value == null) {
        unsetActiveShowCount();
      } else {
        setActiveShowCount((Integer)value);
      }
      break;

    case INACTIVE_SHOW_COUNT:
      if (value == null) {
        unsetInactiveShowCount();
      } else {
        setInactiveShowCount((Integer)value);
      }
      break;

    case PLATFORM_ENV:
      if (value == null) {
        unsetPlatformEnv();
      } else {
        setPlatformEnv((QuotationPlatformEnv)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODITY_TIMESTAMP:
      if (value == null) {
        unsetLastModityTimestamp();
      } else {
        setLastModityTimestamp((Long)value);
      }
      break;

    case ORDER_INDEX:
      if (value == null) {
        unsetOrderIndex();
      } else {
        setOrderIndex((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_COMMODITY_ID:
      return Integer.valueOf(getSledCommodityId());

    case REGISTER_PRIORITY:
      return Integer.valueOf(getRegisterPriority());

    case ACTIVE_SHOW_COUNT:
      return Integer.valueOf(getActiveShowCount());

    case INACTIVE_SHOW_COUNT:
      return Integer.valueOf(getInactiveShowCount());

    case PLATFORM_ENV:
      return getPlatformEnv();

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODITY_TIMESTAMP:
      return Long.valueOf(getLastModityTimestamp());

    case ORDER_INDEX:
      return Integer.valueOf(getOrderIndex());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case REGISTER_PRIORITY:
      return isSetRegisterPriority();
    case ACTIVE_SHOW_COUNT:
      return isSetActiveShowCount();
    case INACTIVE_SHOW_COUNT:
      return isSetInactiveShowCount();
    case PLATFORM_ENV:
      return isSetPlatformEnv();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODITY_TIMESTAMP:
      return isSetLastModityTimestamp();
    case ORDER_INDEX:
      return isSetOrderIndex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContractRegisterRule)
      return this.equals((ContractRegisterRule)that);
    return false;
  }

  public boolean equals(ContractRegisterRule that) {
    if (that == null)
      return false;

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_registerPriority = true && this.isSetRegisterPriority();
    boolean that_present_registerPriority = true && that.isSetRegisterPriority();
    if (this_present_registerPriority || that_present_registerPriority) {
      if (!(this_present_registerPriority && that_present_registerPriority))
        return false;
      if (this.registerPriority != that.registerPriority)
        return false;
    }

    boolean this_present_activeShowCount = true && this.isSetActiveShowCount();
    boolean that_present_activeShowCount = true && that.isSetActiveShowCount();
    if (this_present_activeShowCount || that_present_activeShowCount) {
      if (!(this_present_activeShowCount && that_present_activeShowCount))
        return false;
      if (this.activeShowCount != that.activeShowCount)
        return false;
    }

    boolean this_present_inactiveShowCount = true && this.isSetInactiveShowCount();
    boolean that_present_inactiveShowCount = true && that.isSetInactiveShowCount();
    if (this_present_inactiveShowCount || that_present_inactiveShowCount) {
      if (!(this_present_inactiveShowCount && that_present_inactiveShowCount))
        return false;
      if (this.inactiveShowCount != that.inactiveShowCount)
        return false;
    }

    boolean this_present_platformEnv = true && this.isSetPlatformEnv();
    boolean that_present_platformEnv = true && that.isSetPlatformEnv();
    if (this_present_platformEnv || that_present_platformEnv) {
      if (!(this_present_platformEnv && that_present_platformEnv))
        return false;
      if (!this.platformEnv.equals(that.platformEnv))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModityTimestamp = true && this.isSetLastModityTimestamp();
    boolean that_present_lastModityTimestamp = true && that.isSetLastModityTimestamp();
    if (this_present_lastModityTimestamp || that_present_lastModityTimestamp) {
      if (!(this_present_lastModityTimestamp && that_present_lastModityTimestamp))
        return false;
      if (this.lastModityTimestamp != that.lastModityTimestamp)
        return false;
    }

    boolean this_present_orderIndex = true && this.isSetOrderIndex();
    boolean that_present_orderIndex = true && that.isSetOrderIndex();
    if (this_present_orderIndex || that_present_orderIndex) {
      if (!(this_present_orderIndex && that_present_orderIndex))
        return false;
      if (this.orderIndex != that.orderIndex)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ContractRegisterRule other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegisterPriority()).compareTo(other.isSetRegisterPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisterPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerPriority, other.registerPriority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveShowCount()).compareTo(other.isSetActiveShowCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveShowCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeShowCount, other.activeShowCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInactiveShowCount()).compareTo(other.isSetInactiveShowCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInactiveShowCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inactiveShowCount, other.inactiveShowCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatformEnv()).compareTo(other.isSetPlatformEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformEnv, other.platformEnv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModityTimestamp()).compareTo(other.isSetLastModityTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModityTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModityTimestamp, other.lastModityTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderIndex()).compareTo(other.isSetOrderIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderIndex, other.orderIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ContractRegisterRule(");
    boolean first = true;

    if (isSetSledCommodityId()) {
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetRegisterPriority()) {
      if (!first) sb.append(", ");
      sb.append("registerPriority:");
      sb.append(this.registerPriority);
      first = false;
    }
    if (isSetActiveShowCount()) {
      if (!first) sb.append(", ");
      sb.append("activeShowCount:");
      sb.append(this.activeShowCount);
      first = false;
    }
    if (isSetInactiveShowCount()) {
      if (!first) sb.append(", ");
      sb.append("inactiveShowCount:");
      sb.append(this.inactiveShowCount);
      first = false;
    }
    if (isSetPlatformEnv()) {
      if (!first) sb.append(", ");
      sb.append("platformEnv:");
      if (this.platformEnv == null) {
        sb.append("null");
      } else {
        sb.append(this.platformEnv);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModityTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModityTimestamp:");
      sb.append(this.lastModityTimestamp);
      first = false;
    }
    if (isSetOrderIndex()) {
      if (!first) sb.append(", ");
      sb.append("orderIndex:");
      sb.append(this.orderIndex);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContractRegisterRuleStandardSchemeFactory implements SchemeFactory {
    public ContractRegisterRuleStandardScheme getScheme() {
      return new ContractRegisterRuleStandardScheme();
    }
  }

  private static class ContractRegisterRuleStandardScheme extends StandardScheme<ContractRegisterRule> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContractRegisterRule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledCommodityId = iprot.readI32();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REGISTER_PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.registerPriority = iprot.readI32();
              struct.setRegisterPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTIVE_SHOW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activeShowCount = iprot.readI32();
              struct.setActiveShowCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INACTIVE_SHOW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.inactiveShowCount = iprot.readI32();
              struct.setInactiveShowCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PLATFORM_ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platformEnv = QuotationPlatformEnv.findByValue(iprot.readI32());
              struct.setPlatformEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LAST_MODITY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModityTimestamp = iprot.readI64();
              struct.setLastModityTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDER_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderIndex = iprot.readI32();
              struct.setOrderIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContractRegisterRule struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI32(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRegisterPriority()) {
        oprot.writeFieldBegin(REGISTER_PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.registerPriority);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActiveShowCount()) {
        oprot.writeFieldBegin(ACTIVE_SHOW_COUNT_FIELD_DESC);
        oprot.writeI32(struct.activeShowCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInactiveShowCount()) {
        oprot.writeFieldBegin(INACTIVE_SHOW_COUNT_FIELD_DESC);
        oprot.writeI32(struct.inactiveShowCount);
        oprot.writeFieldEnd();
      }
      if (struct.platformEnv != null) {
        if (struct.isSetPlatformEnv()) {
          oprot.writeFieldBegin(PLATFORM_ENV_FIELD_DESC);
          oprot.writeI32(struct.platformEnv.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeFieldBegin(LAST_MODITY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModityTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderIndex()) {
        oprot.writeFieldBegin(ORDER_INDEX_FIELD_DESC);
        oprot.writeI32(struct.orderIndex);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContractRegisterRuleTupleSchemeFactory implements SchemeFactory {
    public ContractRegisterRuleTupleScheme getScheme() {
      return new ContractRegisterRuleTupleScheme();
    }
  }

  private static class ContractRegisterRuleTupleScheme extends TupleScheme<ContractRegisterRule> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContractRegisterRule struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledCommodityId()) {
        optionals.set(0);
      }
      if (struct.isSetRegisterPriority()) {
        optionals.set(1);
      }
      if (struct.isSetActiveShowCount()) {
        optionals.set(2);
      }
      if (struct.isSetInactiveShowCount()) {
        optionals.set(3);
      }
      if (struct.isSetPlatformEnv()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(5);
      }
      if (struct.isSetLastModityTimestamp()) {
        optionals.set(6);
      }
      if (struct.isSetOrderIndex()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetSledCommodityId()) {
        oprot.writeI32(struct.sledCommodityId);
      }
      if (struct.isSetRegisterPriority()) {
        oprot.writeI32(struct.registerPriority);
      }
      if (struct.isSetActiveShowCount()) {
        oprot.writeI32(struct.activeShowCount);
      }
      if (struct.isSetInactiveShowCount()) {
        oprot.writeI32(struct.inactiveShowCount);
      }
      if (struct.isSetPlatformEnv()) {
        oprot.writeI32(struct.platformEnv.getValue());
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeI64(struct.lastModityTimestamp);
      }
      if (struct.isSetOrderIndex()) {
        oprot.writeI32(struct.orderIndex);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContractRegisterRule struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.sledCommodityId = iprot.readI32();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.registerPriority = iprot.readI32();
        struct.setRegisterPriorityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.activeShowCount = iprot.readI32();
        struct.setActiveShowCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.inactiveShowCount = iprot.readI32();
        struct.setInactiveShowCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.platformEnv = QuotationPlatformEnv.findByValue(iprot.readI32());
        struct.setPlatformEnvIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastModityTimestamp = iprot.readI64();
        struct.setLastModityTimestampIsSet(true);
      }
      if (incoming.get(7)) {
        struct.orderIndex = iprot.readI32();
        struct.setOrderIndexIsSet(true);
      }
    }
  }

}

