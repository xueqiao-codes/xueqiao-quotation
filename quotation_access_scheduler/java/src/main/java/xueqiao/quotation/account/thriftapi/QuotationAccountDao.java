/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.quotation.account.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QuotationAccountDao {

  /**
   * 管理行情账号与合约订阅规则dao
   */
  public interface Iface {

    /**
     * 查询活跃合约规律
     * 
     * @param platformArgs
     * @param option
     * @param pageOption
     */
    public xueqiao.quotation.account.thriftapi.ContractActiveRulePage reqContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqContractActiveRuleOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 查询合约订阅规则
     * 
     * @param platformArgs
     * @param option
     * @param pageOption
     */
    public xueqiao.quotation.account.thriftapi.ContractRegisterRulePage reqContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqContractRegisterRuleOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 查询行情账号
     * 
     * @param platformArgs
     * @param option
     * @param pageOption
     */
    public xueqiao.quotation.account.thriftapi.QuotationAccountPage reqQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqQuotationAccountOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 添加活跃合约规律
     * 
     * @param platformArgs
     * @param rule
     */
    public void addContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractActiveRule rule) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 添加订阅合约规则
     * 
     * @param platformArgs
     * @param rule
     */
    public void addContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractRegisterRule rule) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 添加行情账号信息
     * 
     * @param platformArgs
     * @param account
     */
    public long addQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.QuotationAccount account) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 修改活跃合约规律
     * 
     * @param platformArgs
     * @param rule
     */
    public void updateContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractActiveRule rule) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 修改订阅合约规则
     * 
     * @param platformArgs
     * @param rule
     */
    public void updateContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractRegisterRule rule) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 修改行情账号信息
     * 
     * @param platformArgs
     * @param account
     */
    public void updateQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.QuotationAccount account) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 删除活跃合约规律
     * 
     * @param platformArgs
     * @param sledCommodityId
     */
    public void removeContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 删除订阅合约规则
     * 
     * @param platformArgs
     * @param sledCommodityId
     * @param platformEnv
     */
    public void removeContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId, xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 删除行情账号信息
     * 
     * @param platformArgs
     * @param accountId
     */
    public void removeQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long accountId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 查询行情账号的订阅能力信息
     * 
     * @param platformArgs
     * @param option
     * @param pageOption
     */
    public xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage reqAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqAccountCommodityRegisterAbilityOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    public void addAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility ability) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    public void removeAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long supportAbilityId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    public void batAddAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility> abilities) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    public void removeAccountCommodityRegisterAbilities(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long accountId, int sledExchangeId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 查询行情账号支持订阅的情况
     * 
     * @param platformArgs
     * @param option
     * @param pageOption
     */
    public xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage reqQuotationAccountSupport(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqQuotationAccountSupportOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 设置订阅商品排序
     * 
     * @param platformArgs
     * @param sledCommodityId
     * @param platformEnv
     * @param orderIndex
     */
    public void setCommodityRegisterOrderIndex(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId, xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv, int orderIndex) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void reqContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqContractActiveRuleOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqContractRegisterRuleOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqQuotationAccountOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractActiveRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractRegisterRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.QuotationAccount account, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractActiveRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractRegisterRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.QuotationAccount account, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId, xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long accountId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqAccountCommodityRegisterAbilityOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility ability, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long supportAbilityId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batAddAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility> abilities, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeAccountCommodityRegisterAbilities(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long accountId, int sledExchangeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQuotationAccountSupport(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqQuotationAccountSupportOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setCommodityRegisterOrderIndex(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId, xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv, int orderIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public xueqiao.quotation.account.thriftapi.ContractActiveRulePage reqContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqContractActiveRuleOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_reqContractActiveRule(platformArgs, option, pageOption);
      return recv_reqContractActiveRule();
    }

    public void send_reqContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqContractActiveRuleOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.apache.thrift.TException
    {
      reqContractActiveRule_args args = new reqContractActiveRule_args();
      args.setPlatformArgs(platformArgs);
      args.setOption(option);
      args.setPageOption(pageOption);
      sendBase("reqContractActiveRule", args);
    }

    public xueqiao.quotation.account.thriftapi.ContractActiveRulePage recv_reqContractActiveRule() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      reqContractActiveRule_result result = new reqContractActiveRule_result();
      receiveBase(result, "reqContractActiveRule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqContractActiveRule failed: unknown result");
    }

    public xueqiao.quotation.account.thriftapi.ContractRegisterRulePage reqContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqContractRegisterRuleOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_reqContractRegisterRule(platformArgs, option, pageOption);
      return recv_reqContractRegisterRule();
    }

    public void send_reqContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqContractRegisterRuleOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.apache.thrift.TException
    {
      reqContractRegisterRule_args args = new reqContractRegisterRule_args();
      args.setPlatformArgs(platformArgs);
      args.setOption(option);
      args.setPageOption(pageOption);
      sendBase("reqContractRegisterRule", args);
    }

    public xueqiao.quotation.account.thriftapi.ContractRegisterRulePage recv_reqContractRegisterRule() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      reqContractRegisterRule_result result = new reqContractRegisterRule_result();
      receiveBase(result, "reqContractRegisterRule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqContractRegisterRule failed: unknown result");
    }

    public xueqiao.quotation.account.thriftapi.QuotationAccountPage reqQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqQuotationAccountOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_reqQuotationAccount(platformArgs, option, pageOption);
      return recv_reqQuotationAccount();
    }

    public void send_reqQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqQuotationAccountOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.apache.thrift.TException
    {
      reqQuotationAccount_args args = new reqQuotationAccount_args();
      args.setPlatformArgs(platformArgs);
      args.setOption(option);
      args.setPageOption(pageOption);
      sendBase("reqQuotationAccount", args);
    }

    public xueqiao.quotation.account.thriftapi.QuotationAccountPage recv_reqQuotationAccount() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      reqQuotationAccount_result result = new reqQuotationAccount_result();
      receiveBase(result, "reqQuotationAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQuotationAccount failed: unknown result");
    }

    public void addContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractActiveRule rule) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_addContractActiveRule(platformArgs, rule);
      recv_addContractActiveRule();
    }

    public void send_addContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractActiveRule rule) throws org.apache.thrift.TException
    {
      addContractActiveRule_args args = new addContractActiveRule_args();
      args.setPlatformArgs(platformArgs);
      args.setRule(rule);
      sendBase("addContractActiveRule", args);
    }

    public void recv_addContractActiveRule() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      addContractActiveRule_result result = new addContractActiveRule_result();
      receiveBase(result, "addContractActiveRule");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void addContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractRegisterRule rule) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_addContractRegisterRule(platformArgs, rule);
      recv_addContractRegisterRule();
    }

    public void send_addContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractRegisterRule rule) throws org.apache.thrift.TException
    {
      addContractRegisterRule_args args = new addContractRegisterRule_args();
      args.setPlatformArgs(platformArgs);
      args.setRule(rule);
      sendBase("addContractRegisterRule", args);
    }

    public void recv_addContractRegisterRule() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      addContractRegisterRule_result result = new addContractRegisterRule_result();
      receiveBase(result, "addContractRegisterRule");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public long addQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.QuotationAccount account) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_addQuotationAccount(platformArgs, account);
      return recv_addQuotationAccount();
    }

    public void send_addQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.QuotationAccount account) throws org.apache.thrift.TException
    {
      addQuotationAccount_args args = new addQuotationAccount_args();
      args.setPlatformArgs(platformArgs);
      args.setAccount(account);
      sendBase("addQuotationAccount", args);
    }

    public long recv_addQuotationAccount() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      addQuotationAccount_result result = new addQuotationAccount_result();
      receiveBase(result, "addQuotationAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addQuotationAccount failed: unknown result");
    }

    public void updateContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractActiveRule rule) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_updateContractActiveRule(platformArgs, rule);
      recv_updateContractActiveRule();
    }

    public void send_updateContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractActiveRule rule) throws org.apache.thrift.TException
    {
      updateContractActiveRule_args args = new updateContractActiveRule_args();
      args.setPlatformArgs(platformArgs);
      args.setRule(rule);
      sendBase("updateContractActiveRule", args);
    }

    public void recv_updateContractActiveRule() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      updateContractActiveRule_result result = new updateContractActiveRule_result();
      receiveBase(result, "updateContractActiveRule");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void updateContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractRegisterRule rule) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_updateContractRegisterRule(platformArgs, rule);
      recv_updateContractRegisterRule();
    }

    public void send_updateContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractRegisterRule rule) throws org.apache.thrift.TException
    {
      updateContractRegisterRule_args args = new updateContractRegisterRule_args();
      args.setPlatformArgs(platformArgs);
      args.setRule(rule);
      sendBase("updateContractRegisterRule", args);
    }

    public void recv_updateContractRegisterRule() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      updateContractRegisterRule_result result = new updateContractRegisterRule_result();
      receiveBase(result, "updateContractRegisterRule");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void updateQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.QuotationAccount account) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_updateQuotationAccount(platformArgs, account);
      recv_updateQuotationAccount();
    }

    public void send_updateQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.QuotationAccount account) throws org.apache.thrift.TException
    {
      updateQuotationAccount_args args = new updateQuotationAccount_args();
      args.setPlatformArgs(platformArgs);
      args.setAccount(account);
      sendBase("updateQuotationAccount", args);
    }

    public void recv_updateQuotationAccount() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      updateQuotationAccount_result result = new updateQuotationAccount_result();
      receiveBase(result, "updateQuotationAccount");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void removeContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_removeContractActiveRule(platformArgs, sledCommodityId);
      recv_removeContractActiveRule();
    }

    public void send_removeContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId) throws org.apache.thrift.TException
    {
      removeContractActiveRule_args args = new removeContractActiveRule_args();
      args.setPlatformArgs(platformArgs);
      args.setSledCommodityId(sledCommodityId);
      sendBase("removeContractActiveRule", args);
    }

    public void recv_removeContractActiveRule() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      removeContractActiveRule_result result = new removeContractActiveRule_result();
      receiveBase(result, "removeContractActiveRule");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void removeContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId, xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_removeContractRegisterRule(platformArgs, sledCommodityId, platformEnv);
      recv_removeContractRegisterRule();
    }

    public void send_removeContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId, xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv) throws org.apache.thrift.TException
    {
      removeContractRegisterRule_args args = new removeContractRegisterRule_args();
      args.setPlatformArgs(platformArgs);
      args.setSledCommodityId(sledCommodityId);
      args.setPlatformEnv(platformEnv);
      sendBase("removeContractRegisterRule", args);
    }

    public void recv_removeContractRegisterRule() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      removeContractRegisterRule_result result = new removeContractRegisterRule_result();
      receiveBase(result, "removeContractRegisterRule");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void removeQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long accountId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_removeQuotationAccount(platformArgs, accountId);
      recv_removeQuotationAccount();
    }

    public void send_removeQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long accountId) throws org.apache.thrift.TException
    {
      removeQuotationAccount_args args = new removeQuotationAccount_args();
      args.setPlatformArgs(platformArgs);
      args.setAccountId(accountId);
      sendBase("removeQuotationAccount", args);
    }

    public void recv_removeQuotationAccount() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      removeQuotationAccount_result result = new removeQuotationAccount_result();
      receiveBase(result, "removeQuotationAccount");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage reqAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqAccountCommodityRegisterAbilityOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_reqAccountCommodityRegisterAbility(platformArgs, option, pageOption);
      return recv_reqAccountCommodityRegisterAbility();
    }

    public void send_reqAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqAccountCommodityRegisterAbilityOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.apache.thrift.TException
    {
      reqAccountCommodityRegisterAbility_args args = new reqAccountCommodityRegisterAbility_args();
      args.setPlatformArgs(platformArgs);
      args.setOption(option);
      args.setPageOption(pageOption);
      sendBase("reqAccountCommodityRegisterAbility", args);
    }

    public xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage recv_reqAccountCommodityRegisterAbility() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      reqAccountCommodityRegisterAbility_result result = new reqAccountCommodityRegisterAbility_result();
      receiveBase(result, "reqAccountCommodityRegisterAbility");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqAccountCommodityRegisterAbility failed: unknown result");
    }

    public void addAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility ability) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_addAccountCommodityRegisterAbility(platformArgs, ability);
      recv_addAccountCommodityRegisterAbility();
    }

    public void send_addAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility ability) throws org.apache.thrift.TException
    {
      addAccountCommodityRegisterAbility_args args = new addAccountCommodityRegisterAbility_args();
      args.setPlatformArgs(platformArgs);
      args.setAbility(ability);
      sendBase("addAccountCommodityRegisterAbility", args);
    }

    public void recv_addAccountCommodityRegisterAbility() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      addAccountCommodityRegisterAbility_result result = new addAccountCommodityRegisterAbility_result();
      receiveBase(result, "addAccountCommodityRegisterAbility");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void removeAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long supportAbilityId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_removeAccountCommodityRegisterAbility(platformArgs, supportAbilityId);
      recv_removeAccountCommodityRegisterAbility();
    }

    public void send_removeAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long supportAbilityId) throws org.apache.thrift.TException
    {
      removeAccountCommodityRegisterAbility_args args = new removeAccountCommodityRegisterAbility_args();
      args.setPlatformArgs(platformArgs);
      args.setSupportAbilityId(supportAbilityId);
      sendBase("removeAccountCommodityRegisterAbility", args);
    }

    public void recv_removeAccountCommodityRegisterAbility() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      removeAccountCommodityRegisterAbility_result result = new removeAccountCommodityRegisterAbility_result();
      receiveBase(result, "removeAccountCommodityRegisterAbility");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void batAddAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility> abilities) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_batAddAccountCommodityRegisterAbility(platformArgs, abilities);
      recv_batAddAccountCommodityRegisterAbility();
    }

    public void send_batAddAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility> abilities) throws org.apache.thrift.TException
    {
      batAddAccountCommodityRegisterAbility_args args = new batAddAccountCommodityRegisterAbility_args();
      args.setPlatformArgs(platformArgs);
      args.setAbilities(abilities);
      sendBase("batAddAccountCommodityRegisterAbility", args);
    }

    public void recv_batAddAccountCommodityRegisterAbility() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      batAddAccountCommodityRegisterAbility_result result = new batAddAccountCommodityRegisterAbility_result();
      receiveBase(result, "batAddAccountCommodityRegisterAbility");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void removeAccountCommodityRegisterAbilities(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long accountId, int sledExchangeId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_removeAccountCommodityRegisterAbilities(platformArgs, accountId, sledExchangeId);
      recv_removeAccountCommodityRegisterAbilities();
    }

    public void send_removeAccountCommodityRegisterAbilities(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long accountId, int sledExchangeId) throws org.apache.thrift.TException
    {
      removeAccountCommodityRegisterAbilities_args args = new removeAccountCommodityRegisterAbilities_args();
      args.setPlatformArgs(platformArgs);
      args.setAccountId(accountId);
      args.setSledExchangeId(sledExchangeId);
      sendBase("removeAccountCommodityRegisterAbilities", args);
    }

    public void recv_removeAccountCommodityRegisterAbilities() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      removeAccountCommodityRegisterAbilities_result result = new removeAccountCommodityRegisterAbilities_result();
      receiveBase(result, "removeAccountCommodityRegisterAbilities");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage reqQuotationAccountSupport(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqQuotationAccountSupportOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_reqQuotationAccountSupport(platformArgs, option, pageOption);
      return recv_reqQuotationAccountSupport();
    }

    public void send_reqQuotationAccountSupport(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqQuotationAccountSupportOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.apache.thrift.TException
    {
      reqQuotationAccountSupport_args args = new reqQuotationAccountSupport_args();
      args.setPlatformArgs(platformArgs);
      args.setOption(option);
      args.setPageOption(pageOption);
      sendBase("reqQuotationAccountSupport", args);
    }

    public xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage recv_reqQuotationAccountSupport() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      reqQuotationAccountSupport_result result = new reqQuotationAccountSupport_result();
      receiveBase(result, "reqQuotationAccountSupport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQuotationAccountSupport failed: unknown result");
    }

    public void setCommodityRegisterOrderIndex(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId, xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv, int orderIndex) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_setCommodityRegisterOrderIndex(platformArgs, sledCommodityId, platformEnv, orderIndex);
      recv_setCommodityRegisterOrderIndex();
    }

    public void send_setCommodityRegisterOrderIndex(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId, xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv, int orderIndex) throws org.apache.thrift.TException
    {
      setCommodityRegisterOrderIndex_args args = new setCommodityRegisterOrderIndex_args();
      args.setPlatformArgs(platformArgs);
      args.setSledCommodityId(sledCommodityId);
      args.setPlatformEnv(platformEnv);
      args.setOrderIndex(orderIndex);
      sendBase("setCommodityRegisterOrderIndex", args);
    }

    public void recv_setCommodityRegisterOrderIndex() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      setCommodityRegisterOrderIndex_result result = new setCommodityRegisterOrderIndex_result();
      receiveBase(result, "setCommodityRegisterOrderIndex");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void reqContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqContractActiveRuleOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqContractActiveRule_call method_call = new reqContractActiveRule_call(platformArgs, option, pageOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqContractActiveRule_call extends org.apache.thrift.async.TAsyncMethodCall <reqContractActiveRule_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private xueqiao.quotation.account.thriftapi.ReqContractActiveRuleOption option;
      private org.soldier.platform.page.IndexedPageOption pageOption;
      public reqContractActiveRule_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqContractActiveRuleOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.option = option;
        this.pageOption = pageOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqContractActiveRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqContractActiveRule_args args = new reqContractActiveRule_args();
        args.setPlatformArgs(platformArgs);
        args.setOption(option);
        args.setPageOption(pageOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public xueqiao.quotation.account.thriftapi.ContractActiveRulePage getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqContractActiveRule();
      }
    }

    public void reqContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqContractRegisterRuleOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqContractRegisterRule_call method_call = new reqContractRegisterRule_call(platformArgs, option, pageOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqContractRegisterRule_call extends org.apache.thrift.async.TAsyncMethodCall <reqContractRegisterRule_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private xueqiao.quotation.account.thriftapi.ReqContractRegisterRuleOption option;
      private org.soldier.platform.page.IndexedPageOption pageOption;
      public reqContractRegisterRule_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqContractRegisterRuleOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.option = option;
        this.pageOption = pageOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqContractRegisterRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqContractRegisterRule_args args = new reqContractRegisterRule_args();
        args.setPlatformArgs(platformArgs);
        args.setOption(option);
        args.setPageOption(pageOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public xueqiao.quotation.account.thriftapi.ContractRegisterRulePage getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqContractRegisterRule();
      }
    }

    public void reqQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqQuotationAccountOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQuotationAccount_call method_call = new reqQuotationAccount_call(platformArgs, option, pageOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQuotationAccount_call extends org.apache.thrift.async.TAsyncMethodCall <reqQuotationAccount_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private xueqiao.quotation.account.thriftapi.ReqQuotationAccountOption option;
      private org.soldier.platform.page.IndexedPageOption pageOption;
      public reqQuotationAccount_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqQuotationAccountOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.option = option;
        this.pageOption = pageOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQuotationAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQuotationAccount_args args = new reqQuotationAccount_args();
        args.setPlatformArgs(platformArgs);
        args.setOption(option);
        args.setPageOption(pageOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public xueqiao.quotation.account.thriftapi.QuotationAccountPage getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQuotationAccount();
      }
    }

    public void addContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractActiveRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addContractActiveRule_call method_call = new addContractActiveRule_call(platformArgs, rule, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addContractActiveRule_call extends org.apache.thrift.async.TAsyncMethodCall <addContractActiveRule_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private xueqiao.quotation.account.thriftapi.ContractActiveRule rule;
      public addContractActiveRule_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractActiveRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.rule = rule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addContractActiveRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addContractActiveRule_args args = new addContractActiveRule_args();
        args.setPlatformArgs(platformArgs);
        args.setRule(rule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addContractActiveRule();
      }
    }

    public void addContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractRegisterRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addContractRegisterRule_call method_call = new addContractRegisterRule_call(platformArgs, rule, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addContractRegisterRule_call extends org.apache.thrift.async.TAsyncMethodCall <addContractRegisterRule_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private xueqiao.quotation.account.thriftapi.ContractRegisterRule rule;
      public addContractRegisterRule_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractRegisterRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.rule = rule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addContractRegisterRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addContractRegisterRule_args args = new addContractRegisterRule_args();
        args.setPlatformArgs(platformArgs);
        args.setRule(rule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addContractRegisterRule();
      }
    }

    public void addQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.QuotationAccount account, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addQuotationAccount_call method_call = new addQuotationAccount_call(platformArgs, account, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addQuotationAccount_call extends org.apache.thrift.async.TAsyncMethodCall <addQuotationAccount_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private xueqiao.quotation.account.thriftapi.QuotationAccount account;
      public addQuotationAccount_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.QuotationAccount account, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.account = account;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addQuotationAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addQuotationAccount_args args = new addQuotationAccount_args();
        args.setPlatformArgs(platformArgs);
        args.setAccount(account);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addQuotationAccount();
      }
    }

    public void updateContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractActiveRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateContractActiveRule_call method_call = new updateContractActiveRule_call(platformArgs, rule, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateContractActiveRule_call extends org.apache.thrift.async.TAsyncMethodCall <updateContractActiveRule_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private xueqiao.quotation.account.thriftapi.ContractActiveRule rule;
      public updateContractActiveRule_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractActiveRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.rule = rule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateContractActiveRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateContractActiveRule_args args = new updateContractActiveRule_args();
        args.setPlatformArgs(platformArgs);
        args.setRule(rule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateContractActiveRule();
      }
    }

    public void updateContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractRegisterRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateContractRegisterRule_call method_call = new updateContractRegisterRule_call(platformArgs, rule, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateContractRegisterRule_call extends org.apache.thrift.async.TAsyncMethodCall <updateContractRegisterRule_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private xueqiao.quotation.account.thriftapi.ContractRegisterRule rule;
      public updateContractRegisterRule_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ContractRegisterRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.rule = rule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateContractRegisterRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateContractRegisterRule_args args = new updateContractRegisterRule_args();
        args.setPlatformArgs(platformArgs);
        args.setRule(rule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateContractRegisterRule();
      }
    }

    public void updateQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.QuotationAccount account, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateQuotationAccount_call method_call = new updateQuotationAccount_call(platformArgs, account, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateQuotationAccount_call extends org.apache.thrift.async.TAsyncMethodCall <updateQuotationAccount_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private xueqiao.quotation.account.thriftapi.QuotationAccount account;
      public updateQuotationAccount_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.QuotationAccount account, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.account = account;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateQuotationAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateQuotationAccount_args args = new updateQuotationAccount_args();
        args.setPlatformArgs(platformArgs);
        args.setAccount(account);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateQuotationAccount();
      }
    }

    public void removeContractActiveRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeContractActiveRule_call method_call = new removeContractActiveRule_call(platformArgs, sledCommodityId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeContractActiveRule_call extends org.apache.thrift.async.TAsyncMethodCall <removeContractActiveRule_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private int sledCommodityId;
      public removeContractActiveRule_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.sledCommodityId = sledCommodityId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeContractActiveRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeContractActiveRule_args args = new removeContractActiveRule_args();
        args.setPlatformArgs(platformArgs);
        args.setSledCommodityId(sledCommodityId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeContractActiveRule();
      }
    }

    public void removeContractRegisterRule(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId, xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeContractRegisterRule_call method_call = new removeContractRegisterRule_call(platformArgs, sledCommodityId, platformEnv, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeContractRegisterRule_call extends org.apache.thrift.async.TAsyncMethodCall <removeContractRegisterRule_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private int sledCommodityId;
      private xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv;
      public removeContractRegisterRule_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId, xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.sledCommodityId = sledCommodityId;
        this.platformEnv = platformEnv;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeContractRegisterRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeContractRegisterRule_args args = new removeContractRegisterRule_args();
        args.setPlatformArgs(platformArgs);
        args.setSledCommodityId(sledCommodityId);
        args.setPlatformEnv(platformEnv);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeContractRegisterRule();
      }
    }

    public void removeQuotationAccount(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long accountId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeQuotationAccount_call method_call = new removeQuotationAccount_call(platformArgs, accountId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeQuotationAccount_call extends org.apache.thrift.async.TAsyncMethodCall <removeQuotationAccount_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private long accountId;
      public removeQuotationAccount_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long accountId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.accountId = accountId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeQuotationAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeQuotationAccount_args args = new removeQuotationAccount_args();
        args.setPlatformArgs(platformArgs);
        args.setAccountId(accountId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeQuotationAccount();
      }
    }

    public void reqAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqAccountCommodityRegisterAbilityOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqAccountCommodityRegisterAbility_call method_call = new reqAccountCommodityRegisterAbility_call(platformArgs, option, pageOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqAccountCommodityRegisterAbility_call extends org.apache.thrift.async.TAsyncMethodCall <reqAccountCommodityRegisterAbility_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private xueqiao.quotation.account.thriftapi.ReqAccountCommodityRegisterAbilityOption option;
      private org.soldier.platform.page.IndexedPageOption pageOption;
      public reqAccountCommodityRegisterAbility_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqAccountCommodityRegisterAbilityOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.option = option;
        this.pageOption = pageOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqAccountCommodityRegisterAbility", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqAccountCommodityRegisterAbility_args args = new reqAccountCommodityRegisterAbility_args();
        args.setPlatformArgs(platformArgs);
        args.setOption(option);
        args.setPageOption(pageOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqAccountCommodityRegisterAbility();
      }
    }

    public void addAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility ability, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addAccountCommodityRegisterAbility_call method_call = new addAccountCommodityRegisterAbility_call(platformArgs, ability, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addAccountCommodityRegisterAbility_call extends org.apache.thrift.async.TAsyncMethodCall <addAccountCommodityRegisterAbility_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility ability;
      public addAccountCommodityRegisterAbility_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility ability, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.ability = ability;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAccountCommodityRegisterAbility", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addAccountCommodityRegisterAbility_args args = new addAccountCommodityRegisterAbility_args();
        args.setPlatformArgs(platformArgs);
        args.setAbility(ability);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addAccountCommodityRegisterAbility();
      }
    }

    public void removeAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long supportAbilityId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeAccountCommodityRegisterAbility_call method_call = new removeAccountCommodityRegisterAbility_call(platformArgs, supportAbilityId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeAccountCommodityRegisterAbility_call extends org.apache.thrift.async.TAsyncMethodCall <removeAccountCommodityRegisterAbility_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private long supportAbilityId;
      public removeAccountCommodityRegisterAbility_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long supportAbilityId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.supportAbilityId = supportAbilityId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeAccountCommodityRegisterAbility", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeAccountCommodityRegisterAbility_args args = new removeAccountCommodityRegisterAbility_args();
        args.setPlatformArgs(platformArgs);
        args.setSupportAbilityId(supportAbilityId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeAccountCommodityRegisterAbility();
      }
    }

    public void batAddAccountCommodityRegisterAbility(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility> abilities, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batAddAccountCommodityRegisterAbility_call method_call = new batAddAccountCommodityRegisterAbility_call(platformArgs, abilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batAddAccountCommodityRegisterAbility_call extends org.apache.thrift.async.TAsyncMethodCall <batAddAccountCommodityRegisterAbility_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private List<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility> abilities;
      public batAddAccountCommodityRegisterAbility_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility> abilities, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.abilities = abilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batAddAccountCommodityRegisterAbility", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batAddAccountCommodityRegisterAbility_args args = new batAddAccountCommodityRegisterAbility_args();
        args.setPlatformArgs(platformArgs);
        args.setAbilities(abilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_batAddAccountCommodityRegisterAbility();
      }
    }

    public void removeAccountCommodityRegisterAbilities(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long accountId, int sledExchangeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeAccountCommodityRegisterAbilities_call method_call = new removeAccountCommodityRegisterAbilities_call(platformArgs, accountId, sledExchangeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeAccountCommodityRegisterAbilities_call extends org.apache.thrift.async.TAsyncMethodCall <removeAccountCommodityRegisterAbilities_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private long accountId;
      private int sledExchangeId;
      public removeAccountCommodityRegisterAbilities_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long accountId, int sledExchangeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.accountId = accountId;
        this.sledExchangeId = sledExchangeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeAccountCommodityRegisterAbilities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeAccountCommodityRegisterAbilities_args args = new removeAccountCommodityRegisterAbilities_args();
        args.setPlatformArgs(platformArgs);
        args.setAccountId(accountId);
        args.setSledExchangeId(sledExchangeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeAccountCommodityRegisterAbilities();
      }
    }

    public void reqQuotationAccountSupport(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqQuotationAccountSupportOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQuotationAccountSupport_call method_call = new reqQuotationAccountSupport_call(platformArgs, option, pageOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQuotationAccountSupport_call extends org.apache.thrift.async.TAsyncMethodCall <reqQuotationAccountSupport_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private xueqiao.quotation.account.thriftapi.ReqQuotationAccountSupportOption option;
      private org.soldier.platform.page.IndexedPageOption pageOption;
      public reqQuotationAccountSupport_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, xueqiao.quotation.account.thriftapi.ReqQuotationAccountSupportOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.option = option;
        this.pageOption = pageOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQuotationAccountSupport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQuotationAccountSupport_args args = new reqQuotationAccountSupport_args();
        args.setPlatformArgs(platformArgs);
        args.setOption(option);
        args.setPageOption(pageOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQuotationAccountSupport();
      }
    }

    public void setCommodityRegisterOrderIndex(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId, xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv, int orderIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setCommodityRegisterOrderIndex_call method_call = new setCommodityRegisterOrderIndex_call(platformArgs, sledCommodityId, platformEnv, orderIndex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setCommodityRegisterOrderIndex_call extends org.apache.thrift.async.TAsyncMethodCall <setCommodityRegisterOrderIndex_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private int sledCommodityId;
      private xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv;
      private int orderIndex;
      public setCommodityRegisterOrderIndex_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, int sledCommodityId, xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv, int orderIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.sledCommodityId = sledCommodityId;
        this.platformEnv = platformEnv;
        this.orderIndex = orderIndex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setCommodityRegisterOrderIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setCommodityRegisterOrderIndex_args args = new setCommodityRegisterOrderIndex_args();
        args.setPlatformArgs(platformArgs);
        args.setSledCommodityId(sledCommodityId);
        args.setPlatformEnv(platformEnv);
        args.setOrderIndex(orderIndex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setCommodityRegisterOrderIndex();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("reqContractActiveRule", new reqContractActiveRule());
      processMap.put("reqContractRegisterRule", new reqContractRegisterRule());
      processMap.put("reqQuotationAccount", new reqQuotationAccount());
      processMap.put("addContractActiveRule", new addContractActiveRule());
      processMap.put("addContractRegisterRule", new addContractRegisterRule());
      processMap.put("addQuotationAccount", new addQuotationAccount());
      processMap.put("updateContractActiveRule", new updateContractActiveRule());
      processMap.put("updateContractRegisterRule", new updateContractRegisterRule());
      processMap.put("updateQuotationAccount", new updateQuotationAccount());
      processMap.put("removeContractActiveRule", new removeContractActiveRule());
      processMap.put("removeContractRegisterRule", new removeContractRegisterRule());
      processMap.put("removeQuotationAccount", new removeQuotationAccount());
      processMap.put("reqAccountCommodityRegisterAbility", new reqAccountCommodityRegisterAbility());
      processMap.put("addAccountCommodityRegisterAbility", new addAccountCommodityRegisterAbility());
      processMap.put("removeAccountCommodityRegisterAbility", new removeAccountCommodityRegisterAbility());
      processMap.put("batAddAccountCommodityRegisterAbility", new batAddAccountCommodityRegisterAbility());
      processMap.put("removeAccountCommodityRegisterAbilities", new removeAccountCommodityRegisterAbilities());
      processMap.put("reqQuotationAccountSupport", new reqQuotationAccountSupport());
      processMap.put("setCommodityRegisterOrderIndex", new setCommodityRegisterOrderIndex());
      return processMap;
    }

    public static class reqContractActiveRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqContractActiveRule_args> {
      public reqContractActiveRule() {
        super("reqContractActiveRule");
      }

      public reqContractActiveRule_args getEmptyArgsInstance() {
        return new reqContractActiveRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqContractActiveRule_result getResult(I iface, reqContractActiveRule_args args) throws org.apache.thrift.TException {
        reqContractActiveRule_result result = new reqContractActiveRule_result();
        try {
          result.success = iface.reqContractActiveRule(args.platformArgs, args.option, args.pageOption);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class reqContractRegisterRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqContractRegisterRule_args> {
      public reqContractRegisterRule() {
        super("reqContractRegisterRule");
      }

      public reqContractRegisterRule_args getEmptyArgsInstance() {
        return new reqContractRegisterRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqContractRegisterRule_result getResult(I iface, reqContractRegisterRule_args args) throws org.apache.thrift.TException {
        reqContractRegisterRule_result result = new reqContractRegisterRule_result();
        try {
          result.success = iface.reqContractRegisterRule(args.platformArgs, args.option, args.pageOption);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class reqQuotationAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQuotationAccount_args> {
      public reqQuotationAccount() {
        super("reqQuotationAccount");
      }

      public reqQuotationAccount_args getEmptyArgsInstance() {
        return new reqQuotationAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQuotationAccount_result getResult(I iface, reqQuotationAccount_args args) throws org.apache.thrift.TException {
        reqQuotationAccount_result result = new reqQuotationAccount_result();
        try {
          result.success = iface.reqQuotationAccount(args.platformArgs, args.option, args.pageOption);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class addContractActiveRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addContractActiveRule_args> {
      public addContractActiveRule() {
        super("addContractActiveRule");
      }

      public addContractActiveRule_args getEmptyArgsInstance() {
        return new addContractActiveRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addContractActiveRule_result getResult(I iface, addContractActiveRule_args args) throws org.apache.thrift.TException {
        addContractActiveRule_result result = new addContractActiveRule_result();
        try {
          iface.addContractActiveRule(args.platformArgs, args.rule);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class addContractRegisterRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addContractRegisterRule_args> {
      public addContractRegisterRule() {
        super("addContractRegisterRule");
      }

      public addContractRegisterRule_args getEmptyArgsInstance() {
        return new addContractRegisterRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addContractRegisterRule_result getResult(I iface, addContractRegisterRule_args args) throws org.apache.thrift.TException {
        addContractRegisterRule_result result = new addContractRegisterRule_result();
        try {
          iface.addContractRegisterRule(args.platformArgs, args.rule);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class addQuotationAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addQuotationAccount_args> {
      public addQuotationAccount() {
        super("addQuotationAccount");
      }

      public addQuotationAccount_args getEmptyArgsInstance() {
        return new addQuotationAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addQuotationAccount_result getResult(I iface, addQuotationAccount_args args) throws org.apache.thrift.TException {
        addQuotationAccount_result result = new addQuotationAccount_result();
        try {
          result.success = iface.addQuotationAccount(args.platformArgs, args.account);
          result.setSuccessIsSet(true);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class updateContractActiveRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateContractActiveRule_args> {
      public updateContractActiveRule() {
        super("updateContractActiveRule");
      }

      public updateContractActiveRule_args getEmptyArgsInstance() {
        return new updateContractActiveRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateContractActiveRule_result getResult(I iface, updateContractActiveRule_args args) throws org.apache.thrift.TException {
        updateContractActiveRule_result result = new updateContractActiveRule_result();
        try {
          iface.updateContractActiveRule(args.platformArgs, args.rule);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class updateContractRegisterRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateContractRegisterRule_args> {
      public updateContractRegisterRule() {
        super("updateContractRegisterRule");
      }

      public updateContractRegisterRule_args getEmptyArgsInstance() {
        return new updateContractRegisterRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateContractRegisterRule_result getResult(I iface, updateContractRegisterRule_args args) throws org.apache.thrift.TException {
        updateContractRegisterRule_result result = new updateContractRegisterRule_result();
        try {
          iface.updateContractRegisterRule(args.platformArgs, args.rule);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class updateQuotationAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateQuotationAccount_args> {
      public updateQuotationAccount() {
        super("updateQuotationAccount");
      }

      public updateQuotationAccount_args getEmptyArgsInstance() {
        return new updateQuotationAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateQuotationAccount_result getResult(I iface, updateQuotationAccount_args args) throws org.apache.thrift.TException {
        updateQuotationAccount_result result = new updateQuotationAccount_result();
        try {
          iface.updateQuotationAccount(args.platformArgs, args.account);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class removeContractActiveRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeContractActiveRule_args> {
      public removeContractActiveRule() {
        super("removeContractActiveRule");
      }

      public removeContractActiveRule_args getEmptyArgsInstance() {
        return new removeContractActiveRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeContractActiveRule_result getResult(I iface, removeContractActiveRule_args args) throws org.apache.thrift.TException {
        removeContractActiveRule_result result = new removeContractActiveRule_result();
        try {
          iface.removeContractActiveRule(args.platformArgs, args.sledCommodityId);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class removeContractRegisterRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeContractRegisterRule_args> {
      public removeContractRegisterRule() {
        super("removeContractRegisterRule");
      }

      public removeContractRegisterRule_args getEmptyArgsInstance() {
        return new removeContractRegisterRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeContractRegisterRule_result getResult(I iface, removeContractRegisterRule_args args) throws org.apache.thrift.TException {
        removeContractRegisterRule_result result = new removeContractRegisterRule_result();
        try {
          iface.removeContractRegisterRule(args.platformArgs, args.sledCommodityId, args.platformEnv);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class removeQuotationAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeQuotationAccount_args> {
      public removeQuotationAccount() {
        super("removeQuotationAccount");
      }

      public removeQuotationAccount_args getEmptyArgsInstance() {
        return new removeQuotationAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeQuotationAccount_result getResult(I iface, removeQuotationAccount_args args) throws org.apache.thrift.TException {
        removeQuotationAccount_result result = new removeQuotationAccount_result();
        try {
          iface.removeQuotationAccount(args.platformArgs, args.accountId);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class reqAccountCommodityRegisterAbility<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqAccountCommodityRegisterAbility_args> {
      public reqAccountCommodityRegisterAbility() {
        super("reqAccountCommodityRegisterAbility");
      }

      public reqAccountCommodityRegisterAbility_args getEmptyArgsInstance() {
        return new reqAccountCommodityRegisterAbility_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqAccountCommodityRegisterAbility_result getResult(I iface, reqAccountCommodityRegisterAbility_args args) throws org.apache.thrift.TException {
        reqAccountCommodityRegisterAbility_result result = new reqAccountCommodityRegisterAbility_result();
        try {
          result.success = iface.reqAccountCommodityRegisterAbility(args.platformArgs, args.option, args.pageOption);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class addAccountCommodityRegisterAbility<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAccountCommodityRegisterAbility_args> {
      public addAccountCommodityRegisterAbility() {
        super("addAccountCommodityRegisterAbility");
      }

      public addAccountCommodityRegisterAbility_args getEmptyArgsInstance() {
        return new addAccountCommodityRegisterAbility_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addAccountCommodityRegisterAbility_result getResult(I iface, addAccountCommodityRegisterAbility_args args) throws org.apache.thrift.TException {
        addAccountCommodityRegisterAbility_result result = new addAccountCommodityRegisterAbility_result();
        try {
          iface.addAccountCommodityRegisterAbility(args.platformArgs, args.ability);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class removeAccountCommodityRegisterAbility<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeAccountCommodityRegisterAbility_args> {
      public removeAccountCommodityRegisterAbility() {
        super("removeAccountCommodityRegisterAbility");
      }

      public removeAccountCommodityRegisterAbility_args getEmptyArgsInstance() {
        return new removeAccountCommodityRegisterAbility_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeAccountCommodityRegisterAbility_result getResult(I iface, removeAccountCommodityRegisterAbility_args args) throws org.apache.thrift.TException {
        removeAccountCommodityRegisterAbility_result result = new removeAccountCommodityRegisterAbility_result();
        try {
          iface.removeAccountCommodityRegisterAbility(args.platformArgs, args.supportAbilityId);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class batAddAccountCommodityRegisterAbility<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batAddAccountCommodityRegisterAbility_args> {
      public batAddAccountCommodityRegisterAbility() {
        super("batAddAccountCommodityRegisterAbility");
      }

      public batAddAccountCommodityRegisterAbility_args getEmptyArgsInstance() {
        return new batAddAccountCommodityRegisterAbility_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batAddAccountCommodityRegisterAbility_result getResult(I iface, batAddAccountCommodityRegisterAbility_args args) throws org.apache.thrift.TException {
        batAddAccountCommodityRegisterAbility_result result = new batAddAccountCommodityRegisterAbility_result();
        try {
          iface.batAddAccountCommodityRegisterAbility(args.platformArgs, args.abilities);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class removeAccountCommodityRegisterAbilities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeAccountCommodityRegisterAbilities_args> {
      public removeAccountCommodityRegisterAbilities() {
        super("removeAccountCommodityRegisterAbilities");
      }

      public removeAccountCommodityRegisterAbilities_args getEmptyArgsInstance() {
        return new removeAccountCommodityRegisterAbilities_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeAccountCommodityRegisterAbilities_result getResult(I iface, removeAccountCommodityRegisterAbilities_args args) throws org.apache.thrift.TException {
        removeAccountCommodityRegisterAbilities_result result = new removeAccountCommodityRegisterAbilities_result();
        try {
          iface.removeAccountCommodityRegisterAbilities(args.platformArgs, args.accountId, args.sledExchangeId);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class reqQuotationAccountSupport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQuotationAccountSupport_args> {
      public reqQuotationAccountSupport() {
        super("reqQuotationAccountSupport");
      }

      public reqQuotationAccountSupport_args getEmptyArgsInstance() {
        return new reqQuotationAccountSupport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQuotationAccountSupport_result getResult(I iface, reqQuotationAccountSupport_args args) throws org.apache.thrift.TException {
        reqQuotationAccountSupport_result result = new reqQuotationAccountSupport_result();
        try {
          result.success = iface.reqQuotationAccountSupport(args.platformArgs, args.option, args.pageOption);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class setCommodityRegisterOrderIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setCommodityRegisterOrderIndex_args> {
      public setCommodityRegisterOrderIndex() {
        super("setCommodityRegisterOrderIndex");
      }

      public setCommodityRegisterOrderIndex_args getEmptyArgsInstance() {
        return new setCommodityRegisterOrderIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setCommodityRegisterOrderIndex_result getResult(I iface, setCommodityRegisterOrderIndex_args args) throws org.apache.thrift.TException {
        setCommodityRegisterOrderIndex_result result = new setCommodityRegisterOrderIndex_result();
        try {
          iface.setCommodityRegisterOrderIndex(args.platformArgs, args.sledCommodityId, args.platformEnv, args.orderIndex);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("reqContractActiveRule", new reqContractActiveRule());
      processMap.put("reqContractRegisterRule", new reqContractRegisterRule());
      processMap.put("reqQuotationAccount", new reqQuotationAccount());
      processMap.put("addContractActiveRule", new addContractActiveRule());
      processMap.put("addContractRegisterRule", new addContractRegisterRule());
      processMap.put("addQuotationAccount", new addQuotationAccount());
      processMap.put("updateContractActiveRule", new updateContractActiveRule());
      processMap.put("updateContractRegisterRule", new updateContractRegisterRule());
      processMap.put("updateQuotationAccount", new updateQuotationAccount());
      processMap.put("removeContractActiveRule", new removeContractActiveRule());
      processMap.put("removeContractRegisterRule", new removeContractRegisterRule());
      processMap.put("removeQuotationAccount", new removeQuotationAccount());
      processMap.put("reqAccountCommodityRegisterAbility", new reqAccountCommodityRegisterAbility());
      processMap.put("addAccountCommodityRegisterAbility", new addAccountCommodityRegisterAbility());
      processMap.put("removeAccountCommodityRegisterAbility", new removeAccountCommodityRegisterAbility());
      processMap.put("batAddAccountCommodityRegisterAbility", new batAddAccountCommodityRegisterAbility());
      processMap.put("removeAccountCommodityRegisterAbilities", new removeAccountCommodityRegisterAbilities());
      processMap.put("reqQuotationAccountSupport", new reqQuotationAccountSupport());
      processMap.put("setCommodityRegisterOrderIndex", new setCommodityRegisterOrderIndex());
      return processMap;
    }

    public static class reqContractActiveRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqContractActiveRule_args, xueqiao.quotation.account.thriftapi.ContractActiveRulePage> {
      public reqContractActiveRule() {
        super("reqContractActiveRule");
      }

      public reqContractActiveRule_args getEmptyArgsInstance() {
        return new reqContractActiveRule_args();
      }

      public AsyncMethodCallback<xueqiao.quotation.account.thriftapi.ContractActiveRulePage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<xueqiao.quotation.account.thriftapi.ContractActiveRulePage>() { 
          public void onComplete(xueqiao.quotation.account.thriftapi.ContractActiveRulePage o) {
            reqContractActiveRule_result result = new reqContractActiveRule_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqContractActiveRule_result result = new reqContractActiveRule_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqContractActiveRule_args args, org.apache.thrift.async.AsyncMethodCallback<xueqiao.quotation.account.thriftapi.ContractActiveRulePage> resultHandler) throws TException {
        iface.reqContractActiveRule(args.platformArgs, args.option, args.pageOption,resultHandler);
      }
    }

    public static class reqContractRegisterRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqContractRegisterRule_args, xueqiao.quotation.account.thriftapi.ContractRegisterRulePage> {
      public reqContractRegisterRule() {
        super("reqContractRegisterRule");
      }

      public reqContractRegisterRule_args getEmptyArgsInstance() {
        return new reqContractRegisterRule_args();
      }

      public AsyncMethodCallback<xueqiao.quotation.account.thriftapi.ContractRegisterRulePage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<xueqiao.quotation.account.thriftapi.ContractRegisterRulePage>() { 
          public void onComplete(xueqiao.quotation.account.thriftapi.ContractRegisterRulePage o) {
            reqContractRegisterRule_result result = new reqContractRegisterRule_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqContractRegisterRule_result result = new reqContractRegisterRule_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqContractRegisterRule_args args, org.apache.thrift.async.AsyncMethodCallback<xueqiao.quotation.account.thriftapi.ContractRegisterRulePage> resultHandler) throws TException {
        iface.reqContractRegisterRule(args.platformArgs, args.option, args.pageOption,resultHandler);
      }
    }

    public static class reqQuotationAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQuotationAccount_args, xueqiao.quotation.account.thriftapi.QuotationAccountPage> {
      public reqQuotationAccount() {
        super("reqQuotationAccount");
      }

      public reqQuotationAccount_args getEmptyArgsInstance() {
        return new reqQuotationAccount_args();
      }

      public AsyncMethodCallback<xueqiao.quotation.account.thriftapi.QuotationAccountPage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<xueqiao.quotation.account.thriftapi.QuotationAccountPage>() { 
          public void onComplete(xueqiao.quotation.account.thriftapi.QuotationAccountPage o) {
            reqQuotationAccount_result result = new reqQuotationAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQuotationAccount_result result = new reqQuotationAccount_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQuotationAccount_args args, org.apache.thrift.async.AsyncMethodCallback<xueqiao.quotation.account.thriftapi.QuotationAccountPage> resultHandler) throws TException {
        iface.reqQuotationAccount(args.platformArgs, args.option, args.pageOption,resultHandler);
      }
    }

    public static class addContractActiveRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addContractActiveRule_args, Void> {
      public addContractActiveRule() {
        super("addContractActiveRule");
      }

      public addContractActiveRule_args getEmptyArgsInstance() {
        return new addContractActiveRule_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addContractActiveRule_result result = new addContractActiveRule_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addContractActiveRule_result result = new addContractActiveRule_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addContractActiveRule_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addContractActiveRule(args.platformArgs, args.rule,resultHandler);
      }
    }

    public static class addContractRegisterRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addContractRegisterRule_args, Void> {
      public addContractRegisterRule() {
        super("addContractRegisterRule");
      }

      public addContractRegisterRule_args getEmptyArgsInstance() {
        return new addContractRegisterRule_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addContractRegisterRule_result result = new addContractRegisterRule_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addContractRegisterRule_result result = new addContractRegisterRule_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addContractRegisterRule_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addContractRegisterRule(args.platformArgs, args.rule,resultHandler);
      }
    }

    public static class addQuotationAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addQuotationAccount_args, Long> {
      public addQuotationAccount() {
        super("addQuotationAccount");
      }

      public addQuotationAccount_args getEmptyArgsInstance() {
        return new addQuotationAccount_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            addQuotationAccount_result result = new addQuotationAccount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addQuotationAccount_result result = new addQuotationAccount_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addQuotationAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.addQuotationAccount(args.platformArgs, args.account,resultHandler);
      }
    }

    public static class updateContractActiveRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateContractActiveRule_args, Void> {
      public updateContractActiveRule() {
        super("updateContractActiveRule");
      }

      public updateContractActiveRule_args getEmptyArgsInstance() {
        return new updateContractActiveRule_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateContractActiveRule_result result = new updateContractActiveRule_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateContractActiveRule_result result = new updateContractActiveRule_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateContractActiveRule_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateContractActiveRule(args.platformArgs, args.rule,resultHandler);
      }
    }

    public static class updateContractRegisterRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateContractRegisterRule_args, Void> {
      public updateContractRegisterRule() {
        super("updateContractRegisterRule");
      }

      public updateContractRegisterRule_args getEmptyArgsInstance() {
        return new updateContractRegisterRule_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateContractRegisterRule_result result = new updateContractRegisterRule_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateContractRegisterRule_result result = new updateContractRegisterRule_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateContractRegisterRule_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateContractRegisterRule(args.platformArgs, args.rule,resultHandler);
      }
    }

    public static class updateQuotationAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateQuotationAccount_args, Void> {
      public updateQuotationAccount() {
        super("updateQuotationAccount");
      }

      public updateQuotationAccount_args getEmptyArgsInstance() {
        return new updateQuotationAccount_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateQuotationAccount_result result = new updateQuotationAccount_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateQuotationAccount_result result = new updateQuotationAccount_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateQuotationAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateQuotationAccount(args.platformArgs, args.account,resultHandler);
      }
    }

    public static class removeContractActiveRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeContractActiveRule_args, Void> {
      public removeContractActiveRule() {
        super("removeContractActiveRule");
      }

      public removeContractActiveRule_args getEmptyArgsInstance() {
        return new removeContractActiveRule_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeContractActiveRule_result result = new removeContractActiveRule_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeContractActiveRule_result result = new removeContractActiveRule_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeContractActiveRule_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeContractActiveRule(args.platformArgs, args.sledCommodityId,resultHandler);
      }
    }

    public static class removeContractRegisterRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeContractRegisterRule_args, Void> {
      public removeContractRegisterRule() {
        super("removeContractRegisterRule");
      }

      public removeContractRegisterRule_args getEmptyArgsInstance() {
        return new removeContractRegisterRule_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeContractRegisterRule_result result = new removeContractRegisterRule_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeContractRegisterRule_result result = new removeContractRegisterRule_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeContractRegisterRule_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeContractRegisterRule(args.platformArgs, args.sledCommodityId, args.platformEnv,resultHandler);
      }
    }

    public static class removeQuotationAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeQuotationAccount_args, Void> {
      public removeQuotationAccount() {
        super("removeQuotationAccount");
      }

      public removeQuotationAccount_args getEmptyArgsInstance() {
        return new removeQuotationAccount_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeQuotationAccount_result result = new removeQuotationAccount_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeQuotationAccount_result result = new removeQuotationAccount_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeQuotationAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeQuotationAccount(args.platformArgs, args.accountId,resultHandler);
      }
    }

    public static class reqAccountCommodityRegisterAbility<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqAccountCommodityRegisterAbility_args, xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage> {
      public reqAccountCommodityRegisterAbility() {
        super("reqAccountCommodityRegisterAbility");
      }

      public reqAccountCommodityRegisterAbility_args getEmptyArgsInstance() {
        return new reqAccountCommodityRegisterAbility_args();
      }

      public AsyncMethodCallback<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage>() { 
          public void onComplete(xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage o) {
            reqAccountCommodityRegisterAbility_result result = new reqAccountCommodityRegisterAbility_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqAccountCommodityRegisterAbility_result result = new reqAccountCommodityRegisterAbility_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqAccountCommodityRegisterAbility_args args, org.apache.thrift.async.AsyncMethodCallback<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage> resultHandler) throws TException {
        iface.reqAccountCommodityRegisterAbility(args.platformArgs, args.option, args.pageOption,resultHandler);
      }
    }

    public static class addAccountCommodityRegisterAbility<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addAccountCommodityRegisterAbility_args, Void> {
      public addAccountCommodityRegisterAbility() {
        super("addAccountCommodityRegisterAbility");
      }

      public addAccountCommodityRegisterAbility_args getEmptyArgsInstance() {
        return new addAccountCommodityRegisterAbility_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addAccountCommodityRegisterAbility_result result = new addAccountCommodityRegisterAbility_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addAccountCommodityRegisterAbility_result result = new addAccountCommodityRegisterAbility_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addAccountCommodityRegisterAbility_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addAccountCommodityRegisterAbility(args.platformArgs, args.ability,resultHandler);
      }
    }

    public static class removeAccountCommodityRegisterAbility<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeAccountCommodityRegisterAbility_args, Void> {
      public removeAccountCommodityRegisterAbility() {
        super("removeAccountCommodityRegisterAbility");
      }

      public removeAccountCommodityRegisterAbility_args getEmptyArgsInstance() {
        return new removeAccountCommodityRegisterAbility_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeAccountCommodityRegisterAbility_result result = new removeAccountCommodityRegisterAbility_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeAccountCommodityRegisterAbility_result result = new removeAccountCommodityRegisterAbility_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeAccountCommodityRegisterAbility_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeAccountCommodityRegisterAbility(args.platformArgs, args.supportAbilityId,resultHandler);
      }
    }

    public static class batAddAccountCommodityRegisterAbility<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batAddAccountCommodityRegisterAbility_args, Void> {
      public batAddAccountCommodityRegisterAbility() {
        super("batAddAccountCommodityRegisterAbility");
      }

      public batAddAccountCommodityRegisterAbility_args getEmptyArgsInstance() {
        return new batAddAccountCommodityRegisterAbility_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            batAddAccountCommodityRegisterAbility_result result = new batAddAccountCommodityRegisterAbility_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batAddAccountCommodityRegisterAbility_result result = new batAddAccountCommodityRegisterAbility_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batAddAccountCommodityRegisterAbility_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.batAddAccountCommodityRegisterAbility(args.platformArgs, args.abilities,resultHandler);
      }
    }

    public static class removeAccountCommodityRegisterAbilities<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeAccountCommodityRegisterAbilities_args, Void> {
      public removeAccountCommodityRegisterAbilities() {
        super("removeAccountCommodityRegisterAbilities");
      }

      public removeAccountCommodityRegisterAbilities_args getEmptyArgsInstance() {
        return new removeAccountCommodityRegisterAbilities_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeAccountCommodityRegisterAbilities_result result = new removeAccountCommodityRegisterAbilities_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeAccountCommodityRegisterAbilities_result result = new removeAccountCommodityRegisterAbilities_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeAccountCommodityRegisterAbilities_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeAccountCommodityRegisterAbilities(args.platformArgs, args.accountId, args.sledExchangeId,resultHandler);
      }
    }

    public static class reqQuotationAccountSupport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQuotationAccountSupport_args, xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage> {
      public reqQuotationAccountSupport() {
        super("reqQuotationAccountSupport");
      }

      public reqQuotationAccountSupport_args getEmptyArgsInstance() {
        return new reqQuotationAccountSupport_args();
      }

      public AsyncMethodCallback<xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage>() { 
          public void onComplete(xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage o) {
            reqQuotationAccountSupport_result result = new reqQuotationAccountSupport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQuotationAccountSupport_result result = new reqQuotationAccountSupport_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQuotationAccountSupport_args args, org.apache.thrift.async.AsyncMethodCallback<xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage> resultHandler) throws TException {
        iface.reqQuotationAccountSupport(args.platformArgs, args.option, args.pageOption,resultHandler);
      }
    }

    public static class setCommodityRegisterOrderIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setCommodityRegisterOrderIndex_args, Void> {
      public setCommodityRegisterOrderIndex() {
        super("setCommodityRegisterOrderIndex");
      }

      public setCommodityRegisterOrderIndex_args getEmptyArgsInstance() {
        return new setCommodityRegisterOrderIndex_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setCommodityRegisterOrderIndex_result result = new setCommodityRegisterOrderIndex_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setCommodityRegisterOrderIndex_result result = new setCommodityRegisterOrderIndex_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setCommodityRegisterOrderIndex_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setCommodityRegisterOrderIndex(args.platformArgs, args.sledCommodityId, args.platformEnv, args.orderIndex,resultHandler);
      }
    }

  }

  public static class reqContractActiveRule_args implements org.apache.thrift.TBase<reqContractActiveRule_args, reqContractActiveRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqContractActiveRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqContractActiveRule_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pageOption", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqContractActiveRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqContractActiveRule_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public xueqiao.quotation.account.thriftapi.ReqContractActiveRuleOption option; // required
    public org.soldier.platform.page.IndexedPageOption pageOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      OPTION((short)2, "option"),
      PAGE_OPTION((short)3, "pageOption");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // OPTION
            return OPTION;
          case 3: // PAGE_OPTION
            return PAGE_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.ReqContractActiveRuleOption.class)));
      tmpMap.put(_Fields.PAGE_OPTION, new org.apache.thrift.meta_data.FieldMetaData("pageOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.page.IndexedPageOption.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqContractActiveRule_args.class, metaDataMap);
    }

    public reqContractActiveRule_args() {
    }

    public reqContractActiveRule_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      xueqiao.quotation.account.thriftapi.ReqContractActiveRuleOption option,
      org.soldier.platform.page.IndexedPageOption pageOption)
    {
      this();
      this.platformArgs = platformArgs;
      this.option = option;
      this.pageOption = pageOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqContractActiveRule_args(reqContractActiveRule_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetOption()) {
        this.option = new xueqiao.quotation.account.thriftapi.ReqContractActiveRuleOption(other.option);
      }
      if (other.isSetPageOption()) {
        this.pageOption = new org.soldier.platform.page.IndexedPageOption(other.pageOption);
      }
    }

    public reqContractActiveRule_args deepCopy() {
      return new reqContractActiveRule_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.option = null;
      this.pageOption = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public reqContractActiveRule_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public xueqiao.quotation.account.thriftapi.ReqContractActiveRuleOption getOption() {
      return this.option;
    }

    public reqContractActiveRule_args setOption(xueqiao.quotation.account.thriftapi.ReqContractActiveRuleOption option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public org.soldier.platform.page.IndexedPageOption getPageOption() {
      return this.pageOption;
    }

    public reqContractActiveRule_args setPageOption(org.soldier.platform.page.IndexedPageOption pageOption) {
      this.pageOption = pageOption;
      return this;
    }

    public void unsetPageOption() {
      this.pageOption = null;
    }

    /** Returns true if field pageOption is set (has been assigned a value) and false otherwise */
    public boolean isSetPageOption() {
      return this.pageOption != null;
    }

    public void setPageOptionIsSet(boolean value) {
      if (!value) {
        this.pageOption = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((xueqiao.quotation.account.thriftapi.ReqContractActiveRuleOption)value);
        }
        break;

      case PAGE_OPTION:
        if (value == null) {
          unsetPageOption();
        } else {
          setPageOption((org.soldier.platform.page.IndexedPageOption)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case OPTION:
        return getOption();

      case PAGE_OPTION:
        return getPageOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case OPTION:
        return isSetOption();
      case PAGE_OPTION:
        return isSetPageOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqContractActiveRule_args)
        return this.equals((reqContractActiveRule_args)that);
      return false;
    }

    public boolean equals(reqContractActiveRule_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      boolean this_present_pageOption = true && this.isSetPageOption();
      boolean that_present_pageOption = true && that.isSetPageOption();
      if (this_present_pageOption || that_present_pageOption) {
        if (!(this_present_pageOption && that_present_pageOption))
          return false;
        if (!this.pageOption.equals(that.pageOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqContractActiveRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageOption()).compareTo(other.isSetPageOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageOption, other.pageOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqContractActiveRule_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageOption:");
      if (this.pageOption == null) {
        sb.append("null");
      } else {
        sb.append(this.pageOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (option != null) {
        option.validate();
      }
      if (pageOption != null) {
        pageOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqContractActiveRule_argsStandardSchemeFactory implements SchemeFactory {
      public reqContractActiveRule_argsStandardScheme getScheme() {
        return new reqContractActiveRule_argsStandardScheme();
      }
    }

    private static class reqContractActiveRule_argsStandardScheme extends StandardScheme<reqContractActiveRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqContractActiveRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.option = new xueqiao.quotation.account.thriftapi.ReqContractActiveRuleOption();
                struct.option.read(iprot);
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
                struct.pageOption.read(iprot);
                struct.setPageOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqContractActiveRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          struct.option.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageOption != null) {
          oprot.writeFieldBegin(PAGE_OPTION_FIELD_DESC);
          struct.pageOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqContractActiveRule_argsTupleSchemeFactory implements SchemeFactory {
      public reqContractActiveRule_argsTupleScheme getScheme() {
        return new reqContractActiveRule_argsTupleScheme();
      }
    }

    private static class reqContractActiveRule_argsTupleScheme extends TupleScheme<reqContractActiveRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqContractActiveRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetOption()) {
          optionals.set(1);
        }
        if (struct.isSetPageOption()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetOption()) {
          struct.option.write(oprot);
        }
        if (struct.isSetPageOption()) {
          struct.pageOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqContractActiveRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.option = new xueqiao.quotation.account.thriftapi.ReqContractActiveRuleOption();
          struct.option.read(iprot);
          struct.setOptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
          struct.pageOption.read(iprot);
          struct.setPageOptionIsSet(true);
        }
      }
    }

  }

  public static class reqContractActiveRule_result implements org.apache.thrift.TBase<reqContractActiveRule_result, reqContractActiveRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqContractActiveRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqContractActiveRule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqContractActiveRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqContractActiveRule_resultTupleSchemeFactory());
    }

    public xueqiao.quotation.account.thriftapi.ContractActiveRulePage success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.ContractActiveRulePage.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqContractActiveRule_result.class, metaDataMap);
    }

    public reqContractActiveRule_result() {
    }

    public reqContractActiveRule_result(
      xueqiao.quotation.account.thriftapi.ContractActiveRulePage success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqContractActiveRule_result(reqContractActiveRule_result other) {
      if (other.isSetSuccess()) {
        this.success = new xueqiao.quotation.account.thriftapi.ContractActiveRulePage(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public reqContractActiveRule_result deepCopy() {
      return new reqContractActiveRule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public xueqiao.quotation.account.thriftapi.ContractActiveRulePage getSuccess() {
      return this.success;
    }

    public reqContractActiveRule_result setSuccess(xueqiao.quotation.account.thriftapi.ContractActiveRulePage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public reqContractActiveRule_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((xueqiao.quotation.account.thriftapi.ContractActiveRulePage)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqContractActiveRule_result)
        return this.equals((reqContractActiveRule_result)that);
      return false;
    }

    public boolean equals(reqContractActiveRule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqContractActiveRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqContractActiveRule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqContractActiveRule_resultStandardSchemeFactory implements SchemeFactory {
      public reqContractActiveRule_resultStandardScheme getScheme() {
        return new reqContractActiveRule_resultStandardScheme();
      }
    }

    private static class reqContractActiveRule_resultStandardScheme extends StandardScheme<reqContractActiveRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqContractActiveRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new xueqiao.quotation.account.thriftapi.ContractActiveRulePage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqContractActiveRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqContractActiveRule_resultTupleSchemeFactory implements SchemeFactory {
      public reqContractActiveRule_resultTupleScheme getScheme() {
        return new reqContractActiveRule_resultTupleScheme();
      }
    }

    private static class reqContractActiveRule_resultTupleScheme extends TupleScheme<reqContractActiveRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqContractActiveRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqContractActiveRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new xueqiao.quotation.account.thriftapi.ContractActiveRulePage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class reqContractRegisterRule_args implements org.apache.thrift.TBase<reqContractRegisterRule_args, reqContractRegisterRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqContractRegisterRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqContractRegisterRule_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pageOption", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqContractRegisterRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqContractRegisterRule_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public xueqiao.quotation.account.thriftapi.ReqContractRegisterRuleOption option; // required
    public org.soldier.platform.page.IndexedPageOption pageOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      OPTION((short)2, "option"),
      PAGE_OPTION((short)3, "pageOption");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // OPTION
            return OPTION;
          case 3: // PAGE_OPTION
            return PAGE_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.ReqContractRegisterRuleOption.class)));
      tmpMap.put(_Fields.PAGE_OPTION, new org.apache.thrift.meta_data.FieldMetaData("pageOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.page.IndexedPageOption.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqContractRegisterRule_args.class, metaDataMap);
    }

    public reqContractRegisterRule_args() {
    }

    public reqContractRegisterRule_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      xueqiao.quotation.account.thriftapi.ReqContractRegisterRuleOption option,
      org.soldier.platform.page.IndexedPageOption pageOption)
    {
      this();
      this.platformArgs = platformArgs;
      this.option = option;
      this.pageOption = pageOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqContractRegisterRule_args(reqContractRegisterRule_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetOption()) {
        this.option = new xueqiao.quotation.account.thriftapi.ReqContractRegisterRuleOption(other.option);
      }
      if (other.isSetPageOption()) {
        this.pageOption = new org.soldier.platform.page.IndexedPageOption(other.pageOption);
      }
    }

    public reqContractRegisterRule_args deepCopy() {
      return new reqContractRegisterRule_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.option = null;
      this.pageOption = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public reqContractRegisterRule_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public xueqiao.quotation.account.thriftapi.ReqContractRegisterRuleOption getOption() {
      return this.option;
    }

    public reqContractRegisterRule_args setOption(xueqiao.quotation.account.thriftapi.ReqContractRegisterRuleOption option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public org.soldier.platform.page.IndexedPageOption getPageOption() {
      return this.pageOption;
    }

    public reqContractRegisterRule_args setPageOption(org.soldier.platform.page.IndexedPageOption pageOption) {
      this.pageOption = pageOption;
      return this;
    }

    public void unsetPageOption() {
      this.pageOption = null;
    }

    /** Returns true if field pageOption is set (has been assigned a value) and false otherwise */
    public boolean isSetPageOption() {
      return this.pageOption != null;
    }

    public void setPageOptionIsSet(boolean value) {
      if (!value) {
        this.pageOption = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((xueqiao.quotation.account.thriftapi.ReqContractRegisterRuleOption)value);
        }
        break;

      case PAGE_OPTION:
        if (value == null) {
          unsetPageOption();
        } else {
          setPageOption((org.soldier.platform.page.IndexedPageOption)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case OPTION:
        return getOption();

      case PAGE_OPTION:
        return getPageOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case OPTION:
        return isSetOption();
      case PAGE_OPTION:
        return isSetPageOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqContractRegisterRule_args)
        return this.equals((reqContractRegisterRule_args)that);
      return false;
    }

    public boolean equals(reqContractRegisterRule_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      boolean this_present_pageOption = true && this.isSetPageOption();
      boolean that_present_pageOption = true && that.isSetPageOption();
      if (this_present_pageOption || that_present_pageOption) {
        if (!(this_present_pageOption && that_present_pageOption))
          return false;
        if (!this.pageOption.equals(that.pageOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqContractRegisterRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageOption()).compareTo(other.isSetPageOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageOption, other.pageOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqContractRegisterRule_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageOption:");
      if (this.pageOption == null) {
        sb.append("null");
      } else {
        sb.append(this.pageOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (option != null) {
        option.validate();
      }
      if (pageOption != null) {
        pageOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqContractRegisterRule_argsStandardSchemeFactory implements SchemeFactory {
      public reqContractRegisterRule_argsStandardScheme getScheme() {
        return new reqContractRegisterRule_argsStandardScheme();
      }
    }

    private static class reqContractRegisterRule_argsStandardScheme extends StandardScheme<reqContractRegisterRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqContractRegisterRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.option = new xueqiao.quotation.account.thriftapi.ReqContractRegisterRuleOption();
                struct.option.read(iprot);
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
                struct.pageOption.read(iprot);
                struct.setPageOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqContractRegisterRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          struct.option.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageOption != null) {
          oprot.writeFieldBegin(PAGE_OPTION_FIELD_DESC);
          struct.pageOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqContractRegisterRule_argsTupleSchemeFactory implements SchemeFactory {
      public reqContractRegisterRule_argsTupleScheme getScheme() {
        return new reqContractRegisterRule_argsTupleScheme();
      }
    }

    private static class reqContractRegisterRule_argsTupleScheme extends TupleScheme<reqContractRegisterRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqContractRegisterRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetOption()) {
          optionals.set(1);
        }
        if (struct.isSetPageOption()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetOption()) {
          struct.option.write(oprot);
        }
        if (struct.isSetPageOption()) {
          struct.pageOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqContractRegisterRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.option = new xueqiao.quotation.account.thriftapi.ReqContractRegisterRuleOption();
          struct.option.read(iprot);
          struct.setOptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
          struct.pageOption.read(iprot);
          struct.setPageOptionIsSet(true);
        }
      }
    }

  }

  public static class reqContractRegisterRule_result implements org.apache.thrift.TBase<reqContractRegisterRule_result, reqContractRegisterRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqContractRegisterRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqContractRegisterRule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqContractRegisterRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqContractRegisterRule_resultTupleSchemeFactory());
    }

    public xueqiao.quotation.account.thriftapi.ContractRegisterRulePage success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.ContractRegisterRulePage.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqContractRegisterRule_result.class, metaDataMap);
    }

    public reqContractRegisterRule_result() {
    }

    public reqContractRegisterRule_result(
      xueqiao.quotation.account.thriftapi.ContractRegisterRulePage success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqContractRegisterRule_result(reqContractRegisterRule_result other) {
      if (other.isSetSuccess()) {
        this.success = new xueqiao.quotation.account.thriftapi.ContractRegisterRulePage(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public reqContractRegisterRule_result deepCopy() {
      return new reqContractRegisterRule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public xueqiao.quotation.account.thriftapi.ContractRegisterRulePage getSuccess() {
      return this.success;
    }

    public reqContractRegisterRule_result setSuccess(xueqiao.quotation.account.thriftapi.ContractRegisterRulePage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public reqContractRegisterRule_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((xueqiao.quotation.account.thriftapi.ContractRegisterRulePage)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqContractRegisterRule_result)
        return this.equals((reqContractRegisterRule_result)that);
      return false;
    }

    public boolean equals(reqContractRegisterRule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqContractRegisterRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqContractRegisterRule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqContractRegisterRule_resultStandardSchemeFactory implements SchemeFactory {
      public reqContractRegisterRule_resultStandardScheme getScheme() {
        return new reqContractRegisterRule_resultStandardScheme();
      }
    }

    private static class reqContractRegisterRule_resultStandardScheme extends StandardScheme<reqContractRegisterRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqContractRegisterRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new xueqiao.quotation.account.thriftapi.ContractRegisterRulePage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqContractRegisterRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqContractRegisterRule_resultTupleSchemeFactory implements SchemeFactory {
      public reqContractRegisterRule_resultTupleScheme getScheme() {
        return new reqContractRegisterRule_resultTupleScheme();
      }
    }

    private static class reqContractRegisterRule_resultTupleScheme extends TupleScheme<reqContractRegisterRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqContractRegisterRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqContractRegisterRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new xueqiao.quotation.account.thriftapi.ContractRegisterRulePage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class reqQuotationAccount_args implements org.apache.thrift.TBase<reqQuotationAccount_args, reqQuotationAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQuotationAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQuotationAccount_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pageOption", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQuotationAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQuotationAccount_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public xueqiao.quotation.account.thriftapi.ReqQuotationAccountOption option; // required
    public org.soldier.platform.page.IndexedPageOption pageOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      OPTION((short)2, "option"),
      PAGE_OPTION((short)3, "pageOption");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // OPTION
            return OPTION;
          case 3: // PAGE_OPTION
            return PAGE_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.ReqQuotationAccountOption.class)));
      tmpMap.put(_Fields.PAGE_OPTION, new org.apache.thrift.meta_data.FieldMetaData("pageOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.page.IndexedPageOption.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQuotationAccount_args.class, metaDataMap);
    }

    public reqQuotationAccount_args() {
    }

    public reqQuotationAccount_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      xueqiao.quotation.account.thriftapi.ReqQuotationAccountOption option,
      org.soldier.platform.page.IndexedPageOption pageOption)
    {
      this();
      this.platformArgs = platformArgs;
      this.option = option;
      this.pageOption = pageOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQuotationAccount_args(reqQuotationAccount_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetOption()) {
        this.option = new xueqiao.quotation.account.thriftapi.ReqQuotationAccountOption(other.option);
      }
      if (other.isSetPageOption()) {
        this.pageOption = new org.soldier.platform.page.IndexedPageOption(other.pageOption);
      }
    }

    public reqQuotationAccount_args deepCopy() {
      return new reqQuotationAccount_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.option = null;
      this.pageOption = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public reqQuotationAccount_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public xueqiao.quotation.account.thriftapi.ReqQuotationAccountOption getOption() {
      return this.option;
    }

    public reqQuotationAccount_args setOption(xueqiao.quotation.account.thriftapi.ReqQuotationAccountOption option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public org.soldier.platform.page.IndexedPageOption getPageOption() {
      return this.pageOption;
    }

    public reqQuotationAccount_args setPageOption(org.soldier.platform.page.IndexedPageOption pageOption) {
      this.pageOption = pageOption;
      return this;
    }

    public void unsetPageOption() {
      this.pageOption = null;
    }

    /** Returns true if field pageOption is set (has been assigned a value) and false otherwise */
    public boolean isSetPageOption() {
      return this.pageOption != null;
    }

    public void setPageOptionIsSet(boolean value) {
      if (!value) {
        this.pageOption = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((xueqiao.quotation.account.thriftapi.ReqQuotationAccountOption)value);
        }
        break;

      case PAGE_OPTION:
        if (value == null) {
          unsetPageOption();
        } else {
          setPageOption((org.soldier.platform.page.IndexedPageOption)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case OPTION:
        return getOption();

      case PAGE_OPTION:
        return getPageOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case OPTION:
        return isSetOption();
      case PAGE_OPTION:
        return isSetPageOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQuotationAccount_args)
        return this.equals((reqQuotationAccount_args)that);
      return false;
    }

    public boolean equals(reqQuotationAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      boolean this_present_pageOption = true && this.isSetPageOption();
      boolean that_present_pageOption = true && that.isSetPageOption();
      if (this_present_pageOption || that_present_pageOption) {
        if (!(this_present_pageOption && that_present_pageOption))
          return false;
        if (!this.pageOption.equals(that.pageOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQuotationAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageOption()).compareTo(other.isSetPageOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageOption, other.pageOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQuotationAccount_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageOption:");
      if (this.pageOption == null) {
        sb.append("null");
      } else {
        sb.append(this.pageOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (option != null) {
        option.validate();
      }
      if (pageOption != null) {
        pageOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQuotationAccount_argsStandardSchemeFactory implements SchemeFactory {
      public reqQuotationAccount_argsStandardScheme getScheme() {
        return new reqQuotationAccount_argsStandardScheme();
      }
    }

    private static class reqQuotationAccount_argsStandardScheme extends StandardScheme<reqQuotationAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQuotationAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.option = new xueqiao.quotation.account.thriftapi.ReqQuotationAccountOption();
                struct.option.read(iprot);
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
                struct.pageOption.read(iprot);
                struct.setPageOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQuotationAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          struct.option.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageOption != null) {
          oprot.writeFieldBegin(PAGE_OPTION_FIELD_DESC);
          struct.pageOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQuotationAccount_argsTupleSchemeFactory implements SchemeFactory {
      public reqQuotationAccount_argsTupleScheme getScheme() {
        return new reqQuotationAccount_argsTupleScheme();
      }
    }

    private static class reqQuotationAccount_argsTupleScheme extends TupleScheme<reqQuotationAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQuotationAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetOption()) {
          optionals.set(1);
        }
        if (struct.isSetPageOption()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetOption()) {
          struct.option.write(oprot);
        }
        if (struct.isSetPageOption()) {
          struct.pageOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQuotationAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.option = new xueqiao.quotation.account.thriftapi.ReqQuotationAccountOption();
          struct.option.read(iprot);
          struct.setOptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
          struct.pageOption.read(iprot);
          struct.setPageOptionIsSet(true);
        }
      }
    }

  }

  public static class reqQuotationAccount_result implements org.apache.thrift.TBase<reqQuotationAccount_result, reqQuotationAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQuotationAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQuotationAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQuotationAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQuotationAccount_resultTupleSchemeFactory());
    }

    public xueqiao.quotation.account.thriftapi.QuotationAccountPage success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.QuotationAccountPage.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQuotationAccount_result.class, metaDataMap);
    }

    public reqQuotationAccount_result() {
    }

    public reqQuotationAccount_result(
      xueqiao.quotation.account.thriftapi.QuotationAccountPage success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQuotationAccount_result(reqQuotationAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new xueqiao.quotation.account.thriftapi.QuotationAccountPage(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public reqQuotationAccount_result deepCopy() {
      return new reqQuotationAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public xueqiao.quotation.account.thriftapi.QuotationAccountPage getSuccess() {
      return this.success;
    }

    public reqQuotationAccount_result setSuccess(xueqiao.quotation.account.thriftapi.QuotationAccountPage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public reqQuotationAccount_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((xueqiao.quotation.account.thriftapi.QuotationAccountPage)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQuotationAccount_result)
        return this.equals((reqQuotationAccount_result)that);
      return false;
    }

    public boolean equals(reqQuotationAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQuotationAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQuotationAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQuotationAccount_resultStandardSchemeFactory implements SchemeFactory {
      public reqQuotationAccount_resultStandardScheme getScheme() {
        return new reqQuotationAccount_resultStandardScheme();
      }
    }

    private static class reqQuotationAccount_resultStandardScheme extends StandardScheme<reqQuotationAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQuotationAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new xueqiao.quotation.account.thriftapi.QuotationAccountPage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQuotationAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQuotationAccount_resultTupleSchemeFactory implements SchemeFactory {
      public reqQuotationAccount_resultTupleScheme getScheme() {
        return new reqQuotationAccount_resultTupleScheme();
      }
    }

    private static class reqQuotationAccount_resultTupleScheme extends TupleScheme<reqQuotationAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQuotationAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQuotationAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new xueqiao.quotation.account.thriftapi.QuotationAccountPage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class addContractActiveRule_args implements org.apache.thrift.TBase<addContractActiveRule_args, addContractActiveRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<addContractActiveRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addContractActiveRule_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addContractActiveRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addContractActiveRule_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public xueqiao.quotation.account.thriftapi.ContractActiveRule rule; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      RULE((short)2, "rule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // RULE
            return RULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.ContractActiveRule.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addContractActiveRule_args.class, metaDataMap);
    }

    public addContractActiveRule_args() {
    }

    public addContractActiveRule_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      xueqiao.quotation.account.thriftapi.ContractActiveRule rule)
    {
      this();
      this.platformArgs = platformArgs;
      this.rule = rule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addContractActiveRule_args(addContractActiveRule_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetRule()) {
        this.rule = new xueqiao.quotation.account.thriftapi.ContractActiveRule(other.rule);
      }
    }

    public addContractActiveRule_args deepCopy() {
      return new addContractActiveRule_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.rule = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public addContractActiveRule_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public xueqiao.quotation.account.thriftapi.ContractActiveRule getRule() {
      return this.rule;
    }

    public addContractActiveRule_args setRule(xueqiao.quotation.account.thriftapi.ContractActiveRule rule) {
      this.rule = rule;
      return this;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((xueqiao.quotation.account.thriftapi.ContractActiveRule)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case RULE:
        return getRule();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case RULE:
        return isSetRule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addContractActiveRule_args)
        return this.equals((addContractActiveRule_args)that);
      return false;
    }

    public boolean equals(addContractActiveRule_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addContractActiveRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addContractActiveRule_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (rule != null) {
        rule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addContractActiveRule_argsStandardSchemeFactory implements SchemeFactory {
      public addContractActiveRule_argsStandardScheme getScheme() {
        return new addContractActiveRule_argsStandardScheme();
      }
    }

    private static class addContractActiveRule_argsStandardScheme extends StandardScheme<addContractActiveRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addContractActiveRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rule = new xueqiao.quotation.account.thriftapi.ContractActiveRule();
                struct.rule.read(iprot);
                struct.setRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addContractActiveRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rule != null) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          struct.rule.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addContractActiveRule_argsTupleSchemeFactory implements SchemeFactory {
      public addContractActiveRule_argsTupleScheme getScheme() {
        return new addContractActiveRule_argsTupleScheme();
      }
    }

    private static class addContractActiveRule_argsTupleScheme extends TupleScheme<addContractActiveRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addContractActiveRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetRule()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetRule()) {
          struct.rule.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addContractActiveRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rule = new xueqiao.quotation.account.thriftapi.ContractActiveRule();
          struct.rule.read(iprot);
          struct.setRuleIsSet(true);
        }
      }
    }

  }

  public static class addContractActiveRule_result implements org.apache.thrift.TBase<addContractActiveRule_result, addContractActiveRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<addContractActiveRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addContractActiveRule_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addContractActiveRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addContractActiveRule_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addContractActiveRule_result.class, metaDataMap);
    }

    public addContractActiveRule_result() {
    }

    public addContractActiveRule_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addContractActiveRule_result(addContractActiveRule_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public addContractActiveRule_result deepCopy() {
      return new addContractActiveRule_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public addContractActiveRule_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addContractActiveRule_result)
        return this.equals((addContractActiveRule_result)that);
      return false;
    }

    public boolean equals(addContractActiveRule_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addContractActiveRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addContractActiveRule_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addContractActiveRule_resultStandardSchemeFactory implements SchemeFactory {
      public addContractActiveRule_resultStandardScheme getScheme() {
        return new addContractActiveRule_resultStandardScheme();
      }
    }

    private static class addContractActiveRule_resultStandardScheme extends StandardScheme<addContractActiveRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addContractActiveRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addContractActiveRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addContractActiveRule_resultTupleSchemeFactory implements SchemeFactory {
      public addContractActiveRule_resultTupleScheme getScheme() {
        return new addContractActiveRule_resultTupleScheme();
      }
    }

    private static class addContractActiveRule_resultTupleScheme extends TupleScheme<addContractActiveRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addContractActiveRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addContractActiveRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class addContractRegisterRule_args implements org.apache.thrift.TBase<addContractRegisterRule_args, addContractRegisterRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<addContractRegisterRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addContractRegisterRule_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addContractRegisterRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addContractRegisterRule_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public xueqiao.quotation.account.thriftapi.ContractRegisterRule rule; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      RULE((short)2, "rule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // RULE
            return RULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.ContractRegisterRule.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addContractRegisterRule_args.class, metaDataMap);
    }

    public addContractRegisterRule_args() {
    }

    public addContractRegisterRule_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      xueqiao.quotation.account.thriftapi.ContractRegisterRule rule)
    {
      this();
      this.platformArgs = platformArgs;
      this.rule = rule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addContractRegisterRule_args(addContractRegisterRule_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetRule()) {
        this.rule = new xueqiao.quotation.account.thriftapi.ContractRegisterRule(other.rule);
      }
    }

    public addContractRegisterRule_args deepCopy() {
      return new addContractRegisterRule_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.rule = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public addContractRegisterRule_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public xueqiao.quotation.account.thriftapi.ContractRegisterRule getRule() {
      return this.rule;
    }

    public addContractRegisterRule_args setRule(xueqiao.quotation.account.thriftapi.ContractRegisterRule rule) {
      this.rule = rule;
      return this;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((xueqiao.quotation.account.thriftapi.ContractRegisterRule)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case RULE:
        return getRule();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case RULE:
        return isSetRule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addContractRegisterRule_args)
        return this.equals((addContractRegisterRule_args)that);
      return false;
    }

    public boolean equals(addContractRegisterRule_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addContractRegisterRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addContractRegisterRule_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (rule != null) {
        rule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addContractRegisterRule_argsStandardSchemeFactory implements SchemeFactory {
      public addContractRegisterRule_argsStandardScheme getScheme() {
        return new addContractRegisterRule_argsStandardScheme();
      }
    }

    private static class addContractRegisterRule_argsStandardScheme extends StandardScheme<addContractRegisterRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addContractRegisterRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rule = new xueqiao.quotation.account.thriftapi.ContractRegisterRule();
                struct.rule.read(iprot);
                struct.setRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addContractRegisterRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rule != null) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          struct.rule.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addContractRegisterRule_argsTupleSchemeFactory implements SchemeFactory {
      public addContractRegisterRule_argsTupleScheme getScheme() {
        return new addContractRegisterRule_argsTupleScheme();
      }
    }

    private static class addContractRegisterRule_argsTupleScheme extends TupleScheme<addContractRegisterRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addContractRegisterRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetRule()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetRule()) {
          struct.rule.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addContractRegisterRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rule = new xueqiao.quotation.account.thriftapi.ContractRegisterRule();
          struct.rule.read(iprot);
          struct.setRuleIsSet(true);
        }
      }
    }

  }

  public static class addContractRegisterRule_result implements org.apache.thrift.TBase<addContractRegisterRule_result, addContractRegisterRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<addContractRegisterRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addContractRegisterRule_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addContractRegisterRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addContractRegisterRule_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addContractRegisterRule_result.class, metaDataMap);
    }

    public addContractRegisterRule_result() {
    }

    public addContractRegisterRule_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addContractRegisterRule_result(addContractRegisterRule_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public addContractRegisterRule_result deepCopy() {
      return new addContractRegisterRule_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public addContractRegisterRule_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addContractRegisterRule_result)
        return this.equals((addContractRegisterRule_result)that);
      return false;
    }

    public boolean equals(addContractRegisterRule_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addContractRegisterRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addContractRegisterRule_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addContractRegisterRule_resultStandardSchemeFactory implements SchemeFactory {
      public addContractRegisterRule_resultStandardScheme getScheme() {
        return new addContractRegisterRule_resultStandardScheme();
      }
    }

    private static class addContractRegisterRule_resultStandardScheme extends StandardScheme<addContractRegisterRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addContractRegisterRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addContractRegisterRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addContractRegisterRule_resultTupleSchemeFactory implements SchemeFactory {
      public addContractRegisterRule_resultTupleScheme getScheme() {
        return new addContractRegisterRule_resultTupleScheme();
      }
    }

    private static class addContractRegisterRule_resultTupleScheme extends TupleScheme<addContractRegisterRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addContractRegisterRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addContractRegisterRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class addQuotationAccount_args implements org.apache.thrift.TBase<addQuotationAccount_args, addQuotationAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<addQuotationAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addQuotationAccount_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addQuotationAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addQuotationAccount_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public xueqiao.quotation.account.thriftapi.QuotationAccount account; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      ACCOUNT((short)2, "account");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // ACCOUNT
            return ACCOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.QuotationAccount.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addQuotationAccount_args.class, metaDataMap);
    }

    public addQuotationAccount_args() {
    }

    public addQuotationAccount_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      xueqiao.quotation.account.thriftapi.QuotationAccount account)
    {
      this();
      this.platformArgs = platformArgs;
      this.account = account;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addQuotationAccount_args(addQuotationAccount_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetAccount()) {
        this.account = new xueqiao.quotation.account.thriftapi.QuotationAccount(other.account);
      }
    }

    public addQuotationAccount_args deepCopy() {
      return new addQuotationAccount_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.account = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public addQuotationAccount_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public xueqiao.quotation.account.thriftapi.QuotationAccount getAccount() {
      return this.account;
    }

    public addQuotationAccount_args setAccount(xueqiao.quotation.account.thriftapi.QuotationAccount account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((xueqiao.quotation.account.thriftapi.QuotationAccount)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case ACCOUNT:
        return getAccount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case ACCOUNT:
        return isSetAccount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addQuotationAccount_args)
        return this.equals((addQuotationAccount_args)that);
      return false;
    }

    public boolean equals(addQuotationAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addQuotationAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(other.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addQuotationAccount_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (account != null) {
        account.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addQuotationAccount_argsStandardSchemeFactory implements SchemeFactory {
      public addQuotationAccount_argsStandardScheme getScheme() {
        return new addQuotationAccount_argsStandardScheme();
      }
    }

    private static class addQuotationAccount_argsStandardScheme extends StandardScheme<addQuotationAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addQuotationAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.account = new xueqiao.quotation.account.thriftapi.QuotationAccount();
                struct.account.read(iprot);
                struct.setAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addQuotationAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.account != null) {
          oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
          struct.account.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addQuotationAccount_argsTupleSchemeFactory implements SchemeFactory {
      public addQuotationAccount_argsTupleScheme getScheme() {
        return new addQuotationAccount_argsTupleScheme();
      }
    }

    private static class addQuotationAccount_argsTupleScheme extends TupleScheme<addQuotationAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addQuotationAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetAccount()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetAccount()) {
          struct.account.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addQuotationAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.account = new xueqiao.quotation.account.thriftapi.QuotationAccount();
          struct.account.read(iprot);
          struct.setAccountIsSet(true);
        }
      }
    }

  }

  public static class addQuotationAccount_result implements org.apache.thrift.TBase<addQuotationAccount_result, addQuotationAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<addQuotationAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addQuotationAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addQuotationAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addQuotationAccount_resultTupleSchemeFactory());
    }

    public long success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addQuotationAccount_result.class, metaDataMap);
    }

    public addQuotationAccount_result() {
    }

    public addQuotationAccount_result(
      long success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addQuotationAccount_result(addQuotationAccount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public addQuotationAccount_result deepCopy() {
      return new addQuotationAccount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.err = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public addQuotationAccount_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public addQuotationAccount_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addQuotationAccount_result)
        return this.equals((addQuotationAccount_result)that);
      return false;
    }

    public boolean equals(addQuotationAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addQuotationAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addQuotationAccount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addQuotationAccount_resultStandardSchemeFactory implements SchemeFactory {
      public addQuotationAccount_resultStandardScheme getScheme() {
        return new addQuotationAccount_resultStandardScheme();
      }
    }

    private static class addQuotationAccount_resultStandardScheme extends StandardScheme<addQuotationAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addQuotationAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addQuotationAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addQuotationAccount_resultTupleSchemeFactory implements SchemeFactory {
      public addQuotationAccount_resultTupleScheme getScheme() {
        return new addQuotationAccount_resultTupleScheme();
      }
    }

    private static class addQuotationAccount_resultTupleScheme extends TupleScheme<addQuotationAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addQuotationAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addQuotationAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class updateContractActiveRule_args implements org.apache.thrift.TBase<updateContractActiveRule_args, updateContractActiveRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateContractActiveRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateContractActiveRule_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateContractActiveRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateContractActiveRule_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public xueqiao.quotation.account.thriftapi.ContractActiveRule rule; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      RULE((short)2, "rule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // RULE
            return RULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.ContractActiveRule.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateContractActiveRule_args.class, metaDataMap);
    }

    public updateContractActiveRule_args() {
    }

    public updateContractActiveRule_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      xueqiao.quotation.account.thriftapi.ContractActiveRule rule)
    {
      this();
      this.platformArgs = platformArgs;
      this.rule = rule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateContractActiveRule_args(updateContractActiveRule_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetRule()) {
        this.rule = new xueqiao.quotation.account.thriftapi.ContractActiveRule(other.rule);
      }
    }

    public updateContractActiveRule_args deepCopy() {
      return new updateContractActiveRule_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.rule = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public updateContractActiveRule_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public xueqiao.quotation.account.thriftapi.ContractActiveRule getRule() {
      return this.rule;
    }

    public updateContractActiveRule_args setRule(xueqiao.quotation.account.thriftapi.ContractActiveRule rule) {
      this.rule = rule;
      return this;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((xueqiao.quotation.account.thriftapi.ContractActiveRule)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case RULE:
        return getRule();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case RULE:
        return isSetRule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateContractActiveRule_args)
        return this.equals((updateContractActiveRule_args)that);
      return false;
    }

    public boolean equals(updateContractActiveRule_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateContractActiveRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateContractActiveRule_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (rule != null) {
        rule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateContractActiveRule_argsStandardSchemeFactory implements SchemeFactory {
      public updateContractActiveRule_argsStandardScheme getScheme() {
        return new updateContractActiveRule_argsStandardScheme();
      }
    }

    private static class updateContractActiveRule_argsStandardScheme extends StandardScheme<updateContractActiveRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateContractActiveRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rule = new xueqiao.quotation.account.thriftapi.ContractActiveRule();
                struct.rule.read(iprot);
                struct.setRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateContractActiveRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rule != null) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          struct.rule.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateContractActiveRule_argsTupleSchemeFactory implements SchemeFactory {
      public updateContractActiveRule_argsTupleScheme getScheme() {
        return new updateContractActiveRule_argsTupleScheme();
      }
    }

    private static class updateContractActiveRule_argsTupleScheme extends TupleScheme<updateContractActiveRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateContractActiveRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetRule()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetRule()) {
          struct.rule.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateContractActiveRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rule = new xueqiao.quotation.account.thriftapi.ContractActiveRule();
          struct.rule.read(iprot);
          struct.setRuleIsSet(true);
        }
      }
    }

  }

  public static class updateContractActiveRule_result implements org.apache.thrift.TBase<updateContractActiveRule_result, updateContractActiveRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateContractActiveRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateContractActiveRule_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateContractActiveRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateContractActiveRule_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateContractActiveRule_result.class, metaDataMap);
    }

    public updateContractActiveRule_result() {
    }

    public updateContractActiveRule_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateContractActiveRule_result(updateContractActiveRule_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public updateContractActiveRule_result deepCopy() {
      return new updateContractActiveRule_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public updateContractActiveRule_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateContractActiveRule_result)
        return this.equals((updateContractActiveRule_result)that);
      return false;
    }

    public boolean equals(updateContractActiveRule_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateContractActiveRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateContractActiveRule_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateContractActiveRule_resultStandardSchemeFactory implements SchemeFactory {
      public updateContractActiveRule_resultStandardScheme getScheme() {
        return new updateContractActiveRule_resultStandardScheme();
      }
    }

    private static class updateContractActiveRule_resultStandardScheme extends StandardScheme<updateContractActiveRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateContractActiveRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateContractActiveRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateContractActiveRule_resultTupleSchemeFactory implements SchemeFactory {
      public updateContractActiveRule_resultTupleScheme getScheme() {
        return new updateContractActiveRule_resultTupleScheme();
      }
    }

    private static class updateContractActiveRule_resultTupleScheme extends TupleScheme<updateContractActiveRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateContractActiveRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateContractActiveRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class updateContractRegisterRule_args implements org.apache.thrift.TBase<updateContractRegisterRule_args, updateContractRegisterRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateContractRegisterRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateContractRegisterRule_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateContractRegisterRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateContractRegisterRule_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public xueqiao.quotation.account.thriftapi.ContractRegisterRule rule; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      RULE((short)2, "rule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // RULE
            return RULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.ContractRegisterRule.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateContractRegisterRule_args.class, metaDataMap);
    }

    public updateContractRegisterRule_args() {
    }

    public updateContractRegisterRule_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      xueqiao.quotation.account.thriftapi.ContractRegisterRule rule)
    {
      this();
      this.platformArgs = platformArgs;
      this.rule = rule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateContractRegisterRule_args(updateContractRegisterRule_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetRule()) {
        this.rule = new xueqiao.quotation.account.thriftapi.ContractRegisterRule(other.rule);
      }
    }

    public updateContractRegisterRule_args deepCopy() {
      return new updateContractRegisterRule_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.rule = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public updateContractRegisterRule_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public xueqiao.quotation.account.thriftapi.ContractRegisterRule getRule() {
      return this.rule;
    }

    public updateContractRegisterRule_args setRule(xueqiao.quotation.account.thriftapi.ContractRegisterRule rule) {
      this.rule = rule;
      return this;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((xueqiao.quotation.account.thriftapi.ContractRegisterRule)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case RULE:
        return getRule();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case RULE:
        return isSetRule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateContractRegisterRule_args)
        return this.equals((updateContractRegisterRule_args)that);
      return false;
    }

    public boolean equals(updateContractRegisterRule_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateContractRegisterRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateContractRegisterRule_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (rule != null) {
        rule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateContractRegisterRule_argsStandardSchemeFactory implements SchemeFactory {
      public updateContractRegisterRule_argsStandardScheme getScheme() {
        return new updateContractRegisterRule_argsStandardScheme();
      }
    }

    private static class updateContractRegisterRule_argsStandardScheme extends StandardScheme<updateContractRegisterRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateContractRegisterRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rule = new xueqiao.quotation.account.thriftapi.ContractRegisterRule();
                struct.rule.read(iprot);
                struct.setRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateContractRegisterRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rule != null) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          struct.rule.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateContractRegisterRule_argsTupleSchemeFactory implements SchemeFactory {
      public updateContractRegisterRule_argsTupleScheme getScheme() {
        return new updateContractRegisterRule_argsTupleScheme();
      }
    }

    private static class updateContractRegisterRule_argsTupleScheme extends TupleScheme<updateContractRegisterRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateContractRegisterRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetRule()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetRule()) {
          struct.rule.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateContractRegisterRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rule = new xueqiao.quotation.account.thriftapi.ContractRegisterRule();
          struct.rule.read(iprot);
          struct.setRuleIsSet(true);
        }
      }
    }

  }

  public static class updateContractRegisterRule_result implements org.apache.thrift.TBase<updateContractRegisterRule_result, updateContractRegisterRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateContractRegisterRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateContractRegisterRule_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateContractRegisterRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateContractRegisterRule_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateContractRegisterRule_result.class, metaDataMap);
    }

    public updateContractRegisterRule_result() {
    }

    public updateContractRegisterRule_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateContractRegisterRule_result(updateContractRegisterRule_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public updateContractRegisterRule_result deepCopy() {
      return new updateContractRegisterRule_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public updateContractRegisterRule_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateContractRegisterRule_result)
        return this.equals((updateContractRegisterRule_result)that);
      return false;
    }

    public boolean equals(updateContractRegisterRule_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateContractRegisterRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateContractRegisterRule_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateContractRegisterRule_resultStandardSchemeFactory implements SchemeFactory {
      public updateContractRegisterRule_resultStandardScheme getScheme() {
        return new updateContractRegisterRule_resultStandardScheme();
      }
    }

    private static class updateContractRegisterRule_resultStandardScheme extends StandardScheme<updateContractRegisterRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateContractRegisterRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateContractRegisterRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateContractRegisterRule_resultTupleSchemeFactory implements SchemeFactory {
      public updateContractRegisterRule_resultTupleScheme getScheme() {
        return new updateContractRegisterRule_resultTupleScheme();
      }
    }

    private static class updateContractRegisterRule_resultTupleScheme extends TupleScheme<updateContractRegisterRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateContractRegisterRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateContractRegisterRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class updateQuotationAccount_args implements org.apache.thrift.TBase<updateQuotationAccount_args, updateQuotationAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateQuotationAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateQuotationAccount_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateQuotationAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateQuotationAccount_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public xueqiao.quotation.account.thriftapi.QuotationAccount account; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      ACCOUNT((short)2, "account");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // ACCOUNT
            return ACCOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.QuotationAccount.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateQuotationAccount_args.class, metaDataMap);
    }

    public updateQuotationAccount_args() {
    }

    public updateQuotationAccount_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      xueqiao.quotation.account.thriftapi.QuotationAccount account)
    {
      this();
      this.platformArgs = platformArgs;
      this.account = account;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateQuotationAccount_args(updateQuotationAccount_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetAccount()) {
        this.account = new xueqiao.quotation.account.thriftapi.QuotationAccount(other.account);
      }
    }

    public updateQuotationAccount_args deepCopy() {
      return new updateQuotationAccount_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.account = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public updateQuotationAccount_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public xueqiao.quotation.account.thriftapi.QuotationAccount getAccount() {
      return this.account;
    }

    public updateQuotationAccount_args setAccount(xueqiao.quotation.account.thriftapi.QuotationAccount account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((xueqiao.quotation.account.thriftapi.QuotationAccount)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case ACCOUNT:
        return getAccount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case ACCOUNT:
        return isSetAccount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateQuotationAccount_args)
        return this.equals((updateQuotationAccount_args)that);
      return false;
    }

    public boolean equals(updateQuotationAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateQuotationAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(other.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateQuotationAccount_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (account != null) {
        account.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateQuotationAccount_argsStandardSchemeFactory implements SchemeFactory {
      public updateQuotationAccount_argsStandardScheme getScheme() {
        return new updateQuotationAccount_argsStandardScheme();
      }
    }

    private static class updateQuotationAccount_argsStandardScheme extends StandardScheme<updateQuotationAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateQuotationAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.account = new xueqiao.quotation.account.thriftapi.QuotationAccount();
                struct.account.read(iprot);
                struct.setAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateQuotationAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.account != null) {
          oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
          struct.account.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateQuotationAccount_argsTupleSchemeFactory implements SchemeFactory {
      public updateQuotationAccount_argsTupleScheme getScheme() {
        return new updateQuotationAccount_argsTupleScheme();
      }
    }

    private static class updateQuotationAccount_argsTupleScheme extends TupleScheme<updateQuotationAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateQuotationAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetAccount()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetAccount()) {
          struct.account.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateQuotationAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.account = new xueqiao.quotation.account.thriftapi.QuotationAccount();
          struct.account.read(iprot);
          struct.setAccountIsSet(true);
        }
      }
    }

  }

  public static class updateQuotationAccount_result implements org.apache.thrift.TBase<updateQuotationAccount_result, updateQuotationAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateQuotationAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateQuotationAccount_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateQuotationAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateQuotationAccount_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateQuotationAccount_result.class, metaDataMap);
    }

    public updateQuotationAccount_result() {
    }

    public updateQuotationAccount_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateQuotationAccount_result(updateQuotationAccount_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public updateQuotationAccount_result deepCopy() {
      return new updateQuotationAccount_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public updateQuotationAccount_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateQuotationAccount_result)
        return this.equals((updateQuotationAccount_result)that);
      return false;
    }

    public boolean equals(updateQuotationAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateQuotationAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateQuotationAccount_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateQuotationAccount_resultStandardSchemeFactory implements SchemeFactory {
      public updateQuotationAccount_resultStandardScheme getScheme() {
        return new updateQuotationAccount_resultStandardScheme();
      }
    }

    private static class updateQuotationAccount_resultStandardScheme extends StandardScheme<updateQuotationAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateQuotationAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateQuotationAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateQuotationAccount_resultTupleSchemeFactory implements SchemeFactory {
      public updateQuotationAccount_resultTupleScheme getScheme() {
        return new updateQuotationAccount_resultTupleScheme();
      }
    }

    private static class updateQuotationAccount_resultTupleScheme extends TupleScheme<updateQuotationAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateQuotationAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateQuotationAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class removeContractActiveRule_args implements org.apache.thrift.TBase<removeContractActiveRule_args, removeContractActiveRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeContractActiveRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeContractActiveRule_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeContractActiveRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeContractActiveRule_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public int sledCommodityId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      SLED_COMMODITY_ID((short)2, "sledCommodityId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // SLED_COMMODITY_ID
            return SLED_COMMODITY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SLEDCOMMODITYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeContractActiveRule_args.class, metaDataMap);
    }

    public removeContractActiveRule_args() {
    }

    public removeContractActiveRule_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      int sledCommodityId)
    {
      this();
      this.platformArgs = platformArgs;
      this.sledCommodityId = sledCommodityId;
      setSledCommodityIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeContractActiveRule_args(removeContractActiveRule_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      this.sledCommodityId = other.sledCommodityId;
    }

    public removeContractActiveRule_args deepCopy() {
      return new removeContractActiveRule_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      setSledCommodityIdIsSet(false);
      this.sledCommodityId = 0;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public removeContractActiveRule_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public int getSledCommodityId() {
      return this.sledCommodityId;
    }

    public removeContractActiveRule_args setSledCommodityId(int sledCommodityId) {
      this.sledCommodityId = sledCommodityId;
      setSledCommodityIdIsSet(true);
      return this;
    }

    public void unsetSledCommodityId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
    }

    /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
    public boolean isSetSledCommodityId() {
      return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
    }

    public void setSledCommodityIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case SLED_COMMODITY_ID:
        if (value == null) {
          unsetSledCommodityId();
        } else {
          setSledCommodityId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case SLED_COMMODITY_ID:
        return Integer.valueOf(getSledCommodityId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case SLED_COMMODITY_ID:
        return isSetSledCommodityId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeContractActiveRule_args)
        return this.equals((removeContractActiveRule_args)that);
      return false;
    }

    public boolean equals(removeContractActiveRule_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_sledCommodityId = true;
      boolean that_present_sledCommodityId = true;
      if (this_present_sledCommodityId || that_present_sledCommodityId) {
        if (!(this_present_sledCommodityId && that_present_sledCommodityId))
          return false;
        if (this.sledCommodityId != that.sledCommodityId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeContractActiveRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSledCommodityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeContractActiveRule_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeContractActiveRule_argsStandardSchemeFactory implements SchemeFactory {
      public removeContractActiveRule_argsStandardScheme getScheme() {
        return new removeContractActiveRule_argsStandardScheme();
      }
    }

    private static class removeContractActiveRule_argsStandardScheme extends StandardScheme<removeContractActiveRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeContractActiveRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SLED_COMMODITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sledCommodityId = iprot.readI32();
                struct.setSledCommodityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeContractActiveRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI32(struct.sledCommodityId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeContractActiveRule_argsTupleSchemeFactory implements SchemeFactory {
      public removeContractActiveRule_argsTupleScheme getScheme() {
        return new removeContractActiveRule_argsTupleScheme();
      }
    }

    private static class removeContractActiveRule_argsTupleScheme extends TupleScheme<removeContractActiveRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeContractActiveRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetSledCommodityId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetSledCommodityId()) {
          oprot.writeI32(struct.sledCommodityId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeContractActiveRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sledCommodityId = iprot.readI32();
          struct.setSledCommodityIdIsSet(true);
        }
      }
    }

  }

  public static class removeContractActiveRule_result implements org.apache.thrift.TBase<removeContractActiveRule_result, removeContractActiveRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeContractActiveRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeContractActiveRule_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeContractActiveRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeContractActiveRule_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeContractActiveRule_result.class, metaDataMap);
    }

    public removeContractActiveRule_result() {
    }

    public removeContractActiveRule_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeContractActiveRule_result(removeContractActiveRule_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public removeContractActiveRule_result deepCopy() {
      return new removeContractActiveRule_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public removeContractActiveRule_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeContractActiveRule_result)
        return this.equals((removeContractActiveRule_result)that);
      return false;
    }

    public boolean equals(removeContractActiveRule_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeContractActiveRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeContractActiveRule_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeContractActiveRule_resultStandardSchemeFactory implements SchemeFactory {
      public removeContractActiveRule_resultStandardScheme getScheme() {
        return new removeContractActiveRule_resultStandardScheme();
      }
    }

    private static class removeContractActiveRule_resultStandardScheme extends StandardScheme<removeContractActiveRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeContractActiveRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeContractActiveRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeContractActiveRule_resultTupleSchemeFactory implements SchemeFactory {
      public removeContractActiveRule_resultTupleScheme getScheme() {
        return new removeContractActiveRule_resultTupleScheme();
      }
    }

    private static class removeContractActiveRule_resultTupleScheme extends TupleScheme<removeContractActiveRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeContractActiveRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeContractActiveRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class removeContractRegisterRule_args implements org.apache.thrift.TBase<removeContractRegisterRule_args, removeContractRegisterRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeContractRegisterRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeContractRegisterRule_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PLATFORM_ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("platformEnv", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeContractRegisterRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeContractRegisterRule_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public int sledCommodityId; // required
    /**
     * 
     * @see xueqiao.quotation.account.thriftapi.QuotationPlatformEnv
     */
    public xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      SLED_COMMODITY_ID((short)2, "sledCommodityId"),
      /**
       * 
       * @see xueqiao.quotation.account.thriftapi.QuotationPlatformEnv
       */
      PLATFORM_ENV((short)3, "platformEnv");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // SLED_COMMODITY_ID
            return SLED_COMMODITY_ID;
          case 3: // PLATFORM_ENV
            return PLATFORM_ENV;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SLEDCOMMODITYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM_ENV, new org.apache.thrift.meta_data.FieldMetaData("platformEnv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.quotation.account.thriftapi.QuotationPlatformEnv.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeContractRegisterRule_args.class, metaDataMap);
    }

    public removeContractRegisterRule_args() {
    }

    public removeContractRegisterRule_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      int sledCommodityId,
      xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv)
    {
      this();
      this.platformArgs = platformArgs;
      this.sledCommodityId = sledCommodityId;
      setSledCommodityIdIsSet(true);
      this.platformEnv = platformEnv;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeContractRegisterRule_args(removeContractRegisterRule_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      this.sledCommodityId = other.sledCommodityId;
      if (other.isSetPlatformEnv()) {
        this.platformEnv = other.platformEnv;
      }
    }

    public removeContractRegisterRule_args deepCopy() {
      return new removeContractRegisterRule_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      setSledCommodityIdIsSet(false);
      this.sledCommodityId = 0;
      this.platformEnv = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public removeContractRegisterRule_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public int getSledCommodityId() {
      return this.sledCommodityId;
    }

    public removeContractRegisterRule_args setSledCommodityId(int sledCommodityId) {
      this.sledCommodityId = sledCommodityId;
      setSledCommodityIdIsSet(true);
      return this;
    }

    public void unsetSledCommodityId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
    }

    /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
    public boolean isSetSledCommodityId() {
      return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
    }

    public void setSledCommodityIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
    }

    /**
     * 
     * @see xueqiao.quotation.account.thriftapi.QuotationPlatformEnv
     */
    public xueqiao.quotation.account.thriftapi.QuotationPlatformEnv getPlatformEnv() {
      return this.platformEnv;
    }

    /**
     * 
     * @see xueqiao.quotation.account.thriftapi.QuotationPlatformEnv
     */
    public removeContractRegisterRule_args setPlatformEnv(xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv) {
      this.platformEnv = platformEnv;
      return this;
    }

    public void unsetPlatformEnv() {
      this.platformEnv = null;
    }

    /** Returns true if field platformEnv is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformEnv() {
      return this.platformEnv != null;
    }

    public void setPlatformEnvIsSet(boolean value) {
      if (!value) {
        this.platformEnv = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case SLED_COMMODITY_ID:
        if (value == null) {
          unsetSledCommodityId();
        } else {
          setSledCommodityId((Integer)value);
        }
        break;

      case PLATFORM_ENV:
        if (value == null) {
          unsetPlatformEnv();
        } else {
          setPlatformEnv((xueqiao.quotation.account.thriftapi.QuotationPlatformEnv)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case SLED_COMMODITY_ID:
        return Integer.valueOf(getSledCommodityId());

      case PLATFORM_ENV:
        return getPlatformEnv();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case SLED_COMMODITY_ID:
        return isSetSledCommodityId();
      case PLATFORM_ENV:
        return isSetPlatformEnv();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeContractRegisterRule_args)
        return this.equals((removeContractRegisterRule_args)that);
      return false;
    }

    public boolean equals(removeContractRegisterRule_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_sledCommodityId = true;
      boolean that_present_sledCommodityId = true;
      if (this_present_sledCommodityId || that_present_sledCommodityId) {
        if (!(this_present_sledCommodityId && that_present_sledCommodityId))
          return false;
        if (this.sledCommodityId != that.sledCommodityId)
          return false;
      }

      boolean this_present_platformEnv = true && this.isSetPlatformEnv();
      boolean that_present_platformEnv = true && that.isSetPlatformEnv();
      if (this_present_platformEnv || that_present_platformEnv) {
        if (!(this_present_platformEnv && that_present_platformEnv))
          return false;
        if (!this.platformEnv.equals(that.platformEnv))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeContractRegisterRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSledCommodityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatformEnv()).compareTo(other.isSetPlatformEnv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformEnv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformEnv, other.platformEnv);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeContractRegisterRule_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platformEnv:");
      if (this.platformEnv == null) {
        sb.append("null");
      } else {
        sb.append(this.platformEnv);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeContractRegisterRule_argsStandardSchemeFactory implements SchemeFactory {
      public removeContractRegisterRule_argsStandardScheme getScheme() {
        return new removeContractRegisterRule_argsStandardScheme();
      }
    }

    private static class removeContractRegisterRule_argsStandardScheme extends StandardScheme<removeContractRegisterRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeContractRegisterRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SLED_COMMODITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sledCommodityId = iprot.readI32();
                struct.setSledCommodityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PLATFORM_ENV
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.platformEnv = xueqiao.quotation.account.thriftapi.QuotationPlatformEnv.findByValue(iprot.readI32());
                struct.setPlatformEnvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeContractRegisterRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI32(struct.sledCommodityId);
        oprot.writeFieldEnd();
        if (struct.platformEnv != null) {
          oprot.writeFieldBegin(PLATFORM_ENV_FIELD_DESC);
          oprot.writeI32(struct.platformEnv.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeContractRegisterRule_argsTupleSchemeFactory implements SchemeFactory {
      public removeContractRegisterRule_argsTupleScheme getScheme() {
        return new removeContractRegisterRule_argsTupleScheme();
      }
    }

    private static class removeContractRegisterRule_argsTupleScheme extends TupleScheme<removeContractRegisterRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeContractRegisterRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetSledCommodityId()) {
          optionals.set(1);
        }
        if (struct.isSetPlatformEnv()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetSledCommodityId()) {
          oprot.writeI32(struct.sledCommodityId);
        }
        if (struct.isSetPlatformEnv()) {
          oprot.writeI32(struct.platformEnv.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeContractRegisterRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sledCommodityId = iprot.readI32();
          struct.setSledCommodityIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.platformEnv = xueqiao.quotation.account.thriftapi.QuotationPlatformEnv.findByValue(iprot.readI32());
          struct.setPlatformEnvIsSet(true);
        }
      }
    }

  }

  public static class removeContractRegisterRule_result implements org.apache.thrift.TBase<removeContractRegisterRule_result, removeContractRegisterRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeContractRegisterRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeContractRegisterRule_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeContractRegisterRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeContractRegisterRule_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeContractRegisterRule_result.class, metaDataMap);
    }

    public removeContractRegisterRule_result() {
    }

    public removeContractRegisterRule_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeContractRegisterRule_result(removeContractRegisterRule_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public removeContractRegisterRule_result deepCopy() {
      return new removeContractRegisterRule_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public removeContractRegisterRule_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeContractRegisterRule_result)
        return this.equals((removeContractRegisterRule_result)that);
      return false;
    }

    public boolean equals(removeContractRegisterRule_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeContractRegisterRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeContractRegisterRule_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeContractRegisterRule_resultStandardSchemeFactory implements SchemeFactory {
      public removeContractRegisterRule_resultStandardScheme getScheme() {
        return new removeContractRegisterRule_resultStandardScheme();
      }
    }

    private static class removeContractRegisterRule_resultStandardScheme extends StandardScheme<removeContractRegisterRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeContractRegisterRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeContractRegisterRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeContractRegisterRule_resultTupleSchemeFactory implements SchemeFactory {
      public removeContractRegisterRule_resultTupleScheme getScheme() {
        return new removeContractRegisterRule_resultTupleScheme();
      }
    }

    private static class removeContractRegisterRule_resultTupleScheme extends TupleScheme<removeContractRegisterRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeContractRegisterRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeContractRegisterRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class removeQuotationAccount_args implements org.apache.thrift.TBase<removeQuotationAccount_args, removeQuotationAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeQuotationAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeQuotationAccount_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeQuotationAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeQuotationAccount_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public long accountId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      ACCOUNT_ID((short)2, "accountId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // ACCOUNT_ID
            return ACCOUNT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ACCOUNTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeQuotationAccount_args.class, metaDataMap);
    }

    public removeQuotationAccount_args() {
    }

    public removeQuotationAccount_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      long accountId)
    {
      this();
      this.platformArgs = platformArgs;
      this.accountId = accountId;
      setAccountIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeQuotationAccount_args(removeQuotationAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      this.accountId = other.accountId;
    }

    public removeQuotationAccount_args deepCopy() {
      return new removeQuotationAccount_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      setAccountIdIsSet(false);
      this.accountId = 0;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public removeQuotationAccount_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public long getAccountId() {
      return this.accountId;
    }

    public removeQuotationAccount_args setAccountId(long accountId) {
      this.accountId = accountId;
      setAccountIdIsSet(true);
      return this;
    }

    public void unsetAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
    }

    /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
    }

    public void setAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountId();
        } else {
          setAccountId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case ACCOUNT_ID:
        return Long.valueOf(getAccountId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case ACCOUNT_ID:
        return isSetAccountId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeQuotationAccount_args)
        return this.equals((removeQuotationAccount_args)that);
      return false;
    }

    public boolean equals(removeQuotationAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_accountId = true;
      boolean that_present_accountId = true;
      if (this_present_accountId || that_present_accountId) {
        if (!(this_present_accountId && that_present_accountId))
          return false;
        if (this.accountId != that.accountId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeQuotationAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeQuotationAccount_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accountId:");
      sb.append(this.accountId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeQuotationAccount_argsStandardSchemeFactory implements SchemeFactory {
      public removeQuotationAccount_argsStandardScheme getScheme() {
        return new removeQuotationAccount_argsStandardScheme();
      }
    }

    private static class removeQuotationAccount_argsStandardScheme extends StandardScheme<removeQuotationAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeQuotationAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.accountId = iprot.readI64();
                struct.setAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeQuotationAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.accountId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeQuotationAccount_argsTupleSchemeFactory implements SchemeFactory {
      public removeQuotationAccount_argsTupleScheme getScheme() {
        return new removeQuotationAccount_argsTupleScheme();
      }
    }

    private static class removeQuotationAccount_argsTupleScheme extends TupleScheme<removeQuotationAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeQuotationAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetAccountId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetAccountId()) {
          oprot.writeI64(struct.accountId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeQuotationAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.accountId = iprot.readI64();
          struct.setAccountIdIsSet(true);
        }
      }
    }

  }

  public static class removeQuotationAccount_result implements org.apache.thrift.TBase<removeQuotationAccount_result, removeQuotationAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeQuotationAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeQuotationAccount_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeQuotationAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeQuotationAccount_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeQuotationAccount_result.class, metaDataMap);
    }

    public removeQuotationAccount_result() {
    }

    public removeQuotationAccount_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeQuotationAccount_result(removeQuotationAccount_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public removeQuotationAccount_result deepCopy() {
      return new removeQuotationAccount_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public removeQuotationAccount_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeQuotationAccount_result)
        return this.equals((removeQuotationAccount_result)that);
      return false;
    }

    public boolean equals(removeQuotationAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeQuotationAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeQuotationAccount_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeQuotationAccount_resultStandardSchemeFactory implements SchemeFactory {
      public removeQuotationAccount_resultStandardScheme getScheme() {
        return new removeQuotationAccount_resultStandardScheme();
      }
    }

    private static class removeQuotationAccount_resultStandardScheme extends StandardScheme<removeQuotationAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeQuotationAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeQuotationAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeQuotationAccount_resultTupleSchemeFactory implements SchemeFactory {
      public removeQuotationAccount_resultTupleScheme getScheme() {
        return new removeQuotationAccount_resultTupleScheme();
      }
    }

    private static class removeQuotationAccount_resultTupleScheme extends TupleScheme<removeQuotationAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeQuotationAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeQuotationAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class reqAccountCommodityRegisterAbility_args implements org.apache.thrift.TBase<reqAccountCommodityRegisterAbility_args, reqAccountCommodityRegisterAbility_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqAccountCommodityRegisterAbility_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqAccountCommodityRegisterAbility_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pageOption", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqAccountCommodityRegisterAbility_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqAccountCommodityRegisterAbility_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public xueqiao.quotation.account.thriftapi.ReqAccountCommodityRegisterAbilityOption option; // required
    public org.soldier.platform.page.IndexedPageOption pageOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      OPTION((short)2, "option"),
      PAGE_OPTION((short)3, "pageOption");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // OPTION
            return OPTION;
          case 3: // PAGE_OPTION
            return PAGE_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.ReqAccountCommodityRegisterAbilityOption.class)));
      tmpMap.put(_Fields.PAGE_OPTION, new org.apache.thrift.meta_data.FieldMetaData("pageOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.page.IndexedPageOption.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqAccountCommodityRegisterAbility_args.class, metaDataMap);
    }

    public reqAccountCommodityRegisterAbility_args() {
    }

    public reqAccountCommodityRegisterAbility_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      xueqiao.quotation.account.thriftapi.ReqAccountCommodityRegisterAbilityOption option,
      org.soldier.platform.page.IndexedPageOption pageOption)
    {
      this();
      this.platformArgs = platformArgs;
      this.option = option;
      this.pageOption = pageOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqAccountCommodityRegisterAbility_args(reqAccountCommodityRegisterAbility_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetOption()) {
        this.option = new xueqiao.quotation.account.thriftapi.ReqAccountCommodityRegisterAbilityOption(other.option);
      }
      if (other.isSetPageOption()) {
        this.pageOption = new org.soldier.platform.page.IndexedPageOption(other.pageOption);
      }
    }

    public reqAccountCommodityRegisterAbility_args deepCopy() {
      return new reqAccountCommodityRegisterAbility_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.option = null;
      this.pageOption = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public reqAccountCommodityRegisterAbility_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public xueqiao.quotation.account.thriftapi.ReqAccountCommodityRegisterAbilityOption getOption() {
      return this.option;
    }

    public reqAccountCommodityRegisterAbility_args setOption(xueqiao.quotation.account.thriftapi.ReqAccountCommodityRegisterAbilityOption option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public org.soldier.platform.page.IndexedPageOption getPageOption() {
      return this.pageOption;
    }

    public reqAccountCommodityRegisterAbility_args setPageOption(org.soldier.platform.page.IndexedPageOption pageOption) {
      this.pageOption = pageOption;
      return this;
    }

    public void unsetPageOption() {
      this.pageOption = null;
    }

    /** Returns true if field pageOption is set (has been assigned a value) and false otherwise */
    public boolean isSetPageOption() {
      return this.pageOption != null;
    }

    public void setPageOptionIsSet(boolean value) {
      if (!value) {
        this.pageOption = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((xueqiao.quotation.account.thriftapi.ReqAccountCommodityRegisterAbilityOption)value);
        }
        break;

      case PAGE_OPTION:
        if (value == null) {
          unsetPageOption();
        } else {
          setPageOption((org.soldier.platform.page.IndexedPageOption)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case OPTION:
        return getOption();

      case PAGE_OPTION:
        return getPageOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case OPTION:
        return isSetOption();
      case PAGE_OPTION:
        return isSetPageOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqAccountCommodityRegisterAbility_args)
        return this.equals((reqAccountCommodityRegisterAbility_args)that);
      return false;
    }

    public boolean equals(reqAccountCommodityRegisterAbility_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      boolean this_present_pageOption = true && this.isSetPageOption();
      boolean that_present_pageOption = true && that.isSetPageOption();
      if (this_present_pageOption || that_present_pageOption) {
        if (!(this_present_pageOption && that_present_pageOption))
          return false;
        if (!this.pageOption.equals(that.pageOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqAccountCommodityRegisterAbility_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageOption()).compareTo(other.isSetPageOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageOption, other.pageOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqAccountCommodityRegisterAbility_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageOption:");
      if (this.pageOption == null) {
        sb.append("null");
      } else {
        sb.append(this.pageOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (option != null) {
        option.validate();
      }
      if (pageOption != null) {
        pageOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqAccountCommodityRegisterAbility_argsStandardSchemeFactory implements SchemeFactory {
      public reqAccountCommodityRegisterAbility_argsStandardScheme getScheme() {
        return new reqAccountCommodityRegisterAbility_argsStandardScheme();
      }
    }

    private static class reqAccountCommodityRegisterAbility_argsStandardScheme extends StandardScheme<reqAccountCommodityRegisterAbility_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqAccountCommodityRegisterAbility_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.option = new xueqiao.quotation.account.thriftapi.ReqAccountCommodityRegisterAbilityOption();
                struct.option.read(iprot);
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
                struct.pageOption.read(iprot);
                struct.setPageOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqAccountCommodityRegisterAbility_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          struct.option.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageOption != null) {
          oprot.writeFieldBegin(PAGE_OPTION_FIELD_DESC);
          struct.pageOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqAccountCommodityRegisterAbility_argsTupleSchemeFactory implements SchemeFactory {
      public reqAccountCommodityRegisterAbility_argsTupleScheme getScheme() {
        return new reqAccountCommodityRegisterAbility_argsTupleScheme();
      }
    }

    private static class reqAccountCommodityRegisterAbility_argsTupleScheme extends TupleScheme<reqAccountCommodityRegisterAbility_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqAccountCommodityRegisterAbility_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetOption()) {
          optionals.set(1);
        }
        if (struct.isSetPageOption()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetOption()) {
          struct.option.write(oprot);
        }
        if (struct.isSetPageOption()) {
          struct.pageOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqAccountCommodityRegisterAbility_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.option = new xueqiao.quotation.account.thriftapi.ReqAccountCommodityRegisterAbilityOption();
          struct.option.read(iprot);
          struct.setOptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
          struct.pageOption.read(iprot);
          struct.setPageOptionIsSet(true);
        }
      }
    }

  }

  public static class reqAccountCommodityRegisterAbility_result implements org.apache.thrift.TBase<reqAccountCommodityRegisterAbility_result, reqAccountCommodityRegisterAbility_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqAccountCommodityRegisterAbility_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqAccountCommodityRegisterAbility_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqAccountCommodityRegisterAbility_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqAccountCommodityRegisterAbility_resultTupleSchemeFactory());
    }

    public xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqAccountCommodityRegisterAbility_result.class, metaDataMap);
    }

    public reqAccountCommodityRegisterAbility_result() {
    }

    public reqAccountCommodityRegisterAbility_result(
      xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqAccountCommodityRegisterAbility_result(reqAccountCommodityRegisterAbility_result other) {
      if (other.isSetSuccess()) {
        this.success = new xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public reqAccountCommodityRegisterAbility_result deepCopy() {
      return new reqAccountCommodityRegisterAbility_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage getSuccess() {
      return this.success;
    }

    public reqAccountCommodityRegisterAbility_result setSuccess(xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public reqAccountCommodityRegisterAbility_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqAccountCommodityRegisterAbility_result)
        return this.equals((reqAccountCommodityRegisterAbility_result)that);
      return false;
    }

    public boolean equals(reqAccountCommodityRegisterAbility_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqAccountCommodityRegisterAbility_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqAccountCommodityRegisterAbility_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqAccountCommodityRegisterAbility_resultStandardSchemeFactory implements SchemeFactory {
      public reqAccountCommodityRegisterAbility_resultStandardScheme getScheme() {
        return new reqAccountCommodityRegisterAbility_resultStandardScheme();
      }
    }

    private static class reqAccountCommodityRegisterAbility_resultStandardScheme extends StandardScheme<reqAccountCommodityRegisterAbility_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqAccountCommodityRegisterAbility_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqAccountCommodityRegisterAbility_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqAccountCommodityRegisterAbility_resultTupleSchemeFactory implements SchemeFactory {
      public reqAccountCommodityRegisterAbility_resultTupleScheme getScheme() {
        return new reqAccountCommodityRegisterAbility_resultTupleScheme();
      }
    }

    private static class reqAccountCommodityRegisterAbility_resultTupleScheme extends TupleScheme<reqAccountCommodityRegisterAbility_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqAccountCommodityRegisterAbility_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqAccountCommodityRegisterAbility_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbilityPage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class addAccountCommodityRegisterAbility_args implements org.apache.thrift.TBase<addAccountCommodityRegisterAbility_args, addAccountCommodityRegisterAbility_args._Fields>, java.io.Serializable, Cloneable, Comparable<addAccountCommodityRegisterAbility_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAccountCommodityRegisterAbility_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("ability", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAccountCommodityRegisterAbility_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAccountCommodityRegisterAbility_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility ability; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      ABILITY((short)2, "ability");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // ABILITY
            return ABILITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.ABILITY, new org.apache.thrift.meta_data.FieldMetaData("ability", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAccountCommodityRegisterAbility_args.class, metaDataMap);
    }

    public addAccountCommodityRegisterAbility_args() {
    }

    public addAccountCommodityRegisterAbility_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility ability)
    {
      this();
      this.platformArgs = platformArgs;
      this.ability = ability;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAccountCommodityRegisterAbility_args(addAccountCommodityRegisterAbility_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetAbility()) {
        this.ability = new xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility(other.ability);
      }
    }

    public addAccountCommodityRegisterAbility_args deepCopy() {
      return new addAccountCommodityRegisterAbility_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.ability = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public addAccountCommodityRegisterAbility_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility getAbility() {
      return this.ability;
    }

    public addAccountCommodityRegisterAbility_args setAbility(xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility ability) {
      this.ability = ability;
      return this;
    }

    public void unsetAbility() {
      this.ability = null;
    }

    /** Returns true if field ability is set (has been assigned a value) and false otherwise */
    public boolean isSetAbility() {
      return this.ability != null;
    }

    public void setAbilityIsSet(boolean value) {
      if (!value) {
        this.ability = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case ABILITY:
        if (value == null) {
          unsetAbility();
        } else {
          setAbility((xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case ABILITY:
        return getAbility();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case ABILITY:
        return isSetAbility();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAccountCommodityRegisterAbility_args)
        return this.equals((addAccountCommodityRegisterAbility_args)that);
      return false;
    }

    public boolean equals(addAccountCommodityRegisterAbility_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_ability = true && this.isSetAbility();
      boolean that_present_ability = true && that.isSetAbility();
      if (this_present_ability || that_present_ability) {
        if (!(this_present_ability && that_present_ability))
          return false;
        if (!this.ability.equals(that.ability))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addAccountCommodityRegisterAbility_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAbility()).compareTo(other.isSetAbility());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbility()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ability, other.ability);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAccountCommodityRegisterAbility_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ability:");
      if (this.ability == null) {
        sb.append("null");
      } else {
        sb.append(this.ability);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (ability != null) {
        ability.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAccountCommodityRegisterAbility_argsStandardSchemeFactory implements SchemeFactory {
      public addAccountCommodityRegisterAbility_argsStandardScheme getScheme() {
        return new addAccountCommodityRegisterAbility_argsStandardScheme();
      }
    }

    private static class addAccountCommodityRegisterAbility_argsStandardScheme extends StandardScheme<addAccountCommodityRegisterAbility_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAccountCommodityRegisterAbility_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ABILITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ability = new xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility();
                struct.ability.read(iprot);
                struct.setAbilityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAccountCommodityRegisterAbility_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ability != null) {
          oprot.writeFieldBegin(ABILITY_FIELD_DESC);
          struct.ability.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAccountCommodityRegisterAbility_argsTupleSchemeFactory implements SchemeFactory {
      public addAccountCommodityRegisterAbility_argsTupleScheme getScheme() {
        return new addAccountCommodityRegisterAbility_argsTupleScheme();
      }
    }

    private static class addAccountCommodityRegisterAbility_argsTupleScheme extends TupleScheme<addAccountCommodityRegisterAbility_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAccountCommodityRegisterAbility_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetAbility()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetAbility()) {
          struct.ability.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAccountCommodityRegisterAbility_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ability = new xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility();
          struct.ability.read(iprot);
          struct.setAbilityIsSet(true);
        }
      }
    }

  }

  public static class addAccountCommodityRegisterAbility_result implements org.apache.thrift.TBase<addAccountCommodityRegisterAbility_result, addAccountCommodityRegisterAbility_result._Fields>, java.io.Serializable, Cloneable, Comparable<addAccountCommodityRegisterAbility_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAccountCommodityRegisterAbility_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAccountCommodityRegisterAbility_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAccountCommodityRegisterAbility_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAccountCommodityRegisterAbility_result.class, metaDataMap);
    }

    public addAccountCommodityRegisterAbility_result() {
    }

    public addAccountCommodityRegisterAbility_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAccountCommodityRegisterAbility_result(addAccountCommodityRegisterAbility_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public addAccountCommodityRegisterAbility_result deepCopy() {
      return new addAccountCommodityRegisterAbility_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public addAccountCommodityRegisterAbility_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAccountCommodityRegisterAbility_result)
        return this.equals((addAccountCommodityRegisterAbility_result)that);
      return false;
    }

    public boolean equals(addAccountCommodityRegisterAbility_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addAccountCommodityRegisterAbility_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAccountCommodityRegisterAbility_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAccountCommodityRegisterAbility_resultStandardSchemeFactory implements SchemeFactory {
      public addAccountCommodityRegisterAbility_resultStandardScheme getScheme() {
        return new addAccountCommodityRegisterAbility_resultStandardScheme();
      }
    }

    private static class addAccountCommodityRegisterAbility_resultStandardScheme extends StandardScheme<addAccountCommodityRegisterAbility_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAccountCommodityRegisterAbility_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAccountCommodityRegisterAbility_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAccountCommodityRegisterAbility_resultTupleSchemeFactory implements SchemeFactory {
      public addAccountCommodityRegisterAbility_resultTupleScheme getScheme() {
        return new addAccountCommodityRegisterAbility_resultTupleScheme();
      }
    }

    private static class addAccountCommodityRegisterAbility_resultTupleScheme extends TupleScheme<addAccountCommodityRegisterAbility_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAccountCommodityRegisterAbility_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAccountCommodityRegisterAbility_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class removeAccountCommodityRegisterAbility_args implements org.apache.thrift.TBase<removeAccountCommodityRegisterAbility_args, removeAccountCommodityRegisterAbility_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeAccountCommodityRegisterAbility_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAccountCommodityRegisterAbility_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SUPPORT_ABILITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("supportAbilityId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeAccountCommodityRegisterAbility_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeAccountCommodityRegisterAbility_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public long supportAbilityId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      SUPPORT_ABILITY_ID((short)2, "supportAbilityId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // SUPPORT_ABILITY_ID
            return SUPPORT_ABILITY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPPORTABILITYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.SUPPORT_ABILITY_ID, new org.apache.thrift.meta_data.FieldMetaData("supportAbilityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAccountCommodityRegisterAbility_args.class, metaDataMap);
    }

    public removeAccountCommodityRegisterAbility_args() {
    }

    public removeAccountCommodityRegisterAbility_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      long supportAbilityId)
    {
      this();
      this.platformArgs = platformArgs;
      this.supportAbilityId = supportAbilityId;
      setSupportAbilityIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAccountCommodityRegisterAbility_args(removeAccountCommodityRegisterAbility_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      this.supportAbilityId = other.supportAbilityId;
    }

    public removeAccountCommodityRegisterAbility_args deepCopy() {
      return new removeAccountCommodityRegisterAbility_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      setSupportAbilityIdIsSet(false);
      this.supportAbilityId = 0;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public removeAccountCommodityRegisterAbility_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public long getSupportAbilityId() {
      return this.supportAbilityId;
    }

    public removeAccountCommodityRegisterAbility_args setSupportAbilityId(long supportAbilityId) {
      this.supportAbilityId = supportAbilityId;
      setSupportAbilityIdIsSet(true);
      return this;
    }

    public void unsetSupportAbilityId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUPPORTABILITYID_ISSET_ID);
    }

    /** Returns true if field supportAbilityId is set (has been assigned a value) and false otherwise */
    public boolean isSetSupportAbilityId() {
      return EncodingUtils.testBit(__isset_bitfield, __SUPPORTABILITYID_ISSET_ID);
    }

    public void setSupportAbilityIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUPPORTABILITYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case SUPPORT_ABILITY_ID:
        if (value == null) {
          unsetSupportAbilityId();
        } else {
          setSupportAbilityId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case SUPPORT_ABILITY_ID:
        return Long.valueOf(getSupportAbilityId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case SUPPORT_ABILITY_ID:
        return isSetSupportAbilityId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAccountCommodityRegisterAbility_args)
        return this.equals((removeAccountCommodityRegisterAbility_args)that);
      return false;
    }

    public boolean equals(removeAccountCommodityRegisterAbility_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_supportAbilityId = true;
      boolean that_present_supportAbilityId = true;
      if (this_present_supportAbilityId || that_present_supportAbilityId) {
        if (!(this_present_supportAbilityId && that_present_supportAbilityId))
          return false;
        if (this.supportAbilityId != that.supportAbilityId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeAccountCommodityRegisterAbility_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSupportAbilityId()).compareTo(other.isSetSupportAbilityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupportAbilityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supportAbilityId, other.supportAbilityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeAccountCommodityRegisterAbility_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supportAbilityId:");
      sb.append(this.supportAbilityId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeAccountCommodityRegisterAbility_argsStandardSchemeFactory implements SchemeFactory {
      public removeAccountCommodityRegisterAbility_argsStandardScheme getScheme() {
        return new removeAccountCommodityRegisterAbility_argsStandardScheme();
      }
    }

    private static class removeAccountCommodityRegisterAbility_argsStandardScheme extends StandardScheme<removeAccountCommodityRegisterAbility_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeAccountCommodityRegisterAbility_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUPPORT_ABILITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.supportAbilityId = iprot.readI64();
                struct.setSupportAbilityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeAccountCommodityRegisterAbility_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPPORT_ABILITY_ID_FIELD_DESC);
        oprot.writeI64(struct.supportAbilityId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeAccountCommodityRegisterAbility_argsTupleSchemeFactory implements SchemeFactory {
      public removeAccountCommodityRegisterAbility_argsTupleScheme getScheme() {
        return new removeAccountCommodityRegisterAbility_argsTupleScheme();
      }
    }

    private static class removeAccountCommodityRegisterAbility_argsTupleScheme extends TupleScheme<removeAccountCommodityRegisterAbility_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeAccountCommodityRegisterAbility_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetSupportAbilityId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetSupportAbilityId()) {
          oprot.writeI64(struct.supportAbilityId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeAccountCommodityRegisterAbility_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.supportAbilityId = iprot.readI64();
          struct.setSupportAbilityIdIsSet(true);
        }
      }
    }

  }

  public static class removeAccountCommodityRegisterAbility_result implements org.apache.thrift.TBase<removeAccountCommodityRegisterAbility_result, removeAccountCommodityRegisterAbility_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeAccountCommodityRegisterAbility_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAccountCommodityRegisterAbility_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeAccountCommodityRegisterAbility_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeAccountCommodityRegisterAbility_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAccountCommodityRegisterAbility_result.class, metaDataMap);
    }

    public removeAccountCommodityRegisterAbility_result() {
    }

    public removeAccountCommodityRegisterAbility_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAccountCommodityRegisterAbility_result(removeAccountCommodityRegisterAbility_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public removeAccountCommodityRegisterAbility_result deepCopy() {
      return new removeAccountCommodityRegisterAbility_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public removeAccountCommodityRegisterAbility_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAccountCommodityRegisterAbility_result)
        return this.equals((removeAccountCommodityRegisterAbility_result)that);
      return false;
    }

    public boolean equals(removeAccountCommodityRegisterAbility_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeAccountCommodityRegisterAbility_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeAccountCommodityRegisterAbility_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeAccountCommodityRegisterAbility_resultStandardSchemeFactory implements SchemeFactory {
      public removeAccountCommodityRegisterAbility_resultStandardScheme getScheme() {
        return new removeAccountCommodityRegisterAbility_resultStandardScheme();
      }
    }

    private static class removeAccountCommodityRegisterAbility_resultStandardScheme extends StandardScheme<removeAccountCommodityRegisterAbility_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeAccountCommodityRegisterAbility_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeAccountCommodityRegisterAbility_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeAccountCommodityRegisterAbility_resultTupleSchemeFactory implements SchemeFactory {
      public removeAccountCommodityRegisterAbility_resultTupleScheme getScheme() {
        return new removeAccountCommodityRegisterAbility_resultTupleScheme();
      }
    }

    private static class removeAccountCommodityRegisterAbility_resultTupleScheme extends TupleScheme<removeAccountCommodityRegisterAbility_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeAccountCommodityRegisterAbility_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeAccountCommodityRegisterAbility_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class batAddAccountCommodityRegisterAbility_args implements org.apache.thrift.TBase<batAddAccountCommodityRegisterAbility_args, batAddAccountCommodityRegisterAbility_args._Fields>, java.io.Serializable, Cloneable, Comparable<batAddAccountCommodityRegisterAbility_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batAddAccountCommodityRegisterAbility_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ABILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("abilities", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batAddAccountCommodityRegisterAbility_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batAddAccountCommodityRegisterAbility_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public List<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility> abilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      ABILITIES((short)2, "abilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // ABILITIES
            return ABILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.ABILITIES, new org.apache.thrift.meta_data.FieldMetaData("abilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batAddAccountCommodityRegisterAbility_args.class, metaDataMap);
    }

    public batAddAccountCommodityRegisterAbility_args() {
    }

    public batAddAccountCommodityRegisterAbility_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      List<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility> abilities)
    {
      this();
      this.platformArgs = platformArgs;
      this.abilities = abilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batAddAccountCommodityRegisterAbility_args(batAddAccountCommodityRegisterAbility_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetAbilities()) {
        List<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility> __this__abilities = new ArrayList<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility>(other.abilities.size());
        for (xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility other_element : other.abilities) {
          __this__abilities.add(new xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility(other_element));
        }
        this.abilities = __this__abilities;
      }
    }

    public batAddAccountCommodityRegisterAbility_args deepCopy() {
      return new batAddAccountCommodityRegisterAbility_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.abilities = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public batAddAccountCommodityRegisterAbility_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public int getAbilitiesSize() {
      return (this.abilities == null) ? 0 : this.abilities.size();
    }

    public java.util.Iterator<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility> getAbilitiesIterator() {
      return (this.abilities == null) ? null : this.abilities.iterator();
    }

    public void addToAbilities(xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility elem) {
      if (this.abilities == null) {
        this.abilities = new ArrayList<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility>();
      }
      this.abilities.add(elem);
    }

    public List<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility> getAbilities() {
      return this.abilities;
    }

    public batAddAccountCommodityRegisterAbility_args setAbilities(List<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility> abilities) {
      this.abilities = abilities;
      return this;
    }

    public void unsetAbilities() {
      this.abilities = null;
    }

    /** Returns true if field abilities is set (has been assigned a value) and false otherwise */
    public boolean isSetAbilities() {
      return this.abilities != null;
    }

    public void setAbilitiesIsSet(boolean value) {
      if (!value) {
        this.abilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case ABILITIES:
        if (value == null) {
          unsetAbilities();
        } else {
          setAbilities((List<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case ABILITIES:
        return getAbilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case ABILITIES:
        return isSetAbilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batAddAccountCommodityRegisterAbility_args)
        return this.equals((batAddAccountCommodityRegisterAbility_args)that);
      return false;
    }

    public boolean equals(batAddAccountCommodityRegisterAbility_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_abilities = true && this.isSetAbilities();
      boolean that_present_abilities = true && that.isSetAbilities();
      if (this_present_abilities || that_present_abilities) {
        if (!(this_present_abilities && that_present_abilities))
          return false;
        if (!this.abilities.equals(that.abilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batAddAccountCommodityRegisterAbility_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAbilities()).compareTo(other.isSetAbilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abilities, other.abilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batAddAccountCommodityRegisterAbility_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("abilities:");
      if (this.abilities == null) {
        sb.append("null");
      } else {
        sb.append(this.abilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batAddAccountCommodityRegisterAbility_argsStandardSchemeFactory implements SchemeFactory {
      public batAddAccountCommodityRegisterAbility_argsStandardScheme getScheme() {
        return new batAddAccountCommodityRegisterAbility_argsStandardScheme();
      }
    }

    private static class batAddAccountCommodityRegisterAbility_argsStandardScheme extends StandardScheme<batAddAccountCommodityRegisterAbility_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batAddAccountCommodityRegisterAbility_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ABILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.abilities = new ArrayList<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility _elem10;
                    _elem10 = new xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility();
                    _elem10.read(iprot);
                    struct.abilities.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setAbilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batAddAccountCommodityRegisterAbility_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.abilities != null) {
          oprot.writeFieldBegin(ABILITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.abilities.size()));
            for (xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility _iter11 : struct.abilities)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batAddAccountCommodityRegisterAbility_argsTupleSchemeFactory implements SchemeFactory {
      public batAddAccountCommodityRegisterAbility_argsTupleScheme getScheme() {
        return new batAddAccountCommodityRegisterAbility_argsTupleScheme();
      }
    }

    private static class batAddAccountCommodityRegisterAbility_argsTupleScheme extends TupleScheme<batAddAccountCommodityRegisterAbility_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batAddAccountCommodityRegisterAbility_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetAbilities()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetAbilities()) {
          {
            oprot.writeI32(struct.abilities.size());
            for (xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility _iter12 : struct.abilities)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batAddAccountCommodityRegisterAbility_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.abilities = new ArrayList<xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility _elem15;
              _elem15 = new xueqiao.quotation.account.thriftapi.AccountCommodityRegisterAbility();
              _elem15.read(iprot);
              struct.abilities.add(_elem15);
            }
          }
          struct.setAbilitiesIsSet(true);
        }
      }
    }

  }

  public static class batAddAccountCommodityRegisterAbility_result implements org.apache.thrift.TBase<batAddAccountCommodityRegisterAbility_result, batAddAccountCommodityRegisterAbility_result._Fields>, java.io.Serializable, Cloneable, Comparable<batAddAccountCommodityRegisterAbility_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batAddAccountCommodityRegisterAbility_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batAddAccountCommodityRegisterAbility_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batAddAccountCommodityRegisterAbility_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batAddAccountCommodityRegisterAbility_result.class, metaDataMap);
    }

    public batAddAccountCommodityRegisterAbility_result() {
    }

    public batAddAccountCommodityRegisterAbility_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batAddAccountCommodityRegisterAbility_result(batAddAccountCommodityRegisterAbility_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public batAddAccountCommodityRegisterAbility_result deepCopy() {
      return new batAddAccountCommodityRegisterAbility_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public batAddAccountCommodityRegisterAbility_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batAddAccountCommodityRegisterAbility_result)
        return this.equals((batAddAccountCommodityRegisterAbility_result)that);
      return false;
    }

    public boolean equals(batAddAccountCommodityRegisterAbility_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batAddAccountCommodityRegisterAbility_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batAddAccountCommodityRegisterAbility_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batAddAccountCommodityRegisterAbility_resultStandardSchemeFactory implements SchemeFactory {
      public batAddAccountCommodityRegisterAbility_resultStandardScheme getScheme() {
        return new batAddAccountCommodityRegisterAbility_resultStandardScheme();
      }
    }

    private static class batAddAccountCommodityRegisterAbility_resultStandardScheme extends StandardScheme<batAddAccountCommodityRegisterAbility_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batAddAccountCommodityRegisterAbility_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batAddAccountCommodityRegisterAbility_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batAddAccountCommodityRegisterAbility_resultTupleSchemeFactory implements SchemeFactory {
      public batAddAccountCommodityRegisterAbility_resultTupleScheme getScheme() {
        return new batAddAccountCommodityRegisterAbility_resultTupleScheme();
      }
    }

    private static class batAddAccountCommodityRegisterAbility_resultTupleScheme extends TupleScheme<batAddAccountCommodityRegisterAbility_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batAddAccountCommodityRegisterAbility_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batAddAccountCommodityRegisterAbility_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class removeAccountCommodityRegisterAbilities_args implements org.apache.thrift.TBase<removeAccountCommodityRegisterAbilities_args, removeAccountCommodityRegisterAbilities_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeAccountCommodityRegisterAbilities_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAccountCommodityRegisterAbilities_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField SLED_EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledExchangeId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeAccountCommodityRegisterAbilities_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeAccountCommodityRegisterAbilities_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public long accountId; // required
    public int sledExchangeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      ACCOUNT_ID((short)2, "accountId"),
      SLED_EXCHANGE_ID((short)3, "sledExchangeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 3: // SLED_EXCHANGE_ID
            return SLED_EXCHANGE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ACCOUNTID_ISSET_ID = 0;
    private static final int __SLEDEXCHANGEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SLED_EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("sledExchangeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAccountCommodityRegisterAbilities_args.class, metaDataMap);
    }

    public removeAccountCommodityRegisterAbilities_args() {
    }

    public removeAccountCommodityRegisterAbilities_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      long accountId,
      int sledExchangeId)
    {
      this();
      this.platformArgs = platformArgs;
      this.accountId = accountId;
      setAccountIdIsSet(true);
      this.sledExchangeId = sledExchangeId;
      setSledExchangeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAccountCommodityRegisterAbilities_args(removeAccountCommodityRegisterAbilities_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      this.accountId = other.accountId;
      this.sledExchangeId = other.sledExchangeId;
    }

    public removeAccountCommodityRegisterAbilities_args deepCopy() {
      return new removeAccountCommodityRegisterAbilities_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      setAccountIdIsSet(false);
      this.accountId = 0;
      setSledExchangeIdIsSet(false);
      this.sledExchangeId = 0;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public removeAccountCommodityRegisterAbilities_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public long getAccountId() {
      return this.accountId;
    }

    public removeAccountCommodityRegisterAbilities_args setAccountId(long accountId) {
      this.accountId = accountId;
      setAccountIdIsSet(true);
      return this;
    }

    public void unsetAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
    }

    /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
    }

    public void setAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
    }

    public int getSledExchangeId() {
      return this.sledExchangeId;
    }

    public removeAccountCommodityRegisterAbilities_args setSledExchangeId(int sledExchangeId) {
      this.sledExchangeId = sledExchangeId;
      setSledExchangeIdIsSet(true);
      return this;
    }

    public void unsetSledExchangeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDEXCHANGEID_ISSET_ID);
    }

    /** Returns true if field sledExchangeId is set (has been assigned a value) and false otherwise */
    public boolean isSetSledExchangeId() {
      return EncodingUtils.testBit(__isset_bitfield, __SLEDEXCHANGEID_ISSET_ID);
    }

    public void setSledExchangeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDEXCHANGEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountId();
        } else {
          setAccountId((Long)value);
        }
        break;

      case SLED_EXCHANGE_ID:
        if (value == null) {
          unsetSledExchangeId();
        } else {
          setSledExchangeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case ACCOUNT_ID:
        return Long.valueOf(getAccountId());

      case SLED_EXCHANGE_ID:
        return Integer.valueOf(getSledExchangeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case ACCOUNT_ID:
        return isSetAccountId();
      case SLED_EXCHANGE_ID:
        return isSetSledExchangeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAccountCommodityRegisterAbilities_args)
        return this.equals((removeAccountCommodityRegisterAbilities_args)that);
      return false;
    }

    public boolean equals(removeAccountCommodityRegisterAbilities_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_accountId = true;
      boolean that_present_accountId = true;
      if (this_present_accountId || that_present_accountId) {
        if (!(this_present_accountId && that_present_accountId))
          return false;
        if (this.accountId != that.accountId)
          return false;
      }

      boolean this_present_sledExchangeId = true;
      boolean that_present_sledExchangeId = true;
      if (this_present_sledExchangeId || that_present_sledExchangeId) {
        if (!(this_present_sledExchangeId && that_present_sledExchangeId))
          return false;
        if (this.sledExchangeId != that.sledExchangeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeAccountCommodityRegisterAbilities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSledExchangeId()).compareTo(other.isSetSledExchangeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSledExchangeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledExchangeId, other.sledExchangeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeAccountCommodityRegisterAbilities_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accountId:");
      sb.append(this.accountId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sledExchangeId:");
      sb.append(this.sledExchangeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeAccountCommodityRegisterAbilities_argsStandardSchemeFactory implements SchemeFactory {
      public removeAccountCommodityRegisterAbilities_argsStandardScheme getScheme() {
        return new removeAccountCommodityRegisterAbilities_argsStandardScheme();
      }
    }

    private static class removeAccountCommodityRegisterAbilities_argsStandardScheme extends StandardScheme<removeAccountCommodityRegisterAbilities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeAccountCommodityRegisterAbilities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.accountId = iprot.readI64();
                struct.setAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SLED_EXCHANGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sledExchangeId = iprot.readI32();
                struct.setSledExchangeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeAccountCommodityRegisterAbilities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.accountId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SLED_EXCHANGE_ID_FIELD_DESC);
        oprot.writeI32(struct.sledExchangeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeAccountCommodityRegisterAbilities_argsTupleSchemeFactory implements SchemeFactory {
      public removeAccountCommodityRegisterAbilities_argsTupleScheme getScheme() {
        return new removeAccountCommodityRegisterAbilities_argsTupleScheme();
      }
    }

    private static class removeAccountCommodityRegisterAbilities_argsTupleScheme extends TupleScheme<removeAccountCommodityRegisterAbilities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeAccountCommodityRegisterAbilities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetAccountId()) {
          optionals.set(1);
        }
        if (struct.isSetSledExchangeId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetAccountId()) {
          oprot.writeI64(struct.accountId);
        }
        if (struct.isSetSledExchangeId()) {
          oprot.writeI32(struct.sledExchangeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeAccountCommodityRegisterAbilities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.accountId = iprot.readI64();
          struct.setAccountIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.sledExchangeId = iprot.readI32();
          struct.setSledExchangeIdIsSet(true);
        }
      }
    }

  }

  public static class removeAccountCommodityRegisterAbilities_result implements org.apache.thrift.TBase<removeAccountCommodityRegisterAbilities_result, removeAccountCommodityRegisterAbilities_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeAccountCommodityRegisterAbilities_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAccountCommodityRegisterAbilities_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeAccountCommodityRegisterAbilities_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeAccountCommodityRegisterAbilities_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAccountCommodityRegisterAbilities_result.class, metaDataMap);
    }

    public removeAccountCommodityRegisterAbilities_result() {
    }

    public removeAccountCommodityRegisterAbilities_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAccountCommodityRegisterAbilities_result(removeAccountCommodityRegisterAbilities_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public removeAccountCommodityRegisterAbilities_result deepCopy() {
      return new removeAccountCommodityRegisterAbilities_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public removeAccountCommodityRegisterAbilities_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAccountCommodityRegisterAbilities_result)
        return this.equals((removeAccountCommodityRegisterAbilities_result)that);
      return false;
    }

    public boolean equals(removeAccountCommodityRegisterAbilities_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeAccountCommodityRegisterAbilities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeAccountCommodityRegisterAbilities_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeAccountCommodityRegisterAbilities_resultStandardSchemeFactory implements SchemeFactory {
      public removeAccountCommodityRegisterAbilities_resultStandardScheme getScheme() {
        return new removeAccountCommodityRegisterAbilities_resultStandardScheme();
      }
    }

    private static class removeAccountCommodityRegisterAbilities_resultStandardScheme extends StandardScheme<removeAccountCommodityRegisterAbilities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeAccountCommodityRegisterAbilities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeAccountCommodityRegisterAbilities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeAccountCommodityRegisterAbilities_resultTupleSchemeFactory implements SchemeFactory {
      public removeAccountCommodityRegisterAbilities_resultTupleScheme getScheme() {
        return new removeAccountCommodityRegisterAbilities_resultTupleScheme();
      }
    }

    private static class removeAccountCommodityRegisterAbilities_resultTupleScheme extends TupleScheme<removeAccountCommodityRegisterAbilities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeAccountCommodityRegisterAbilities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeAccountCommodityRegisterAbilities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class reqQuotationAccountSupport_args implements org.apache.thrift.TBase<reqQuotationAccountSupport_args, reqQuotationAccountSupport_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQuotationAccountSupport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQuotationAccountSupport_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pageOption", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQuotationAccountSupport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQuotationAccountSupport_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public xueqiao.quotation.account.thriftapi.ReqQuotationAccountSupportOption option; // required
    public org.soldier.platform.page.IndexedPageOption pageOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      OPTION((short)2, "option"),
      PAGE_OPTION((short)3, "pageOption");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // OPTION
            return OPTION;
          case 3: // PAGE_OPTION
            return PAGE_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.ReqQuotationAccountSupportOption.class)));
      tmpMap.put(_Fields.PAGE_OPTION, new org.apache.thrift.meta_data.FieldMetaData("pageOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.page.IndexedPageOption.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQuotationAccountSupport_args.class, metaDataMap);
    }

    public reqQuotationAccountSupport_args() {
    }

    public reqQuotationAccountSupport_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      xueqiao.quotation.account.thriftapi.ReqQuotationAccountSupportOption option,
      org.soldier.platform.page.IndexedPageOption pageOption)
    {
      this();
      this.platformArgs = platformArgs;
      this.option = option;
      this.pageOption = pageOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQuotationAccountSupport_args(reqQuotationAccountSupport_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetOption()) {
        this.option = new xueqiao.quotation.account.thriftapi.ReqQuotationAccountSupportOption(other.option);
      }
      if (other.isSetPageOption()) {
        this.pageOption = new org.soldier.platform.page.IndexedPageOption(other.pageOption);
      }
    }

    public reqQuotationAccountSupport_args deepCopy() {
      return new reqQuotationAccountSupport_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.option = null;
      this.pageOption = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public reqQuotationAccountSupport_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public xueqiao.quotation.account.thriftapi.ReqQuotationAccountSupportOption getOption() {
      return this.option;
    }

    public reqQuotationAccountSupport_args setOption(xueqiao.quotation.account.thriftapi.ReqQuotationAccountSupportOption option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public org.soldier.platform.page.IndexedPageOption getPageOption() {
      return this.pageOption;
    }

    public reqQuotationAccountSupport_args setPageOption(org.soldier.platform.page.IndexedPageOption pageOption) {
      this.pageOption = pageOption;
      return this;
    }

    public void unsetPageOption() {
      this.pageOption = null;
    }

    /** Returns true if field pageOption is set (has been assigned a value) and false otherwise */
    public boolean isSetPageOption() {
      return this.pageOption != null;
    }

    public void setPageOptionIsSet(boolean value) {
      if (!value) {
        this.pageOption = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((xueqiao.quotation.account.thriftapi.ReqQuotationAccountSupportOption)value);
        }
        break;

      case PAGE_OPTION:
        if (value == null) {
          unsetPageOption();
        } else {
          setPageOption((org.soldier.platform.page.IndexedPageOption)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case OPTION:
        return getOption();

      case PAGE_OPTION:
        return getPageOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case OPTION:
        return isSetOption();
      case PAGE_OPTION:
        return isSetPageOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQuotationAccountSupport_args)
        return this.equals((reqQuotationAccountSupport_args)that);
      return false;
    }

    public boolean equals(reqQuotationAccountSupport_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      boolean this_present_pageOption = true && this.isSetPageOption();
      boolean that_present_pageOption = true && that.isSetPageOption();
      if (this_present_pageOption || that_present_pageOption) {
        if (!(this_present_pageOption && that_present_pageOption))
          return false;
        if (!this.pageOption.equals(that.pageOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQuotationAccountSupport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageOption()).compareTo(other.isSetPageOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageOption, other.pageOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQuotationAccountSupport_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageOption:");
      if (this.pageOption == null) {
        sb.append("null");
      } else {
        sb.append(this.pageOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (option != null) {
        option.validate();
      }
      if (pageOption != null) {
        pageOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQuotationAccountSupport_argsStandardSchemeFactory implements SchemeFactory {
      public reqQuotationAccountSupport_argsStandardScheme getScheme() {
        return new reqQuotationAccountSupport_argsStandardScheme();
      }
    }

    private static class reqQuotationAccountSupport_argsStandardScheme extends StandardScheme<reqQuotationAccountSupport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQuotationAccountSupport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.option = new xueqiao.quotation.account.thriftapi.ReqQuotationAccountSupportOption();
                struct.option.read(iprot);
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
                struct.pageOption.read(iprot);
                struct.setPageOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQuotationAccountSupport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          struct.option.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageOption != null) {
          oprot.writeFieldBegin(PAGE_OPTION_FIELD_DESC);
          struct.pageOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQuotationAccountSupport_argsTupleSchemeFactory implements SchemeFactory {
      public reqQuotationAccountSupport_argsTupleScheme getScheme() {
        return new reqQuotationAccountSupport_argsTupleScheme();
      }
    }

    private static class reqQuotationAccountSupport_argsTupleScheme extends TupleScheme<reqQuotationAccountSupport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQuotationAccountSupport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetOption()) {
          optionals.set(1);
        }
        if (struct.isSetPageOption()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetOption()) {
          struct.option.write(oprot);
        }
        if (struct.isSetPageOption()) {
          struct.pageOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQuotationAccountSupport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.option = new xueqiao.quotation.account.thriftapi.ReqQuotationAccountSupportOption();
          struct.option.read(iprot);
          struct.setOptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
          struct.pageOption.read(iprot);
          struct.setPageOptionIsSet(true);
        }
      }
    }

  }

  public static class reqQuotationAccountSupport_result implements org.apache.thrift.TBase<reqQuotationAccountSupport_result, reqQuotationAccountSupport_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQuotationAccountSupport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQuotationAccountSupport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQuotationAccountSupport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQuotationAccountSupport_resultTupleSchemeFactory());
    }

    public xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQuotationAccountSupport_result.class, metaDataMap);
    }

    public reqQuotationAccountSupport_result() {
    }

    public reqQuotationAccountSupport_result(
      xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQuotationAccountSupport_result(reqQuotationAccountSupport_result other) {
      if (other.isSetSuccess()) {
        this.success = new xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public reqQuotationAccountSupport_result deepCopy() {
      return new reqQuotationAccountSupport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage getSuccess() {
      return this.success;
    }

    public reqQuotationAccountSupport_result setSuccess(xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public reqQuotationAccountSupport_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQuotationAccountSupport_result)
        return this.equals((reqQuotationAccountSupport_result)that);
      return false;
    }

    public boolean equals(reqQuotationAccountSupport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQuotationAccountSupport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQuotationAccountSupport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQuotationAccountSupport_resultStandardSchemeFactory implements SchemeFactory {
      public reqQuotationAccountSupport_resultStandardScheme getScheme() {
        return new reqQuotationAccountSupport_resultStandardScheme();
      }
    }

    private static class reqQuotationAccountSupport_resultStandardScheme extends StandardScheme<reqQuotationAccountSupport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQuotationAccountSupport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQuotationAccountSupport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQuotationAccountSupport_resultTupleSchemeFactory implements SchemeFactory {
      public reqQuotationAccountSupport_resultTupleScheme getScheme() {
        return new reqQuotationAccountSupport_resultTupleScheme();
      }
    }

    private static class reqQuotationAccountSupport_resultTupleScheme extends TupleScheme<reqQuotationAccountSupport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQuotationAccountSupport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQuotationAccountSupport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new xueqiao.quotation.account.thriftapi.QuotationAccountSupportPage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class setCommodityRegisterOrderIndex_args implements org.apache.thrift.TBase<setCommodityRegisterOrderIndex_args, setCommodityRegisterOrderIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<setCommodityRegisterOrderIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCommodityRegisterOrderIndex_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PLATFORM_ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("platformEnv", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ORDER_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("orderIndex", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setCommodityRegisterOrderIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setCommodityRegisterOrderIndex_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public int sledCommodityId; // required
    /**
     * 
     * @see xueqiao.quotation.account.thriftapi.QuotationPlatformEnv
     */
    public xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv; // required
    public int orderIndex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      SLED_COMMODITY_ID((short)2, "sledCommodityId"),
      /**
       * 
       * @see xueqiao.quotation.account.thriftapi.QuotationPlatformEnv
       */
      PLATFORM_ENV((short)3, "platformEnv"),
      ORDER_INDEX((short)4, "orderIndex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // SLED_COMMODITY_ID
            return SLED_COMMODITY_ID;
          case 3: // PLATFORM_ENV
            return PLATFORM_ENV;
          case 4: // ORDER_INDEX
            return ORDER_INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SLEDCOMMODITYID_ISSET_ID = 0;
    private static final int __ORDERINDEX_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM_ENV, new org.apache.thrift.meta_data.FieldMetaData("platformEnv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.quotation.account.thriftapi.QuotationPlatformEnv.class)));
      tmpMap.put(_Fields.ORDER_INDEX, new org.apache.thrift.meta_data.FieldMetaData("orderIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCommodityRegisterOrderIndex_args.class, metaDataMap);
    }

    public setCommodityRegisterOrderIndex_args() {
    }

    public setCommodityRegisterOrderIndex_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      int sledCommodityId,
      xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv,
      int orderIndex)
    {
      this();
      this.platformArgs = platformArgs;
      this.sledCommodityId = sledCommodityId;
      setSledCommodityIdIsSet(true);
      this.platformEnv = platformEnv;
      this.orderIndex = orderIndex;
      setOrderIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setCommodityRegisterOrderIndex_args(setCommodityRegisterOrderIndex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      this.sledCommodityId = other.sledCommodityId;
      if (other.isSetPlatformEnv()) {
        this.platformEnv = other.platformEnv;
      }
      this.orderIndex = other.orderIndex;
    }

    public setCommodityRegisterOrderIndex_args deepCopy() {
      return new setCommodityRegisterOrderIndex_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      setSledCommodityIdIsSet(false);
      this.sledCommodityId = 0;
      this.platformEnv = null;
      setOrderIndexIsSet(false);
      this.orderIndex = 0;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public setCommodityRegisterOrderIndex_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public int getSledCommodityId() {
      return this.sledCommodityId;
    }

    public setCommodityRegisterOrderIndex_args setSledCommodityId(int sledCommodityId) {
      this.sledCommodityId = sledCommodityId;
      setSledCommodityIdIsSet(true);
      return this;
    }

    public void unsetSledCommodityId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
    }

    /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
    public boolean isSetSledCommodityId() {
      return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
    }

    public void setSledCommodityIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
    }

    /**
     * 
     * @see xueqiao.quotation.account.thriftapi.QuotationPlatformEnv
     */
    public xueqiao.quotation.account.thriftapi.QuotationPlatformEnv getPlatformEnv() {
      return this.platformEnv;
    }

    /**
     * 
     * @see xueqiao.quotation.account.thriftapi.QuotationPlatformEnv
     */
    public setCommodityRegisterOrderIndex_args setPlatformEnv(xueqiao.quotation.account.thriftapi.QuotationPlatformEnv platformEnv) {
      this.platformEnv = platformEnv;
      return this;
    }

    public void unsetPlatformEnv() {
      this.platformEnv = null;
    }

    /** Returns true if field platformEnv is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformEnv() {
      return this.platformEnv != null;
    }

    public void setPlatformEnvIsSet(boolean value) {
      if (!value) {
        this.platformEnv = null;
      }
    }

    public int getOrderIndex() {
      return this.orderIndex;
    }

    public setCommodityRegisterOrderIndex_args setOrderIndex(int orderIndex) {
      this.orderIndex = orderIndex;
      setOrderIndexIsSet(true);
      return this;
    }

    public void unsetOrderIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERINDEX_ISSET_ID);
    }

    /** Returns true if field orderIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __ORDERINDEX_ISSET_ID);
    }

    public void setOrderIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERINDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case SLED_COMMODITY_ID:
        if (value == null) {
          unsetSledCommodityId();
        } else {
          setSledCommodityId((Integer)value);
        }
        break;

      case PLATFORM_ENV:
        if (value == null) {
          unsetPlatformEnv();
        } else {
          setPlatformEnv((xueqiao.quotation.account.thriftapi.QuotationPlatformEnv)value);
        }
        break;

      case ORDER_INDEX:
        if (value == null) {
          unsetOrderIndex();
        } else {
          setOrderIndex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case SLED_COMMODITY_ID:
        return Integer.valueOf(getSledCommodityId());

      case PLATFORM_ENV:
        return getPlatformEnv();

      case ORDER_INDEX:
        return Integer.valueOf(getOrderIndex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case SLED_COMMODITY_ID:
        return isSetSledCommodityId();
      case PLATFORM_ENV:
        return isSetPlatformEnv();
      case ORDER_INDEX:
        return isSetOrderIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setCommodityRegisterOrderIndex_args)
        return this.equals((setCommodityRegisterOrderIndex_args)that);
      return false;
    }

    public boolean equals(setCommodityRegisterOrderIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_sledCommodityId = true;
      boolean that_present_sledCommodityId = true;
      if (this_present_sledCommodityId || that_present_sledCommodityId) {
        if (!(this_present_sledCommodityId && that_present_sledCommodityId))
          return false;
        if (this.sledCommodityId != that.sledCommodityId)
          return false;
      }

      boolean this_present_platformEnv = true && this.isSetPlatformEnv();
      boolean that_present_platformEnv = true && that.isSetPlatformEnv();
      if (this_present_platformEnv || that_present_platformEnv) {
        if (!(this_present_platformEnv && that_present_platformEnv))
          return false;
        if (!this.platformEnv.equals(that.platformEnv))
          return false;
      }

      boolean this_present_orderIndex = true;
      boolean that_present_orderIndex = true;
      if (this_present_orderIndex || that_present_orderIndex) {
        if (!(this_present_orderIndex && that_present_orderIndex))
          return false;
        if (this.orderIndex != that.orderIndex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setCommodityRegisterOrderIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSledCommodityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatformEnv()).compareTo(other.isSetPlatformEnv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformEnv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformEnv, other.platformEnv);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderIndex()).compareTo(other.isSetOrderIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderIndex, other.orderIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setCommodityRegisterOrderIndex_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platformEnv:");
      if (this.platformEnv == null) {
        sb.append("null");
      } else {
        sb.append(this.platformEnv);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderIndex:");
      sb.append(this.orderIndex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setCommodityRegisterOrderIndex_argsStandardSchemeFactory implements SchemeFactory {
      public setCommodityRegisterOrderIndex_argsStandardScheme getScheme() {
        return new setCommodityRegisterOrderIndex_argsStandardScheme();
      }
    }

    private static class setCommodityRegisterOrderIndex_argsStandardScheme extends StandardScheme<setCommodityRegisterOrderIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setCommodityRegisterOrderIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SLED_COMMODITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sledCommodityId = iprot.readI32();
                struct.setSledCommodityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PLATFORM_ENV
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.platformEnv = xueqiao.quotation.account.thriftapi.QuotationPlatformEnv.findByValue(iprot.readI32());
                struct.setPlatformEnvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ORDER_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.orderIndex = iprot.readI32();
                struct.setOrderIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setCommodityRegisterOrderIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI32(struct.sledCommodityId);
        oprot.writeFieldEnd();
        if (struct.platformEnv != null) {
          oprot.writeFieldBegin(PLATFORM_ENV_FIELD_DESC);
          oprot.writeI32(struct.platformEnv.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ORDER_INDEX_FIELD_DESC);
        oprot.writeI32(struct.orderIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setCommodityRegisterOrderIndex_argsTupleSchemeFactory implements SchemeFactory {
      public setCommodityRegisterOrderIndex_argsTupleScheme getScheme() {
        return new setCommodityRegisterOrderIndex_argsTupleScheme();
      }
    }

    private static class setCommodityRegisterOrderIndex_argsTupleScheme extends TupleScheme<setCommodityRegisterOrderIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setCommodityRegisterOrderIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetSledCommodityId()) {
          optionals.set(1);
        }
        if (struct.isSetPlatformEnv()) {
          optionals.set(2);
        }
        if (struct.isSetOrderIndex()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetSledCommodityId()) {
          oprot.writeI32(struct.sledCommodityId);
        }
        if (struct.isSetPlatformEnv()) {
          oprot.writeI32(struct.platformEnv.getValue());
        }
        if (struct.isSetOrderIndex()) {
          oprot.writeI32(struct.orderIndex);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setCommodityRegisterOrderIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sledCommodityId = iprot.readI32();
          struct.setSledCommodityIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.platformEnv = xueqiao.quotation.account.thriftapi.QuotationPlatformEnv.findByValue(iprot.readI32());
          struct.setPlatformEnvIsSet(true);
        }
        if (incoming.get(3)) {
          struct.orderIndex = iprot.readI32();
          struct.setOrderIndexIsSet(true);
        }
      }
    }

  }

  public static class setCommodityRegisterOrderIndex_result implements org.apache.thrift.TBase<setCommodityRegisterOrderIndex_result, setCommodityRegisterOrderIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<setCommodityRegisterOrderIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCommodityRegisterOrderIndex_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setCommodityRegisterOrderIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setCommodityRegisterOrderIndex_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCommodityRegisterOrderIndex_result.class, metaDataMap);
    }

    public setCommodityRegisterOrderIndex_result() {
    }

    public setCommodityRegisterOrderIndex_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setCommodityRegisterOrderIndex_result(setCommodityRegisterOrderIndex_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public setCommodityRegisterOrderIndex_result deepCopy() {
      return new setCommodityRegisterOrderIndex_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public setCommodityRegisterOrderIndex_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setCommodityRegisterOrderIndex_result)
        return this.equals((setCommodityRegisterOrderIndex_result)that);
      return false;
    }

    public boolean equals(setCommodityRegisterOrderIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setCommodityRegisterOrderIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setCommodityRegisterOrderIndex_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setCommodityRegisterOrderIndex_resultStandardSchemeFactory implements SchemeFactory {
      public setCommodityRegisterOrderIndex_resultStandardScheme getScheme() {
        return new setCommodityRegisterOrderIndex_resultStandardScheme();
      }
    }

    private static class setCommodityRegisterOrderIndex_resultStandardScheme extends StandardScheme<setCommodityRegisterOrderIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setCommodityRegisterOrderIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setCommodityRegisterOrderIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setCommodityRegisterOrderIndex_resultTupleSchemeFactory implements SchemeFactory {
      public setCommodityRegisterOrderIndex_resultTupleScheme getScheme() {
        return new setCommodityRegisterOrderIndex_resultTupleScheme();
      }
    }

    private static class setCommodityRegisterOrderIndex_resultTupleScheme extends TupleScheme<setCommodityRegisterOrderIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setCommodityRegisterOrderIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setCommodityRegisterOrderIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

}
