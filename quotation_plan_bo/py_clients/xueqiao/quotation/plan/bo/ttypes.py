#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes
import page.ttypes
import xueqiao.quotation.account.thriftapi.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class EQuotationPlanBoErrorCode:
  ERROR_GENPREVIEW_ISHANDING = 1001
  ERROR_PREVIEW_NOTEXIST = 1002

  _VALUES_TO_NAMES = {
    1001: "ERROR_GENPREVIEW_ISHANDING",
    1002: "ERROR_PREVIEW_NOTEXIST",
  }

  _NAMES_TO_VALUES = {
    "ERROR_GENPREVIEW_ISHANDING": 1001,
    "ERROR_PREVIEW_NOTEXIST": 1002,
  }

class EGenPreviewStatus:
  PREVIEW_EMPTY = 0
  PREVIEW_GENTASK_RUNNING = 1
  PREVIEW_FINISHED = 2
  PREVIEW_GENFAILED = 3

  _VALUES_TO_NAMES = {
    0: "PREVIEW_EMPTY",
    1: "PREVIEW_GENTASK_RUNNING",
    2: "PREVIEW_FINISHED",
    3: "PREVIEW_GENFAILED",
  }

  _NAMES_TO_VALUES = {
    "PREVIEW_EMPTY": 0,
    "PREVIEW_GENTASK_RUNNING": 1,
    "PREVIEW_FINISHED": 2,
    "PREVIEW_GENFAILED": 3,
  }


class SubscribeAccountClass:
  """
  订阅账号类

  Attributes:
   - subscribeNum
   - quotationAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'subscribeNum', None, None, ), # 1
    (2, TType.I64, 'quotationAccountId', None, None, ), # 2
  )

  def __init__(self, subscribeNum=None, quotationAccountId=None,):
    self.subscribeNum = subscribeNum
    self.quotationAccountId = quotationAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.subscribeNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.quotationAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubscribeAccountClass')
    if self.subscribeNum is not None:
      oprot.writeFieldBegin('subscribeNum', TType.I32, 1)
      oprot.writeI32(self.subscribeNum)
      oprot.writeFieldEnd()
    if self.quotationAccountId is not None:
      oprot.writeFieldBegin('quotationAccountId', TType.I64, 2)
      oprot.writeI64(self.quotationAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubscribeCommodityClass:
  """
  订阅商品订阅类， 订阅条目需要在每天具体实例化

  Attributes:
   - classId
   - sledExchangeMic
   - sledCommodityId
   - sledCommodityType
   - sledCommodityCode
   - platformEnv
   - activeSubscribeNum
   - inActiveSubscribeNum
   - subscribeAccounts
   - createTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'classId', None, None, ), # 1
    (2, TType.STRING, 'sledExchangeMic', None, None, ), # 2
    (3, TType.I64, 'sledCommodityId', None, None, ), # 3
    (4, TType.I16, 'sledCommodityType', None, None, ), # 4
    (5, TType.STRING, 'sledCommodityCode', None, None, ), # 5
    (6, TType.I32, 'platformEnv', None, None, ), # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I32, 'activeSubscribeNum', None, None, ), # 10
    (11, TType.I32, 'inActiveSubscribeNum', None, None, ), # 11
    None, # 12
    (13, TType.LIST, 'subscribeAccounts', (TType.LIST,(TType.STRUCT,(SubscribeAccountClass, SubscribeAccountClass.thrift_spec))), None, ), # 13
    None, # 14
    (15, TType.I64, 'createTimestampMs', None, None, ), # 15
  )

  def __init__(self, classId=None, sledExchangeMic=None, sledCommodityId=None, sledCommodityType=None, sledCommodityCode=None, platformEnv=None, activeSubscribeNum=None, inActiveSubscribeNum=None, subscribeAccounts=None, createTimestampMs=None,):
    self.classId = classId
    self.sledExchangeMic = sledExchangeMic
    self.sledCommodityId = sledCommodityId
    self.sledCommodityType = sledCommodityType
    self.sledCommodityCode = sledCommodityCode
    self.platformEnv = platformEnv
    self.activeSubscribeNum = activeSubscribeNum
    self.inActiveSubscribeNum = inActiveSubscribeNum
    self.subscribeAccounts = subscribeAccounts
    self.createTimestampMs = createTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.classId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sledExchangeMic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sledCommodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.sledCommodityType = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sledCommodityCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.platformEnv = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.activeSubscribeNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.inActiveSubscribeNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.subscribeAccounts = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = []
            (_etype9, _size6) = iprot.readListBegin()
            for _i10 in xrange(_size6):
              _elem11 = SubscribeAccountClass()
              _elem11.read(iprot)
              _elem5.append(_elem11)
            iprot.readListEnd()
            self.subscribeAccounts.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubscribeCommodityClass')
    if self.classId is not None:
      oprot.writeFieldBegin('classId', TType.I64, 1)
      oprot.writeI64(self.classId)
      oprot.writeFieldEnd()
    if self.sledExchangeMic is not None:
      oprot.writeFieldBegin('sledExchangeMic', TType.STRING, 2)
      oprot.writeString(self.sledExchangeMic)
      oprot.writeFieldEnd()
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I64, 3)
      oprot.writeI64(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.sledCommodityType is not None:
      oprot.writeFieldBegin('sledCommodityType', TType.I16, 4)
      oprot.writeI16(self.sledCommodityType)
      oprot.writeFieldEnd()
    if self.sledCommodityCode is not None:
      oprot.writeFieldBegin('sledCommodityCode', TType.STRING, 5)
      oprot.writeString(self.sledCommodityCode)
      oprot.writeFieldEnd()
    if self.platformEnv is not None:
      oprot.writeFieldBegin('platformEnv', TType.I32, 6)
      oprot.writeI32(self.platformEnv)
      oprot.writeFieldEnd()
    if self.activeSubscribeNum is not None:
      oprot.writeFieldBegin('activeSubscribeNum', TType.I32, 10)
      oprot.writeI32(self.activeSubscribeNum)
      oprot.writeFieldEnd()
    if self.inActiveSubscribeNum is not None:
      oprot.writeFieldBegin('inActiveSubscribeNum', TType.I32, 11)
      oprot.writeI32(self.inActiveSubscribeNum)
      oprot.writeFieldEnd()
    if self.subscribeAccounts is not None:
      oprot.writeFieldBegin('subscribeAccounts', TType.LIST, 13)
      oprot.writeListBegin(TType.LIST, len(self.subscribeAccounts))
      for iter12 in self.subscribeAccounts:
        oprot.writeListBegin(TType.STRUCT, len(iter12))
        for iter13 in iter12:
          iter13.write(oprot)
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 15)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubscribeContractItem:
  """
  实际每天产生的订阅条目

  Attributes:
   - itemId
   - classId
   - sledExchangeMic
   - sledCommodityId
   - sledCommodityType
   - sledCommodityCode
   - sledContractCode
   - sledContractId
   - platformEnv
   - quotationAccountId
   - isForActive
   - createTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'itemId', None, None, ), # 1
    (2, TType.I64, 'classId', None, None, ), # 2
    (3, TType.STRING, 'sledExchangeMic', None, None, ), # 3
    (4, TType.I64, 'sledCommodityId', None, None, ), # 4
    (5, TType.I16, 'sledCommodityType', None, None, ), # 5
    (6, TType.STRING, 'sledCommodityCode', None, None, ), # 6
    (7, TType.STRING, 'sledContractCode', None, None, ), # 7
    (8, TType.I64, 'sledContractId', None, None, ), # 8
    (9, TType.I32, 'platformEnv', None, None, ), # 9
    None, # 10
    None, # 11
    (12, TType.I64, 'quotationAccountId', None, None, ), # 12
    (13, TType.BOOL, 'isForActive', None, None, ), # 13
    (14, TType.I64, 'createTimestampMs', None, None, ), # 14
  )

  def __init__(self, itemId=None, classId=None, sledExchangeMic=None, sledCommodityId=None, sledCommodityType=None, sledCommodityCode=None, sledContractCode=None, sledContractId=None, platformEnv=None, quotationAccountId=None, isForActive=None, createTimestampMs=None,):
    self.itemId = itemId
    self.classId = classId
    self.sledExchangeMic = sledExchangeMic
    self.sledCommodityId = sledCommodityId
    self.sledCommodityType = sledCommodityType
    self.sledCommodityCode = sledCommodityCode
    self.sledContractCode = sledContractCode
    self.sledContractId = sledContractId
    self.platformEnv = platformEnv
    self.quotationAccountId = quotationAccountId
    self.isForActive = isForActive
    self.createTimestampMs = createTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.itemId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.classId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.sledExchangeMic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.sledCommodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.sledCommodityType = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.sledCommodityCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.sledContractCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.platformEnv = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.quotationAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BOOL:
          self.isForActive = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubscribeContractItem')
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.I64, 1)
      oprot.writeI64(self.itemId)
      oprot.writeFieldEnd()
    if self.classId is not None:
      oprot.writeFieldBegin('classId', TType.I64, 2)
      oprot.writeI64(self.classId)
      oprot.writeFieldEnd()
    if self.sledExchangeMic is not None:
      oprot.writeFieldBegin('sledExchangeMic', TType.STRING, 3)
      oprot.writeString(self.sledExchangeMic)
      oprot.writeFieldEnd()
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I64, 4)
      oprot.writeI64(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.sledCommodityType is not None:
      oprot.writeFieldBegin('sledCommodityType', TType.I16, 5)
      oprot.writeI16(self.sledCommodityType)
      oprot.writeFieldEnd()
    if self.sledCommodityCode is not None:
      oprot.writeFieldBegin('sledCommodityCode', TType.STRING, 6)
      oprot.writeString(self.sledCommodityCode)
      oprot.writeFieldEnd()
    if self.sledContractCode is not None:
      oprot.writeFieldBegin('sledContractCode', TType.STRING, 7)
      oprot.writeString(self.sledContractCode)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 8)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.platformEnv is not None:
      oprot.writeFieldBegin('platformEnv', TType.I32, 9)
      oprot.writeI32(self.platformEnv)
      oprot.writeFieldEnd()
    if self.quotationAccountId is not None:
      oprot.writeFieldBegin('quotationAccountId', TType.I64, 12)
      oprot.writeI64(self.quotationAccountId)
      oprot.writeFieldEnd()
    if self.isForActive is not None:
      oprot.writeFieldBegin('isForActive', TType.BOOL, 13)
      oprot.writeBool(self.isForActive)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 14)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GenPreviewState:
  """
  Attributes:
   - status
   - stateMsg
   - lastUpdateTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'status', None, None, ), # 1
    (2, TType.STRING, 'stateMsg', None, None, ), # 2
    (3, TType.I64, 'lastUpdateTimestampMs', None, None, ), # 3
  )

  def __init__(self, status=None, stateMsg=None, lastUpdateTimestampMs=None,):
    self.status = status
    self.stateMsg = stateMsg
    self.lastUpdateTimestampMs = lastUpdateTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.stateMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.lastUpdateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GenPreviewState')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 1)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.stateMsg is not None:
      oprot.writeFieldBegin('stateMsg', TType.STRING, 2)
      oprot.writeString(self.stateMsg)
      oprot.writeFieldEnd()
    if self.lastUpdateTimestampMs is not None:
      oprot.writeFieldBegin('lastUpdateTimestampMs', TType.I64, 3)
      oprot.writeI64(self.lastUpdateTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuerySubscribeContractItemOption:
  """
  Attributes:
   - quotationAccountIds
   - sledCommodityIds
   - platformEnv
  """

  thrift_spec = (
    None, # 0
    (1, TType.SET, 'quotationAccountIds', (TType.I64,None), None, ), # 1
    (2, TType.SET, 'sledCommodityIds', (TType.I64,None), None, ), # 2
    (3, TType.I32, 'platformEnv', None, None, ), # 3
  )

  def __init__(self, quotationAccountIds=None, sledCommodityIds=None, platformEnv=None,):
    self.quotationAccountIds = quotationAccountIds
    self.sledCommodityIds = sledCommodityIds
    self.platformEnv = platformEnv

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.quotationAccountIds = set()
          (_etype17, _size14) = iprot.readSetBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI64();
            self.quotationAccountIds.add(_elem19)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.SET:
          self.sledCommodityIds = set()
          (_etype23, _size20) = iprot.readSetBegin()
          for _i24 in xrange(_size20):
            _elem25 = iprot.readI64();
            self.sledCommodityIds.add(_elem25)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.platformEnv = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuerySubscribeContractItemOption')
    if self.quotationAccountIds is not None:
      oprot.writeFieldBegin('quotationAccountIds', TType.SET, 1)
      oprot.writeSetBegin(TType.I64, len(self.quotationAccountIds))
      for iter26 in self.quotationAccountIds:
        oprot.writeI64(iter26)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.sledCommodityIds is not None:
      oprot.writeFieldBegin('sledCommodityIds', TType.SET, 2)
      oprot.writeSetBegin(TType.I64, len(self.sledCommodityIds))
      for iter27 in self.sledCommodityIds:
        oprot.writeI64(iter27)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.platformEnv is not None:
      oprot.writeFieldBegin('platformEnv', TType.I32, 3)
      oprot.writeI32(self.platformEnv)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubscribeContractItemPage:
  """
  Attributes:
   - totalCount
   - resultList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalCount', None, None, ), # 1
    (2, TType.LIST, 'resultList', (TType.STRUCT,(SubscribeContractItem, SubscribeContractItem.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalCount=None, resultList=None,):
    self.totalCount = totalCount
    self.resultList = resultList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.resultList = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = SubscribeContractItem()
            _elem33.read(iprot)
            self.resultList.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubscribeContractItemPage')
    if self.totalCount is not None:
      oprot.writeFieldBegin('totalCount', TType.I32, 1)
      oprot.writeI32(self.totalCount)
      oprot.writeFieldEnd()
    if self.resultList is not None:
      oprot.writeFieldBegin('resultList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.resultList))
      for iter34 in self.resultList:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
