/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SledExchangeMapping implements org.apache.thrift.TBase<SledExchangeMapping, SledExchangeMapping._Fields>, java.io.Serializable, Cloneable, Comparable<SledExchangeMapping> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SledExchangeMapping");

  private static final org.apache.thrift.protocol.TField MAPPING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mappingId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_EXCHANGE_MIC_FIELD_DESC = new org.apache.thrift.protocol.TField("sledExchangeMic", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TECH_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("techPlatform", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TECH_PLATFORM_EXCHANGE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("techPlatformExchangeCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestamp", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SledExchangeMappingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SledExchangeMappingTupleSchemeFactory());
  }

  public int mappingId; // optional
  public String sledExchangeMic; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform techPlatform; // optional
  public String techPlatformExchangeCode; // optional
  public long createTimestamp; // optional
  public long lastModifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAPPING_ID((short)1, "mappingId"),
    SLED_EXCHANGE_MIC((short)2, "sledExchangeMic"),
    /**
     * 
     * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
     */
    TECH_PLATFORM((short)3, "techPlatform"),
    TECH_PLATFORM_EXCHANGE_CODE((short)4, "techPlatformExchangeCode"),
    CREATE_TIMESTAMP((short)5, "createTimestamp"),
    LAST_MODIFY_TIMESTAMP((short)6, "lastModifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAPPING_ID
          return MAPPING_ID;
        case 2: // SLED_EXCHANGE_MIC
          return SLED_EXCHANGE_MIC;
        case 3: // TECH_PLATFORM
          return TECH_PLATFORM;
        case 4: // TECH_PLATFORM_EXCHANGE_CODE
          return TECH_PLATFORM_EXCHANGE_CODE;
        case 5: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 6: // LAST_MODIFY_TIMESTAMP
          return LAST_MODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAPPINGID_ISSET_ID = 0;
  private static final int __CREATETIMESTAMP_ISSET_ID = 1;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MAPPING_ID,_Fields.SLED_EXCHANGE_MIC,_Fields.TECH_PLATFORM,_Fields.TECH_PLATFORM_EXCHANGE_CODE,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAPPING_ID, new org.apache.thrift.meta_data.FieldMetaData("mappingId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_EXCHANGE_MIC, new org.apache.thrift.meta_data.FieldMetaData("sledExchangeMic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TECH_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("techPlatform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform.class)));
    tmpMap.put(_Fields.TECH_PLATFORM_EXCHANGE_CODE, new org.apache.thrift.meta_data.FieldMetaData("techPlatformExchangeCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SledExchangeMapping.class, metaDataMap);
  }

  public SledExchangeMapping() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SledExchangeMapping(SledExchangeMapping other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mappingId = other.mappingId;
    if (other.isSetSledExchangeMic()) {
      this.sledExchangeMic = other.sledExchangeMic;
    }
    if (other.isSetTechPlatform()) {
      this.techPlatform = other.techPlatform;
    }
    if (other.isSetTechPlatformExchangeCode()) {
      this.techPlatformExchangeCode = other.techPlatformExchangeCode;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastModifyTimestamp = other.lastModifyTimestamp;
  }

  public SledExchangeMapping deepCopy() {
    return new SledExchangeMapping(this);
  }

  @Override
  public void clear() {
    setMappingIdIsSet(false);
    this.mappingId = 0;
    this.sledExchangeMic = null;
    this.techPlatform = null;
    this.techPlatformExchangeCode = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModifyTimestampIsSet(false);
    this.lastModifyTimestamp = 0;
  }

  public int getMappingId() {
    return this.mappingId;
  }

  public SledExchangeMapping setMappingId(int mappingId) {
    this.mappingId = mappingId;
    setMappingIdIsSet(true);
    return this;
  }

  public void unsetMappingId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAPPINGID_ISSET_ID);
  }

  /** Returns true if field mappingId is set (has been assigned a value) and false otherwise */
  public boolean isSetMappingId() {
    return EncodingUtils.testBit(__isset_bitfield, __MAPPINGID_ISSET_ID);
  }

  public void setMappingIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAPPINGID_ISSET_ID, value);
  }

  public String getSledExchangeMic() {
    return this.sledExchangeMic;
  }

  public SledExchangeMapping setSledExchangeMic(String sledExchangeMic) {
    this.sledExchangeMic = sledExchangeMic;
    return this;
  }

  public void unsetSledExchangeMic() {
    this.sledExchangeMic = null;
  }

  /** Returns true if field sledExchangeMic is set (has been assigned a value) and false otherwise */
  public boolean isSetSledExchangeMic() {
    return this.sledExchangeMic != null;
  }

  public void setSledExchangeMicIsSet(boolean value) {
    if (!value) {
      this.sledExchangeMic = null;
    }
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform getTechPlatform() {
    return this.techPlatform;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
   */
  public SledExchangeMapping setTechPlatform(com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform techPlatform) {
    this.techPlatform = techPlatform;
    return this;
  }

  public void unsetTechPlatform() {
    this.techPlatform = null;
  }

  /** Returns true if field techPlatform is set (has been assigned a value) and false otherwise */
  public boolean isSetTechPlatform() {
    return this.techPlatform != null;
  }

  public void setTechPlatformIsSet(boolean value) {
    if (!value) {
      this.techPlatform = null;
    }
  }

  public String getTechPlatformExchangeCode() {
    return this.techPlatformExchangeCode;
  }

  public SledExchangeMapping setTechPlatformExchangeCode(String techPlatformExchangeCode) {
    this.techPlatformExchangeCode = techPlatformExchangeCode;
    return this;
  }

  public void unsetTechPlatformExchangeCode() {
    this.techPlatformExchangeCode = null;
  }

  /** Returns true if field techPlatformExchangeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetTechPlatformExchangeCode() {
    return this.techPlatformExchangeCode != null;
  }

  public void setTechPlatformExchangeCodeIsSet(boolean value) {
    if (!value) {
      this.techPlatformExchangeCode = null;
    }
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public SledExchangeMapping setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModifyTimestamp() {
    return this.lastModifyTimestamp;
  }

  public SledExchangeMapping setLastModifyTimestamp(long lastModifyTimestamp) {
    this.lastModifyTimestamp = lastModifyTimestamp;
    setLastModifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastModifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAPPING_ID:
      if (value == null) {
        unsetMappingId();
      } else {
        setMappingId((Integer)value);
      }
      break;

    case SLED_EXCHANGE_MIC:
      if (value == null) {
        unsetSledExchangeMic();
      } else {
        setSledExchangeMic((String)value);
      }
      break;

    case TECH_PLATFORM:
      if (value == null) {
        unsetTechPlatform();
      } else {
        setTechPlatform((com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform)value);
      }
      break;

    case TECH_PLATFORM_EXCHANGE_CODE:
      if (value == null) {
        unsetTechPlatformExchangeCode();
      } else {
        setTechPlatformExchangeCode((String)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastModifyTimestamp();
      } else {
        setLastModifyTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAPPING_ID:
      return Integer.valueOf(getMappingId());

    case SLED_EXCHANGE_MIC:
      return getSledExchangeMic();

    case TECH_PLATFORM:
      return getTechPlatform();

    case TECH_PLATFORM_EXCHANGE_CODE:
      return getTechPlatformExchangeCode();

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODIFY_TIMESTAMP:
      return Long.valueOf(getLastModifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAPPING_ID:
      return isSetMappingId();
    case SLED_EXCHANGE_MIC:
      return isSetSledExchangeMic();
    case TECH_PLATFORM:
      return isSetTechPlatform();
    case TECH_PLATFORM_EXCHANGE_CODE:
      return isSetTechPlatformExchangeCode();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODIFY_TIMESTAMP:
      return isSetLastModifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SledExchangeMapping)
      return this.equals((SledExchangeMapping)that);
    return false;
  }

  public boolean equals(SledExchangeMapping that) {
    if (that == null)
      return false;

    boolean this_present_mappingId = true && this.isSetMappingId();
    boolean that_present_mappingId = true && that.isSetMappingId();
    if (this_present_mappingId || that_present_mappingId) {
      if (!(this_present_mappingId && that_present_mappingId))
        return false;
      if (this.mappingId != that.mappingId)
        return false;
    }

    boolean this_present_sledExchangeMic = true && this.isSetSledExchangeMic();
    boolean that_present_sledExchangeMic = true && that.isSetSledExchangeMic();
    if (this_present_sledExchangeMic || that_present_sledExchangeMic) {
      if (!(this_present_sledExchangeMic && that_present_sledExchangeMic))
        return false;
      if (!this.sledExchangeMic.equals(that.sledExchangeMic))
        return false;
    }

    boolean this_present_techPlatform = true && this.isSetTechPlatform();
    boolean that_present_techPlatform = true && that.isSetTechPlatform();
    if (this_present_techPlatform || that_present_techPlatform) {
      if (!(this_present_techPlatform && that_present_techPlatform))
        return false;
      if (!this.techPlatform.equals(that.techPlatform))
        return false;
    }

    boolean this_present_techPlatformExchangeCode = true && this.isSetTechPlatformExchangeCode();
    boolean that_present_techPlatformExchangeCode = true && that.isSetTechPlatformExchangeCode();
    if (this_present_techPlatformExchangeCode || that_present_techPlatformExchangeCode) {
      if (!(this_present_techPlatformExchangeCode && that_present_techPlatformExchangeCode))
        return false;
      if (!this.techPlatformExchangeCode.equals(that.techPlatformExchangeCode))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModifyTimestamp = true && this.isSetLastModifyTimestamp();
    boolean that_present_lastModifyTimestamp = true && that.isSetLastModifyTimestamp();
    if (this_present_lastModifyTimestamp || that_present_lastModifyTimestamp) {
      if (!(this_present_lastModifyTimestamp && that_present_lastModifyTimestamp))
        return false;
      if (this.lastModifyTimestamp != that.lastModifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SledExchangeMapping other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMappingId()).compareTo(other.isSetMappingId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMappingId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mappingId, other.mappingId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledExchangeMic()).compareTo(other.isSetSledExchangeMic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledExchangeMic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledExchangeMic, other.sledExchangeMic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTechPlatform()).compareTo(other.isSetTechPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTechPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.techPlatform, other.techPlatform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTechPlatformExchangeCode()).compareTo(other.isSetTechPlatformExchangeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTechPlatformExchangeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.techPlatformExchangeCode, other.techPlatformExchangeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestamp()).compareTo(other.isSetLastModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestamp, other.lastModifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SledExchangeMapping(");
    boolean first = true;

    if (isSetMappingId()) {
      sb.append("mappingId:");
      sb.append(this.mappingId);
      first = false;
    }
    if (isSetSledExchangeMic()) {
      if (!first) sb.append(", ");
      sb.append("sledExchangeMic:");
      if (this.sledExchangeMic == null) {
        sb.append("null");
      } else {
        sb.append(this.sledExchangeMic);
      }
      first = false;
    }
    if (isSetTechPlatform()) {
      if (!first) sb.append(", ");
      sb.append("techPlatform:");
      if (this.techPlatform == null) {
        sb.append("null");
      } else {
        sb.append(this.techPlatform);
      }
      first = false;
    }
    if (isSetTechPlatformExchangeCode()) {
      if (!first) sb.append(", ");
      sb.append("techPlatformExchangeCode:");
      if (this.techPlatformExchangeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.techPlatformExchangeCode);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestamp:");
      sb.append(this.lastModifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SledExchangeMappingStandardSchemeFactory implements SchemeFactory {
    public SledExchangeMappingStandardScheme getScheme() {
      return new SledExchangeMappingStandardScheme();
    }
  }

  private static class SledExchangeMappingStandardScheme extends StandardScheme<SledExchangeMapping> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SledExchangeMapping struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAPPING_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mappingId = iprot.readI32();
              struct.setMappingIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_EXCHANGE_MIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledExchangeMic = iprot.readString();
              struct.setSledExchangeMicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TECH_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.techPlatform = com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform.findByValue(iprot.readI32());
              struct.setTechPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TECH_PLATFORM_EXCHANGE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.techPlatformExchangeCode = iprot.readString();
              struct.setTechPlatformExchangeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LAST_MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestamp = iprot.readI64();
              struct.setLastModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SledExchangeMapping struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetMappingId()) {
        oprot.writeFieldBegin(MAPPING_ID_FIELD_DESC);
        oprot.writeI32(struct.mappingId);
        oprot.writeFieldEnd();
      }
      if (struct.sledExchangeMic != null) {
        if (struct.isSetSledExchangeMic()) {
          oprot.writeFieldBegin(SLED_EXCHANGE_MIC_FIELD_DESC);
          oprot.writeString(struct.sledExchangeMic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.techPlatform != null) {
        if (struct.isSetTechPlatform()) {
          oprot.writeFieldBegin(TECH_PLATFORM_FIELD_DESC);
          oprot.writeI32(struct.techPlatform.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.techPlatformExchangeCode != null) {
        if (struct.isSetTechPlatformExchangeCode()) {
          oprot.writeFieldBegin(TECH_PLATFORM_EXCHANGE_CODE_FIELD_DESC);
          oprot.writeString(struct.techPlatformExchangeCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SledExchangeMappingTupleSchemeFactory implements SchemeFactory {
    public SledExchangeMappingTupleScheme getScheme() {
      return new SledExchangeMappingTupleScheme();
    }
  }

  private static class SledExchangeMappingTupleScheme extends TupleScheme<SledExchangeMapping> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SledExchangeMapping struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMappingId()) {
        optionals.set(0);
      }
      if (struct.isSetSledExchangeMic()) {
        optionals.set(1);
      }
      if (struct.isSetTechPlatform()) {
        optionals.set(2);
      }
      if (struct.isSetTechPlatformExchangeCode()) {
        optionals.set(3);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(4);
      }
      if (struct.isSetLastModifyTimestamp()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetMappingId()) {
        oprot.writeI32(struct.mappingId);
      }
      if (struct.isSetSledExchangeMic()) {
        oprot.writeString(struct.sledExchangeMic);
      }
      if (struct.isSetTechPlatform()) {
        oprot.writeI32(struct.techPlatform.getValue());
      }
      if (struct.isSetTechPlatformExchangeCode()) {
        oprot.writeString(struct.techPlatformExchangeCode);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeI64(struct.lastModifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SledExchangeMapping struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.mappingId = iprot.readI32();
        struct.setMappingIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledExchangeMic = iprot.readString();
        struct.setSledExchangeMicIsSet(true);
      }
      if (incoming.get(2)) {
        struct.techPlatform = com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform.findByValue(iprot.readI32());
        struct.setTechPlatformIsSet(true);
      }
      if (incoming.get(3)) {
        struct.techPlatformExchangeCode = iprot.readString();
        struct.setTechPlatformExchangeCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(5)) {
        struct.lastModifyTimestamp = iprot.readI64();
        struct.setLastModifyTimestampIsSet(true);
      }
    }
  }

}

