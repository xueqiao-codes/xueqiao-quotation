/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqSledCommodityTypeMappingOption implements org.apache.thrift.TBase<ReqSledCommodityTypeMappingOption, ReqSledCommodityTypeMappingOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqSledCommodityTypeMappingOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqSledCommodityTypeMappingOption");

  private static final org.apache.thrift.protocol.TField MAPPING_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("mappingIds", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TECH_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("techPlatform", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TECH_PLATFORM_COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("techPlatformCommodityType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PAGE_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pageOption", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqSledCommodityTypeMappingOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqSledCommodityTypeMappingOptionTupleSchemeFactory());
  }

  public Set<Integer> mappingIds; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.SledCommodityType
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.SledCommodityType sledCommodityType; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform techPlatform; // optional
  public String techPlatformCommodityType; // optional
  public org.soldier.platform.page.IndexedPageOption pageOption; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAPPING_IDS((short)1, "mappingIds"),
    /**
     * 
     * @see com.longsheng.xueqiao.contract.standard.thriftapi.SledCommodityType
     */
    SLED_COMMODITY_TYPE((short)2, "sledCommodityType"),
    /**
     * 
     * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
     */
    TECH_PLATFORM((short)3, "techPlatform"),
    TECH_PLATFORM_COMMODITY_TYPE((short)4, "techPlatformCommodityType"),
    PAGE_OPTION((short)5, "pageOption");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAPPING_IDS
          return MAPPING_IDS;
        case 2: // SLED_COMMODITY_TYPE
          return SLED_COMMODITY_TYPE;
        case 3: // TECH_PLATFORM
          return TECH_PLATFORM;
        case 4: // TECH_PLATFORM_COMMODITY_TYPE
          return TECH_PLATFORM_COMMODITY_TYPE;
        case 5: // PAGE_OPTION
          return PAGE_OPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.MAPPING_IDS,_Fields.SLED_COMMODITY_TYPE,_Fields.TECH_PLATFORM,_Fields.TECH_PLATFORM_COMMODITY_TYPE,_Fields.PAGE_OPTION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAPPING_IDS, new org.apache.thrift.meta_data.FieldMetaData("mappingIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SLED_COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.contract.standard.thriftapi.SledCommodityType.class)));
    tmpMap.put(_Fields.TECH_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("techPlatform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform.class)));
    tmpMap.put(_Fields.TECH_PLATFORM_COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("techPlatformCommodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_OPTION, new org.apache.thrift.meta_data.FieldMetaData("pageOption", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.page.IndexedPageOption.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqSledCommodityTypeMappingOption.class, metaDataMap);
  }

  public ReqSledCommodityTypeMappingOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqSledCommodityTypeMappingOption(ReqSledCommodityTypeMappingOption other) {
    if (other.isSetMappingIds()) {
      Set<Integer> __this__mappingIds = new HashSet<Integer>(other.mappingIds);
      this.mappingIds = __this__mappingIds;
    }
    if (other.isSetSledCommodityType()) {
      this.sledCommodityType = other.sledCommodityType;
    }
    if (other.isSetTechPlatform()) {
      this.techPlatform = other.techPlatform;
    }
    if (other.isSetTechPlatformCommodityType()) {
      this.techPlatformCommodityType = other.techPlatformCommodityType;
    }
    if (other.isSetPageOption()) {
      this.pageOption = new org.soldier.platform.page.IndexedPageOption(other.pageOption);
    }
  }

  public ReqSledCommodityTypeMappingOption deepCopy() {
    return new ReqSledCommodityTypeMappingOption(this);
  }

  @Override
  public void clear() {
    this.mappingIds = null;
    this.sledCommodityType = null;
    this.techPlatform = null;
    this.techPlatformCommodityType = null;
    this.pageOption = null;
  }

  public int getMappingIdsSize() {
    return (this.mappingIds == null) ? 0 : this.mappingIds.size();
  }

  public java.util.Iterator<Integer> getMappingIdsIterator() {
    return (this.mappingIds == null) ? null : this.mappingIds.iterator();
  }

  public void addToMappingIds(int elem) {
    if (this.mappingIds == null) {
      this.mappingIds = new HashSet<Integer>();
    }
    this.mappingIds.add(elem);
  }

  public Set<Integer> getMappingIds() {
    return this.mappingIds;
  }

  public ReqSledCommodityTypeMappingOption setMappingIds(Set<Integer> mappingIds) {
    this.mappingIds = mappingIds;
    return this;
  }

  public void unsetMappingIds() {
    this.mappingIds = null;
  }

  /** Returns true if field mappingIds is set (has been assigned a value) and false otherwise */
  public boolean isSetMappingIds() {
    return this.mappingIds != null;
  }

  public void setMappingIdsIsSet(boolean value) {
    if (!value) {
      this.mappingIds = null;
    }
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.SledCommodityType
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.SledCommodityType getSledCommodityType() {
    return this.sledCommodityType;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.SledCommodityType
   */
  public ReqSledCommodityTypeMappingOption setSledCommodityType(com.longsheng.xueqiao.contract.standard.thriftapi.SledCommodityType sledCommodityType) {
    this.sledCommodityType = sledCommodityType;
    return this;
  }

  public void unsetSledCommodityType() {
    this.sledCommodityType = null;
  }

  /** Returns true if field sledCommodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityType() {
    return this.sledCommodityType != null;
  }

  public void setSledCommodityTypeIsSet(boolean value) {
    if (!value) {
      this.sledCommodityType = null;
    }
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform getTechPlatform() {
    return this.techPlatform;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
   */
  public ReqSledCommodityTypeMappingOption setTechPlatform(com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform techPlatform) {
    this.techPlatform = techPlatform;
    return this;
  }

  public void unsetTechPlatform() {
    this.techPlatform = null;
  }

  /** Returns true if field techPlatform is set (has been assigned a value) and false otherwise */
  public boolean isSetTechPlatform() {
    return this.techPlatform != null;
  }

  public void setTechPlatformIsSet(boolean value) {
    if (!value) {
      this.techPlatform = null;
    }
  }

  public String getTechPlatformCommodityType() {
    return this.techPlatformCommodityType;
  }

  public ReqSledCommodityTypeMappingOption setTechPlatformCommodityType(String techPlatformCommodityType) {
    this.techPlatformCommodityType = techPlatformCommodityType;
    return this;
  }

  public void unsetTechPlatformCommodityType() {
    this.techPlatformCommodityType = null;
  }

  /** Returns true if field techPlatformCommodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetTechPlatformCommodityType() {
    return this.techPlatformCommodityType != null;
  }

  public void setTechPlatformCommodityTypeIsSet(boolean value) {
    if (!value) {
      this.techPlatformCommodityType = null;
    }
  }

  public org.soldier.platform.page.IndexedPageOption getPageOption() {
    return this.pageOption;
  }

  public ReqSledCommodityTypeMappingOption setPageOption(org.soldier.platform.page.IndexedPageOption pageOption) {
    this.pageOption = pageOption;
    return this;
  }

  public void unsetPageOption() {
    this.pageOption = null;
  }

  /** Returns true if field pageOption is set (has been assigned a value) and false otherwise */
  public boolean isSetPageOption() {
    return this.pageOption != null;
  }

  public void setPageOptionIsSet(boolean value) {
    if (!value) {
      this.pageOption = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAPPING_IDS:
      if (value == null) {
        unsetMappingIds();
      } else {
        setMappingIds((Set<Integer>)value);
      }
      break;

    case SLED_COMMODITY_TYPE:
      if (value == null) {
        unsetSledCommodityType();
      } else {
        setSledCommodityType((com.longsheng.xueqiao.contract.standard.thriftapi.SledCommodityType)value);
      }
      break;

    case TECH_PLATFORM:
      if (value == null) {
        unsetTechPlatform();
      } else {
        setTechPlatform((com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform)value);
      }
      break;

    case TECH_PLATFORM_COMMODITY_TYPE:
      if (value == null) {
        unsetTechPlatformCommodityType();
      } else {
        setTechPlatformCommodityType((String)value);
      }
      break;

    case PAGE_OPTION:
      if (value == null) {
        unsetPageOption();
      } else {
        setPageOption((org.soldier.platform.page.IndexedPageOption)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAPPING_IDS:
      return getMappingIds();

    case SLED_COMMODITY_TYPE:
      return getSledCommodityType();

    case TECH_PLATFORM:
      return getTechPlatform();

    case TECH_PLATFORM_COMMODITY_TYPE:
      return getTechPlatformCommodityType();

    case PAGE_OPTION:
      return getPageOption();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAPPING_IDS:
      return isSetMappingIds();
    case SLED_COMMODITY_TYPE:
      return isSetSledCommodityType();
    case TECH_PLATFORM:
      return isSetTechPlatform();
    case TECH_PLATFORM_COMMODITY_TYPE:
      return isSetTechPlatformCommodityType();
    case PAGE_OPTION:
      return isSetPageOption();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqSledCommodityTypeMappingOption)
      return this.equals((ReqSledCommodityTypeMappingOption)that);
    return false;
  }

  public boolean equals(ReqSledCommodityTypeMappingOption that) {
    if (that == null)
      return false;

    boolean this_present_mappingIds = true && this.isSetMappingIds();
    boolean that_present_mappingIds = true && that.isSetMappingIds();
    if (this_present_mappingIds || that_present_mappingIds) {
      if (!(this_present_mappingIds && that_present_mappingIds))
        return false;
      if (!this.mappingIds.equals(that.mappingIds))
        return false;
    }

    boolean this_present_sledCommodityType = true && this.isSetSledCommodityType();
    boolean that_present_sledCommodityType = true && that.isSetSledCommodityType();
    if (this_present_sledCommodityType || that_present_sledCommodityType) {
      if (!(this_present_sledCommodityType && that_present_sledCommodityType))
        return false;
      if (!this.sledCommodityType.equals(that.sledCommodityType))
        return false;
    }

    boolean this_present_techPlatform = true && this.isSetTechPlatform();
    boolean that_present_techPlatform = true && that.isSetTechPlatform();
    if (this_present_techPlatform || that_present_techPlatform) {
      if (!(this_present_techPlatform && that_present_techPlatform))
        return false;
      if (!this.techPlatform.equals(that.techPlatform))
        return false;
    }

    boolean this_present_techPlatformCommodityType = true && this.isSetTechPlatformCommodityType();
    boolean that_present_techPlatformCommodityType = true && that.isSetTechPlatformCommodityType();
    if (this_present_techPlatformCommodityType || that_present_techPlatformCommodityType) {
      if (!(this_present_techPlatformCommodityType && that_present_techPlatformCommodityType))
        return false;
      if (!this.techPlatformCommodityType.equals(that.techPlatformCommodityType))
        return false;
    }

    boolean this_present_pageOption = true && this.isSetPageOption();
    boolean that_present_pageOption = true && that.isSetPageOption();
    if (this_present_pageOption || that_present_pageOption) {
      if (!(this_present_pageOption && that_present_pageOption))
        return false;
      if (!this.pageOption.equals(that.pageOption))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqSledCommodityTypeMappingOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMappingIds()).compareTo(other.isSetMappingIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMappingIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mappingIds, other.mappingIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityType()).compareTo(other.isSetSledCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityType, other.sledCommodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTechPlatform()).compareTo(other.isSetTechPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTechPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.techPlatform, other.techPlatform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTechPlatformCommodityType()).compareTo(other.isSetTechPlatformCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTechPlatformCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.techPlatformCommodityType, other.techPlatformCommodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageOption()).compareTo(other.isSetPageOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageOption, other.pageOption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqSledCommodityTypeMappingOption(");
    boolean first = true;

    if (isSetMappingIds()) {
      sb.append("mappingIds:");
      if (this.mappingIds == null) {
        sb.append("null");
      } else {
        sb.append(this.mappingIds);
      }
      first = false;
    }
    if (isSetSledCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityType:");
      if (this.sledCommodityType == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityType);
      }
      first = false;
    }
    if (isSetTechPlatform()) {
      if (!first) sb.append(", ");
      sb.append("techPlatform:");
      if (this.techPlatform == null) {
        sb.append("null");
      } else {
        sb.append(this.techPlatform);
      }
      first = false;
    }
    if (isSetTechPlatformCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("techPlatformCommodityType:");
      if (this.techPlatformCommodityType == null) {
        sb.append("null");
      } else {
        sb.append(this.techPlatformCommodityType);
      }
      first = false;
    }
    if (isSetPageOption()) {
      if (!first) sb.append(", ");
      sb.append("pageOption:");
      if (this.pageOption == null) {
        sb.append("null");
      } else {
        sb.append(this.pageOption);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pageOption != null) {
      pageOption.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqSledCommodityTypeMappingOptionStandardSchemeFactory implements SchemeFactory {
    public ReqSledCommodityTypeMappingOptionStandardScheme getScheme() {
      return new ReqSledCommodityTypeMappingOptionStandardScheme();
    }
  }

  private static class ReqSledCommodityTypeMappingOptionStandardScheme extends StandardScheme<ReqSledCommodityTypeMappingOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqSledCommodityTypeMappingOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAPPING_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set704 = iprot.readSetBegin();
                struct.mappingIds = new HashSet<Integer>(2*_set704.size);
                for (int _i705 = 0; _i705 < _set704.size; ++_i705)
                {
                  int _elem706;
                  _elem706 = iprot.readI32();
                  struct.mappingIds.add(_elem706);
                }
                iprot.readSetEnd();
              }
              struct.setMappingIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledCommodityType = com.longsheng.xueqiao.contract.standard.thriftapi.SledCommodityType.findByValue(iprot.readI32());
              struct.setSledCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TECH_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.techPlatform = com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform.findByValue(iprot.readI32());
              struct.setTechPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TECH_PLATFORM_COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.techPlatformCommodityType = iprot.readString();
              struct.setTechPlatformCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAGE_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
              struct.pageOption.read(iprot);
              struct.setPageOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqSledCommodityTypeMappingOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mappingIds != null) {
        if (struct.isSetMappingIds()) {
          oprot.writeFieldBegin(MAPPING_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.mappingIds.size()));
            for (int _iter707 : struct.mappingIds)
            {
              oprot.writeI32(_iter707);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledCommodityType != null) {
        if (struct.isSetSledCommodityType()) {
          oprot.writeFieldBegin(SLED_COMMODITY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.sledCommodityType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.techPlatform != null) {
        if (struct.isSetTechPlatform()) {
          oprot.writeFieldBegin(TECH_PLATFORM_FIELD_DESC);
          oprot.writeI32(struct.techPlatform.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.techPlatformCommodityType != null) {
        if (struct.isSetTechPlatformCommodityType()) {
          oprot.writeFieldBegin(TECH_PLATFORM_COMMODITY_TYPE_FIELD_DESC);
          oprot.writeString(struct.techPlatformCommodityType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pageOption != null) {
        if (struct.isSetPageOption()) {
          oprot.writeFieldBegin(PAGE_OPTION_FIELD_DESC);
          struct.pageOption.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqSledCommodityTypeMappingOptionTupleSchemeFactory implements SchemeFactory {
    public ReqSledCommodityTypeMappingOptionTupleScheme getScheme() {
      return new ReqSledCommodityTypeMappingOptionTupleScheme();
    }
  }

  private static class ReqSledCommodityTypeMappingOptionTupleScheme extends TupleScheme<ReqSledCommodityTypeMappingOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqSledCommodityTypeMappingOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMappingIds()) {
        optionals.set(0);
      }
      if (struct.isSetSledCommodityType()) {
        optionals.set(1);
      }
      if (struct.isSetTechPlatform()) {
        optionals.set(2);
      }
      if (struct.isSetTechPlatformCommodityType()) {
        optionals.set(3);
      }
      if (struct.isSetPageOption()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetMappingIds()) {
        {
          oprot.writeI32(struct.mappingIds.size());
          for (int _iter708 : struct.mappingIds)
          {
            oprot.writeI32(_iter708);
          }
        }
      }
      if (struct.isSetSledCommodityType()) {
        oprot.writeI32(struct.sledCommodityType.getValue());
      }
      if (struct.isSetTechPlatform()) {
        oprot.writeI32(struct.techPlatform.getValue());
      }
      if (struct.isSetTechPlatformCommodityType()) {
        oprot.writeString(struct.techPlatformCommodityType);
      }
      if (struct.isSetPageOption()) {
        struct.pageOption.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqSledCommodityTypeMappingOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set709 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.mappingIds = new HashSet<Integer>(2*_set709.size);
          for (int _i710 = 0; _i710 < _set709.size; ++_i710)
          {
            int _elem711;
            _elem711 = iprot.readI32();
            struct.mappingIds.add(_elem711);
          }
        }
        struct.setMappingIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledCommodityType = com.longsheng.xueqiao.contract.standard.thriftapi.SledCommodityType.findByValue(iprot.readI32());
        struct.setSledCommodityTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.techPlatform = com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform.findByValue(iprot.readI32());
        struct.setTechPlatformIsSet(true);
      }
      if (incoming.get(3)) {
        struct.techPlatformCommodityType = iprot.readString();
        struct.setTechPlatformCommodityTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
        struct.pageOption.read(iprot);
        struct.setPageOptionIsSet(true);
      }
    }
  }

}

