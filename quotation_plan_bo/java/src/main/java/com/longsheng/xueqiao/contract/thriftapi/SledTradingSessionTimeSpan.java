/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SledTradingSessionTimeSpan implements org.apache.thrift.TBase<SledTradingSessionTimeSpan, SledTradingSessionTimeSpan._Fields>, java.io.Serializable, Cloneable, Comparable<SledTradingSessionTimeSpan> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SledTradingSessionTimeSpan");

  private static final org.apache.thrift.protocol.TField TIME_SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("timeSpanId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField START_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("startDay", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField END_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("endDay", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TIME_SPAN_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeSpanState", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TRADE_SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeSessionId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestamp", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SledTradingSessionTimeSpanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SledTradingSessionTimeSpanTupleSchemeFactory());
  }

  public long timeSpanId; // optional
  /**
   * 
   * @see Days
   */
  public Days startDay; // optional
  public String startTime; // optional
  /**
   * 
   * @see Days
   */
  public Days endDay; // optional
  public String endTime; // optional
  /**
   * 
   * @see TimeSpanState
   */
  public TimeSpanState timeSpanState; // optional
  public long tradeSessionId; // optional
  public long createTimestamp; // optional
  public long lastModifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME_SPAN_ID((short)1, "timeSpanId"),
    /**
     * 
     * @see Days
     */
    START_DAY((short)2, "startDay"),
    START_TIME((short)3, "startTime"),
    /**
     * 
     * @see Days
     */
    END_DAY((short)4, "endDay"),
    END_TIME((short)5, "endTime"),
    /**
     * 
     * @see TimeSpanState
     */
    TIME_SPAN_STATE((short)6, "timeSpanState"),
    TRADE_SESSION_ID((short)7, "tradeSessionId"),
    CREATE_TIMESTAMP((short)8, "createTimestamp"),
    LAST_MODIFY_TIMESTAMP((short)9, "lastModifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME_SPAN_ID
          return TIME_SPAN_ID;
        case 2: // START_DAY
          return START_DAY;
        case 3: // START_TIME
          return START_TIME;
        case 4: // END_DAY
          return END_DAY;
        case 5: // END_TIME
          return END_TIME;
        case 6: // TIME_SPAN_STATE
          return TIME_SPAN_STATE;
        case 7: // TRADE_SESSION_ID
          return TRADE_SESSION_ID;
        case 8: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 9: // LAST_MODIFY_TIMESTAMP
          return LAST_MODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESPANID_ISSET_ID = 0;
  private static final int __TRADESESSIONID_ISSET_ID = 1;
  private static final int __CREATETIMESTAMP_ISSET_ID = 2;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TIME_SPAN_ID,_Fields.START_DAY,_Fields.START_TIME,_Fields.END_DAY,_Fields.END_TIME,_Fields.TIME_SPAN_STATE,_Fields.TRADE_SESSION_ID,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME_SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("timeSpanId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_DAY, new org.apache.thrift.meta_data.FieldMetaData("startDay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Days.class)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_DAY, new org.apache.thrift.meta_data.FieldMetaData("endDay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Days.class)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_SPAN_STATE, new org.apache.thrift.meta_data.FieldMetaData("timeSpanState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TimeSpanState.class)));
    tmpMap.put(_Fields.TRADE_SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeSessionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SledTradingSessionTimeSpan.class, metaDataMap);
  }

  public SledTradingSessionTimeSpan() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SledTradingSessionTimeSpan(SledTradingSessionTimeSpan other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timeSpanId = other.timeSpanId;
    if (other.isSetStartDay()) {
      this.startDay = other.startDay;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndDay()) {
      this.endDay = other.endDay;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    if (other.isSetTimeSpanState()) {
      this.timeSpanState = other.timeSpanState;
    }
    this.tradeSessionId = other.tradeSessionId;
    this.createTimestamp = other.createTimestamp;
    this.lastModifyTimestamp = other.lastModifyTimestamp;
  }

  public SledTradingSessionTimeSpan deepCopy() {
    return new SledTradingSessionTimeSpan(this);
  }

  @Override
  public void clear() {
    setTimeSpanIdIsSet(false);
    this.timeSpanId = 0;
    this.startDay = null;
    this.startTime = null;
    this.endDay = null;
    this.endTime = null;
    this.timeSpanState = null;
    setTradeSessionIdIsSet(false);
    this.tradeSessionId = 0;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModifyTimestampIsSet(false);
    this.lastModifyTimestamp = 0;
  }

  public long getTimeSpanId() {
    return this.timeSpanId;
  }

  public SledTradingSessionTimeSpan setTimeSpanId(long timeSpanId) {
    this.timeSpanId = timeSpanId;
    setTimeSpanIdIsSet(true);
    return this;
  }

  public void unsetTimeSpanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESPANID_ISSET_ID);
  }

  /** Returns true if field timeSpanId is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeSpanId() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESPANID_ISSET_ID);
  }

  public void setTimeSpanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESPANID_ISSET_ID, value);
  }

  /**
   * 
   * @see Days
   */
  public Days getStartDay() {
    return this.startDay;
  }

  /**
   * 
   * @see Days
   */
  public SledTradingSessionTimeSpan setStartDay(Days startDay) {
    this.startDay = startDay;
    return this;
  }

  public void unsetStartDay() {
    this.startDay = null;
  }

  /** Returns true if field startDay is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDay() {
    return this.startDay != null;
  }

  public void setStartDayIsSet(boolean value) {
    if (!value) {
      this.startDay = null;
    }
  }

  public String getStartTime() {
    return this.startTime;
  }

  public SledTradingSessionTimeSpan setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  /**
   * 
   * @see Days
   */
  public Days getEndDay() {
    return this.endDay;
  }

  /**
   * 
   * @see Days
   */
  public SledTradingSessionTimeSpan setEndDay(Days endDay) {
    this.endDay = endDay;
    return this;
  }

  public void unsetEndDay() {
    this.endDay = null;
  }

  /** Returns true if field endDay is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDay() {
    return this.endDay != null;
  }

  public void setEndDayIsSet(boolean value) {
    if (!value) {
      this.endDay = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public SledTradingSessionTimeSpan setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  /**
   * 
   * @see TimeSpanState
   */
  public TimeSpanState getTimeSpanState() {
    return this.timeSpanState;
  }

  /**
   * 
   * @see TimeSpanState
   */
  public SledTradingSessionTimeSpan setTimeSpanState(TimeSpanState timeSpanState) {
    this.timeSpanState = timeSpanState;
    return this;
  }

  public void unsetTimeSpanState() {
    this.timeSpanState = null;
  }

  /** Returns true if field timeSpanState is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeSpanState() {
    return this.timeSpanState != null;
  }

  public void setTimeSpanStateIsSet(boolean value) {
    if (!value) {
      this.timeSpanState = null;
    }
  }

  public long getTradeSessionId() {
    return this.tradeSessionId;
  }

  public SledTradingSessionTimeSpan setTradeSessionId(long tradeSessionId) {
    this.tradeSessionId = tradeSessionId;
    setTradeSessionIdIsSet(true);
    return this;
  }

  public void unsetTradeSessionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADESESSIONID_ISSET_ID);
  }

  /** Returns true if field tradeSessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeSessionId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADESESSIONID_ISSET_ID);
  }

  public void setTradeSessionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADESESSIONID_ISSET_ID, value);
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public SledTradingSessionTimeSpan setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModifyTimestamp() {
    return this.lastModifyTimestamp;
  }

  public SledTradingSessionTimeSpan setLastModifyTimestamp(long lastModifyTimestamp) {
    this.lastModifyTimestamp = lastModifyTimestamp;
    setLastModifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastModifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIME_SPAN_ID:
      if (value == null) {
        unsetTimeSpanId();
      } else {
        setTimeSpanId((Long)value);
      }
      break;

    case START_DAY:
      if (value == null) {
        unsetStartDay();
      } else {
        setStartDay((Days)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_DAY:
      if (value == null) {
        unsetEndDay();
      } else {
        setEndDay((Days)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case TIME_SPAN_STATE:
      if (value == null) {
        unsetTimeSpanState();
      } else {
        setTimeSpanState((TimeSpanState)value);
      }
      break;

    case TRADE_SESSION_ID:
      if (value == null) {
        unsetTradeSessionId();
      } else {
        setTradeSessionId((Long)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastModifyTimestamp();
      } else {
        setLastModifyTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME_SPAN_ID:
      return Long.valueOf(getTimeSpanId());

    case START_DAY:
      return getStartDay();

    case START_TIME:
      return getStartTime();

    case END_DAY:
      return getEndDay();

    case END_TIME:
      return getEndTime();

    case TIME_SPAN_STATE:
      return getTimeSpanState();

    case TRADE_SESSION_ID:
      return Long.valueOf(getTradeSessionId());

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODIFY_TIMESTAMP:
      return Long.valueOf(getLastModifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIME_SPAN_ID:
      return isSetTimeSpanId();
    case START_DAY:
      return isSetStartDay();
    case START_TIME:
      return isSetStartTime();
    case END_DAY:
      return isSetEndDay();
    case END_TIME:
      return isSetEndTime();
    case TIME_SPAN_STATE:
      return isSetTimeSpanState();
    case TRADE_SESSION_ID:
      return isSetTradeSessionId();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODIFY_TIMESTAMP:
      return isSetLastModifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SledTradingSessionTimeSpan)
      return this.equals((SledTradingSessionTimeSpan)that);
    return false;
  }

  public boolean equals(SledTradingSessionTimeSpan that) {
    if (that == null)
      return false;

    boolean this_present_timeSpanId = true && this.isSetTimeSpanId();
    boolean that_present_timeSpanId = true && that.isSetTimeSpanId();
    if (this_present_timeSpanId || that_present_timeSpanId) {
      if (!(this_present_timeSpanId && that_present_timeSpanId))
        return false;
      if (this.timeSpanId != that.timeSpanId)
        return false;
    }

    boolean this_present_startDay = true && this.isSetStartDay();
    boolean that_present_startDay = true && that.isSetStartDay();
    if (this_present_startDay || that_present_startDay) {
      if (!(this_present_startDay && that_present_startDay))
        return false;
      if (!this.startDay.equals(that.startDay))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endDay = true && this.isSetEndDay();
    boolean that_present_endDay = true && that.isSetEndDay();
    if (this_present_endDay || that_present_endDay) {
      if (!(this_present_endDay && that_present_endDay))
        return false;
      if (!this.endDay.equals(that.endDay))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_timeSpanState = true && this.isSetTimeSpanState();
    boolean that_present_timeSpanState = true && that.isSetTimeSpanState();
    if (this_present_timeSpanState || that_present_timeSpanState) {
      if (!(this_present_timeSpanState && that_present_timeSpanState))
        return false;
      if (!this.timeSpanState.equals(that.timeSpanState))
        return false;
    }

    boolean this_present_tradeSessionId = true && this.isSetTradeSessionId();
    boolean that_present_tradeSessionId = true && that.isSetTradeSessionId();
    if (this_present_tradeSessionId || that_present_tradeSessionId) {
      if (!(this_present_tradeSessionId && that_present_tradeSessionId))
        return false;
      if (this.tradeSessionId != that.tradeSessionId)
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModifyTimestamp = true && this.isSetLastModifyTimestamp();
    boolean that_present_lastModifyTimestamp = true && that.isSetLastModifyTimestamp();
    if (this_present_lastModifyTimestamp || that_present_lastModifyTimestamp) {
      if (!(this_present_lastModifyTimestamp && that_present_lastModifyTimestamp))
        return false;
      if (this.lastModifyTimestamp != that.lastModifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SledTradingSessionTimeSpan other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTimeSpanId()).compareTo(other.isSetTimeSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeSpanId, other.timeSpanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDay()).compareTo(other.isSetStartDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDay, other.startDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDay()).compareTo(other.isSetEndDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDay, other.endDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeSpanState()).compareTo(other.isSetTimeSpanState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeSpanState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeSpanState, other.timeSpanState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeSessionId()).compareTo(other.isSetTradeSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeSessionId, other.tradeSessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestamp()).compareTo(other.isSetLastModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestamp, other.lastModifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SledTradingSessionTimeSpan(");
    boolean first = true;

    if (isSetTimeSpanId()) {
      sb.append("timeSpanId:");
      sb.append(this.timeSpanId);
      first = false;
    }
    if (isSetStartDay()) {
      if (!first) sb.append(", ");
      sb.append("startDay:");
      if (this.startDay == null) {
        sb.append("null");
      } else {
        sb.append(this.startDay);
      }
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
    }
    if (isSetEndDay()) {
      if (!first) sb.append(", ");
      sb.append("endDay:");
      if (this.endDay == null) {
        sb.append("null");
      } else {
        sb.append(this.endDay);
      }
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
    }
    if (isSetTimeSpanState()) {
      if (!first) sb.append(", ");
      sb.append("timeSpanState:");
      if (this.timeSpanState == null) {
        sb.append("null");
      } else {
        sb.append(this.timeSpanState);
      }
      first = false;
    }
    if (isSetTradeSessionId()) {
      if (!first) sb.append(", ");
      sb.append("tradeSessionId:");
      sb.append(this.tradeSessionId);
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestamp:");
      sb.append(this.lastModifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SledTradingSessionTimeSpanStandardSchemeFactory implements SchemeFactory {
    public SledTradingSessionTimeSpanStandardScheme getScheme() {
      return new SledTradingSessionTimeSpanStandardScheme();
    }
  }

  private static class SledTradingSessionTimeSpanStandardScheme extends StandardScheme<SledTradingSessionTimeSpan> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SledTradingSessionTimeSpan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME_SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeSpanId = iprot.readI64();
              struct.setTimeSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startDay = Days.findByValue(iprot.readI32());
              struct.setStartDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endDay = Days.findByValue(iprot.readI32());
              struct.setEndDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIME_SPAN_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeSpanState = TimeSpanState.findByValue(iprot.readI32());
              struct.setTimeSpanStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRADE_SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tradeSessionId = iprot.readI64();
              struct.setTradeSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestamp = iprot.readI64();
              struct.setLastModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SledTradingSessionTimeSpan struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTimeSpanId()) {
        oprot.writeFieldBegin(TIME_SPAN_ID_FIELD_DESC);
        oprot.writeI64(struct.timeSpanId);
        oprot.writeFieldEnd();
      }
      if (struct.startDay != null) {
        if (struct.isSetStartDay()) {
          oprot.writeFieldBegin(START_DAY_FIELD_DESC);
          oprot.writeI32(struct.startDay.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.startTime != null) {
        if (struct.isSetStartTime()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endDay != null) {
        if (struct.isSetEndDay()) {
          oprot.writeFieldBegin(END_DAY_FIELD_DESC);
          oprot.writeI32(struct.endDay.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.endTime != null) {
        if (struct.isSetEndTime()) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.timeSpanState != null) {
        if (struct.isSetTimeSpanState()) {
          oprot.writeFieldBegin(TIME_SPAN_STATE_FIELD_DESC);
          oprot.writeI32(struct.timeSpanState.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTradeSessionId()) {
        oprot.writeFieldBegin(TRADE_SESSION_ID_FIELD_DESC);
        oprot.writeI64(struct.tradeSessionId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SledTradingSessionTimeSpanTupleSchemeFactory implements SchemeFactory {
    public SledTradingSessionTimeSpanTupleScheme getScheme() {
      return new SledTradingSessionTimeSpanTupleScheme();
    }
  }

  private static class SledTradingSessionTimeSpanTupleScheme extends TupleScheme<SledTradingSessionTimeSpan> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SledTradingSessionTimeSpan struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTimeSpanId()) {
        optionals.set(0);
      }
      if (struct.isSetStartDay()) {
        optionals.set(1);
      }
      if (struct.isSetStartTime()) {
        optionals.set(2);
      }
      if (struct.isSetEndDay()) {
        optionals.set(3);
      }
      if (struct.isSetEndTime()) {
        optionals.set(4);
      }
      if (struct.isSetTimeSpanState()) {
        optionals.set(5);
      }
      if (struct.isSetTradeSessionId()) {
        optionals.set(6);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(7);
      }
      if (struct.isSetLastModifyTimestamp()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetTimeSpanId()) {
        oprot.writeI64(struct.timeSpanId);
      }
      if (struct.isSetStartDay()) {
        oprot.writeI32(struct.startDay.getValue());
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndDay()) {
        oprot.writeI32(struct.endDay.getValue());
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetTimeSpanState()) {
        oprot.writeI32(struct.timeSpanState.getValue());
      }
      if (struct.isSetTradeSessionId()) {
        oprot.writeI64(struct.tradeSessionId);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeI64(struct.lastModifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SledTradingSessionTimeSpan struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.timeSpanId = iprot.readI64();
        struct.setTimeSpanIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startDay = Days.findByValue(iprot.readI32());
        struct.setStartDayIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endDay = Days.findByValue(iprot.readI32());
        struct.setEndDayIsSet(true);
      }
      if (incoming.get(4)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.timeSpanState = TimeSpanState.findByValue(iprot.readI32());
        struct.setTimeSpanStateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tradeSessionId = iprot.readI64();
        struct.setTradeSessionIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lastModifyTimestamp = iprot.readI64();
        struct.setLastModifyTimestampIsSet(true);
      }
    }
  }

}

