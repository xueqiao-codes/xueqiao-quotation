/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.quotation.plan.bo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GenPreviewState implements org.apache.thrift.TBase<GenPreviewState, GenPreviewState._Fields>, java.io.Serializable, Cloneable, Comparable<GenPreviewState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GenPreviewState");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATE_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("stateMsg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTimestampMs", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GenPreviewStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GenPreviewStateTupleSchemeFactory());
  }

  /**
   * 
   * @see EGenPreviewStatus
   */
  public EGenPreviewStatus status; // optional
  public String stateMsg; // optional
  public long lastUpdateTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see EGenPreviewStatus
     */
    STATUS((short)1, "status"),
    STATE_MSG((short)2, "stateMsg"),
    LAST_UPDATE_TIMESTAMP_MS((short)3, "lastUpdateTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // STATE_MSG
          return STATE_MSG;
        case 3: // LAST_UPDATE_TIMESTAMP_MS
          return LAST_UPDATE_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LASTUPDATETIMESTAMPMS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.STATUS,_Fields.STATE_MSG,_Fields.LAST_UPDATE_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EGenPreviewStatus.class)));
    tmpMap.put(_Fields.STATE_MSG, new org.apache.thrift.meta_data.FieldMetaData("stateMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GenPreviewState.class, metaDataMap);
  }

  public GenPreviewState() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GenPreviewState(GenPreviewState other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetStateMsg()) {
      this.stateMsg = other.stateMsg;
    }
    this.lastUpdateTimestampMs = other.lastUpdateTimestampMs;
  }

  public GenPreviewState deepCopy() {
    return new GenPreviewState(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.stateMsg = null;
    setLastUpdateTimestampMsIsSet(false);
    this.lastUpdateTimestampMs = 0;
  }

  /**
   * 
   * @see EGenPreviewStatus
   */
  public EGenPreviewStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see EGenPreviewStatus
   */
  public GenPreviewState setStatus(EGenPreviewStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getStateMsg() {
    return this.stateMsg;
  }

  public GenPreviewState setStateMsg(String stateMsg) {
    this.stateMsg = stateMsg;
    return this;
  }

  public void unsetStateMsg() {
    this.stateMsg = null;
  }

  /** Returns true if field stateMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetStateMsg() {
    return this.stateMsg != null;
  }

  public void setStateMsgIsSet(boolean value) {
    if (!value) {
      this.stateMsg = null;
    }
  }

  public long getLastUpdateTimestampMs() {
    return this.lastUpdateTimestampMs;
  }

  public GenPreviewState setLastUpdateTimestampMs(long lastUpdateTimestampMs) {
    this.lastUpdateTimestampMs = lastUpdateTimestampMs;
    setLastUpdateTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastUpdateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTUPDATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastUpdateTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTUPDATETIMESTAMPMS_ISSET_ID);
  }

  public void setLastUpdateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTUPDATETIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((EGenPreviewStatus)value);
      }
      break;

    case STATE_MSG:
      if (value == null) {
        unsetStateMsg();
      } else {
        setStateMsg((String)value);
      }
      break;

    case LAST_UPDATE_TIMESTAMP_MS:
      if (value == null) {
        unsetLastUpdateTimestampMs();
      } else {
        setLastUpdateTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case STATE_MSG:
      return getStateMsg();

    case LAST_UPDATE_TIMESTAMP_MS:
      return Long.valueOf(getLastUpdateTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case STATE_MSG:
      return isSetStateMsg();
    case LAST_UPDATE_TIMESTAMP_MS:
      return isSetLastUpdateTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GenPreviewState)
      return this.equals((GenPreviewState)that);
    return false;
  }

  public boolean equals(GenPreviewState that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_stateMsg = true && this.isSetStateMsg();
    boolean that_present_stateMsg = true && that.isSetStateMsg();
    if (this_present_stateMsg || that_present_stateMsg) {
      if (!(this_present_stateMsg && that_present_stateMsg))
        return false;
      if (!this.stateMsg.equals(that.stateMsg))
        return false;
    }

    boolean this_present_lastUpdateTimestampMs = true && this.isSetLastUpdateTimestampMs();
    boolean that_present_lastUpdateTimestampMs = true && that.isSetLastUpdateTimestampMs();
    if (this_present_lastUpdateTimestampMs || that_present_lastUpdateTimestampMs) {
      if (!(this_present_lastUpdateTimestampMs && that_present_lastUpdateTimestampMs))
        return false;
      if (this.lastUpdateTimestampMs != that.lastUpdateTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(GenPreviewState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStateMsg()).compareTo(other.isSetStateMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStateMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stateMsg, other.stateMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTimestampMs()).compareTo(other.isSetLastUpdateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTimestampMs, other.lastUpdateTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GenPreviewState(");
    boolean first = true;

    if (isSetStatus()) {
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetStateMsg()) {
      if (!first) sb.append(", ");
      sb.append("stateMsg:");
      if (this.stateMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.stateMsg);
      }
      first = false;
    }
    if (isSetLastUpdateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("lastUpdateTimestampMs:");
      sb.append(this.lastUpdateTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GenPreviewStateStandardSchemeFactory implements SchemeFactory {
    public GenPreviewStateStandardScheme getScheme() {
      return new GenPreviewStateStandardScheme();
    }
  }

  private static class GenPreviewStateStandardScheme extends StandardScheme<GenPreviewState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GenPreviewState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = EGenPreviewStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATE_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stateMsg = iprot.readString();
              struct.setStateMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_UPDATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastUpdateTimestampMs = iprot.readI64();
              struct.setLastUpdateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GenPreviewState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.stateMsg != null) {
        if (struct.isSetStateMsg()) {
          oprot.writeFieldBegin(STATE_MSG_FIELD_DESC);
          oprot.writeString(struct.stateMsg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLastUpdateTimestampMs()) {
        oprot.writeFieldBegin(LAST_UPDATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.lastUpdateTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GenPreviewStateTupleSchemeFactory implements SchemeFactory {
    public GenPreviewStateTupleScheme getScheme() {
      return new GenPreviewStateTupleScheme();
    }
  }

  private static class GenPreviewStateTupleScheme extends TupleScheme<GenPreviewState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GenPreviewState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetStateMsg()) {
        optionals.set(1);
      }
      if (struct.isSetLastUpdateTimestampMs()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetStateMsg()) {
        oprot.writeString(struct.stateMsg);
      }
      if (struct.isSetLastUpdateTimestampMs()) {
        oprot.writeI64(struct.lastUpdateTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GenPreviewState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.status = EGenPreviewStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.stateMsg = iprot.readString();
        struct.setStateMsgIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastUpdateTimestampMs = iprot.readI64();
        struct.setLastUpdateTimestampMsIsSet(true);
      }
    }
  }

}

